#!/usr/bin/env python3
"""
Script de verifica√ß√£o final para deploy no Render
Verifica se todas as otimiza√ß√µes est√£o prontas
"""

def check_deploy_readiness():
    print("üöÄ VERIFICA√á√ÉO FINAL PARA DEPLOY NO RENDER")
    print("=" * 60)
    
    checks_passed = 0
    total_checks = 0
    
    # 1. Verificar arquivos essenciais
    print("\nüìÅ 1. ARQUIVOS ESSENCIAIS")
    essential_files = [
        'app.py', 'wsgi.py', 'gunicorn.conf.py', 
        'memory_optimizer.py', 'requirements.txt'
    ]
    
    import os
    for file in essential_files:
        total_checks += 1
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
            checks_passed += 1
        else:
            print(f"   ‚ùå {file} FALTANDO!")
    
    # 2. Verificar depend√™ncias Python
    print("\nüêç 2. DEPEND√äNCIAS PYTHON")
    dependencies = ['flask', 'gunicorn', 'google-api-python-client']
    
    for dep in dependencies:
        total_checks += 1
        try:
            __import__(dep.replace('-', '_'))
            print(f"   ‚úÖ {dep}")
            checks_passed += 1
        except ImportError:
            print(f"   ‚ùå {dep} n√£o instalado!")
    
    # 3. Verificar memory optimizer
    print("\nüß† 3. MEMORY OPTIMIZER")
    total_checks += 1
    try:
        from memory_optimizer import MemoryOptimizer
        print(f"   ‚úÖ Memory Optimizer OK")
        print(f"   üíæ Uso atual: {MemoryOptimizer.get_memory_usage()}")
        checks_passed += 1
    except ImportError:
        print("   ‚ùå Memory Optimizer com problemas!")
    
    # 4. Verificar configura√ß√µes de produ√ß√£o
    print("\n‚öôÔ∏è 4. CONFIGURA√á√ïES DE PRODU√á√ÉO")
    
    # Simular ambiente de produ√ß√£o
    os.environ['FLASK_ENV'] = 'production'
    
    total_checks += 1
    try:
        from app import app
        print("   ‚úÖ App Flask carreg√°vel")
        checks_passed += 1
    except Exception as e:
        print(f"   ‚ùå Erro ao carregar app: {e}")
    
    # 5. Verificar gunicorn
    print("\nü¶Ñ 5. GUNICORN")
    total_checks += 1
    try:
        import gunicorn
        print("   ‚úÖ Gunicorn instalado")
        checks_passed += 1
    except ImportError:
        print("   ‚ùå Gunicorn n√£o instalado!")
    
    # 6. Verificar configura√ß√£o de mem√≥ria
    print("\nüßπ 6. CONFIGURA√á√ïES DE MEM√ìRIA")
    import gc
    
    # Aplicar configura√ß√µes otimizadas
    gc.set_threshold(500, 5, 5)
    threshold = gc.get_threshold()
    
    total_checks += 1
    if threshold == (500, 5, 5):
        print(f"   ‚úÖ GC otimizado: {threshold}")
        checks_passed += 1
    else:
        print(f"   ‚ùå GC n√£o otimizado: {threshold}")
    
    # 7. Verificar vari√°veis de ambiente necess√°rias
    print("\nüåç 7. VARI√ÅVEIS DE AMBIENTE (para Render)")
    required_vars = [
        'FLASK_ENV', 'GOOGLE_SHEETS_ID', 'SECRET_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        total_checks += 1
        if os.environ.get(var):
            print(f"   ‚úÖ {var} definido")
            checks_passed += 1
        else:
            print(f"   ‚ö†Ô∏è {var} n√£o definido (definir no Render)")
            missing_vars.append(var)
    
    # 8. Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO FINAL")
    print(f"‚úÖ Verifica√ß√µes passaram: {checks_passed}/{total_checks}")
    print(f"üìà Taxa de sucesso: {(checks_passed/total_checks)*100:.1f}%")
    
    if checks_passed >= total_checks - len(missing_vars):
        print("\nüéâ PRONTO PARA DEPLOY NO RENDER!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Copiar todos os arquivos para o reposit√≥rio")
        print("2. Configurar vari√°veis de ambiente no Render:")
        for var in missing_vars:
            print(f"   - {var}")
        print("3. Build Command: pip install --no-cache-dir -r requirements.txt")
        print("4. Start Command: gunicorn --config gunicorn.conf.py wsgi:application")
        print("5. Monitorar: GET /api/memory-status")
        
        return True
    else:
        print("\n‚ùå PROBLEMAS ENCONTRADOS - CORRIGIR ANTES DO DEPLOY")
        return False

if __name__ == "__main__":
    check_deploy_readiness()
