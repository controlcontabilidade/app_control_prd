# -*- coding: utf-8 -*-
"""
Configura√ß√£o Gunicorn ULTRA-OTIMIZADA para Render
Objetivo: Reduzir consumo de mem√≥ria de 500MB para <256MB
"""

import os
import multiprocessing

# Configura√ß√µes de binding
bind = "0.0.0.0:10000"  # Porta padr√£o do Render

# CONFIGURA√á√ïES DE MEM√ìRIA EXTREMAMENTE OTIMIZADAS PARA RENDER
# =============================================================

# WORKERS: Apenas 1 para economizar mem√≥ria m√°xima
workers = 1  # M√çNIMO absoluto para Render 512MB

# WORKER CLASS: sync para menor consumo de mem√≥ria
worker_class = "sync"

# CONEX√ïES: M√≠nimo para economizar mem√≥ria
worker_connections = 3  # Extremamente baixo

# TIMEOUTS: Baixos para for√ßar reciclagem
timeout = 15  # 15 segundos apenas
keepalive = 1  # 1 segundo apenas
graceful_timeout = 10  # 10 segundos para shutdown

# RECICLAGEM DE WORKERS: Muito frequente para limpar mem√≥ria
max_requests = 25  # Reciclar ap√≥s apenas 25 requests
max_requests_jitter = 5  # Adicionar aleatoriedade

# PRELOAD: Essencial para economizar mem√≥ria
preload_app = True  # Carrega app antes de fork dos workers

# CONFIGURA√á√ïES DE MEM√ìRIA
# =========================

# Limitar mem√≥ria por worker (se dispon√≠vel)
worker_tmp_dir = "/dev/shm"  # Usar RAM tmpfs se dispon√≠vel

# LOGGING: M√≠nimo para economizar I/O e mem√≥ria
# ==============================================

# Logs essenciais apenas
loglevel = "warning"  # Apenas warnings e erros
access_log_format = '%(h)s "%(r)s" %(s)s %(b)s'  # Formato m√≠nimo
accesslog = "-"  # STDOUT
errorlog = "-"   # STDERR

# Desabilitar logs desnecess√°rios
disable_redirect_access_to_syslog = True
capture_output = True

# CONFIGURA√á√ïES DE PROCESSO
# ==========================

# Daemon: N√£o para Render
daemon = False

# PID file: N√£o necess√°rio no Render
pidfile = None

# User/Group: Autom√°tico no Render
user = None
group = None

# CONFIGURA√á√ïES DE STARTUP
# =========================

def on_starting(server):
    """Callback executado no in√≠cio do Gunicorn"""
    print("üöÄ Iniciando Gunicorn com configura√ß√µes RENDER-OTIMIZADAS")
    print(f"   Workers: {workers}")
    print(f"   Worker Class: {worker_class}")
    print(f"   Conex√µes por Worker: {worker_connections}")
    print(f"   Timeout: {timeout}s")
    print(f"   Max Requests: {max_requests}")
    print(f"   Preload App: {preload_app}")

def on_reload(server):
    """Callback executado no reload"""
    print("üîÑ Recarregando aplica√ß√£o...")

def worker_int(worker):
    """Callback executado quando worker recebe SIGINT"""
    print(f"üí• Worker {worker.pid} interrompido")

def on_exit(server):
    """Callback executado na sa√≠da"""
    print("üõë Finalizando Gunicorn")

# CONFIGURA√á√ïES ESPEC√çFICAS DO RENDER
# ====================================

# Detectar se est√° rodando no Render
if os.environ.get('RENDER'):
    print("üéØ Detectado ambiente Render - aplicando otimiza√ß√µes espec√≠ficas")
    
    # For√ßar configura√ß√µes m√≠nimas para Render
    workers = 1
    worker_connections = 3
    max_requests = 25
    timeout = 15
    
    # Configura√ß√µes de mem√≥ria ainda mais agressivas
    worker_tmp_dir = "/tmp"  # Usar /tmp no Render
    
    # Logs m√≠nimos no Render
    loglevel = "error"  # Apenas erros no Render

# CONFIGURA√á√ïES DE DESENVOLVIMENTO (para teste local)
# ===================================================
elif os.environ.get('FLASK_DEBUG') == '1':
    print("üîß Modo desenvolvimento detectado")
    workers = 1
    loglevel = "debug"
    reload = True
    timeout = 30

print(f"‚öôÔ∏è Configura√ß√£o final:")
print(f"   Environment: {'Render' if os.environ.get('RENDER') else 'Other'}")
print(f"   Workers: {workers}")
print(f"   Memory optimization: EXTREME")
