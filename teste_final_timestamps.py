import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime
from services.google_sheets_service_account import GoogleSheetsServiceAccountService

print("üéØ TESTE FINAL: Verificando comportamento completo dos timestamps")

# IDs de teste  
spreadsheet_id = "1jEmEPlxhGsrB_VhP3Pa-69xGRXRSwSAKd1Ypx241M4s"
client_id = "2025-10-02T20:28:50.267025"

try:
    service = GoogleSheetsServiceAccountService(spreadsheet_id=spreadsheet_id)
    print("‚úÖ Servi√ßo inicializado")
    
    # 1. BUSCAR CLIENTE INICIAL
    client = service.get_client(client_id)
    if client:
        print(f"‚úÖ Cliente: {client.get('nomeEmpresa', 'NOME N√ÉO ENCONTRADO')}")
        print(f"üìÖ Data de Cria√ß√£o: '{client.get('criadoEm', 'VAZIO')}'")
        print(f"üïê √öltima Atualiza√ß√£o: '{client.get('ultimaAtualizacao', 'VAZIO')}'")
        
        # 2. SIMULAR CRIA√á√ÉO DE CLIENTE NOVO (s√≥ para testar se criadoEm √© gerado)
        print(f"\nüÜï TESTE: Criando cliente novo...")
        novo_cliente = {
            'nomeEmpresa': f'TESTE TIMESTAMP {datetime.now().strftime("%H:%M:%S")}',
            'cnpj': '00.000.000/0001-99',
            'razaoSocialReceita': 'TESTE LTDA'
        }
        
        resultado_novo = service.save_client(novo_cliente)
        print(f"üíæ Resultado cria√ß√£o: {resultado_novo}")
        
        if resultado_novo and isinstance(resultado_novo, dict) and 'client_id' in resultado_novo:
            novo_id = resultado_novo['client_id']
            print(f"üÜî Novo ID gerado: {novo_id}")
            
            # Buscar o cliente rec√©m-criado
            novo_cliente_salvo = service.get_client(novo_id)
            if novo_cliente_salvo:
                print(f"üìÖ Novo cliente - Data de Cria√ß√£o: '{novo_cliente_salvo.get('criadoEm', 'VAZIO')}'")
                print(f"üïê Novo cliente - √öltima Atualiza√ß√£o: '{novo_cliente_salvo.get('ultimaAtualizacao', 'VAZIO')}'")
            
        # 3. TESTAR ATUALIZA√á√ÉO DO CLIENTE ORIGINAL
        print(f"\n‚úèÔ∏è TESTE: Atualizando cliente original...")
        client_atualizado = client.copy()
        client_atualizado['observacoes'] = f'Teste de atualiza√ß√£o {datetime.now().strftime("%H:%M:%S")}'
        
        resultado_atualizacao = service.update_client(client_atualizado)
        print(f"üíæ Resultado atualiza√ß√£o: {resultado_atualizacao}")
        
        # Verificar ap√≥s atualiza√ß√£o
        client_pos_atualizacao = service.get_client(client_id)
        if client_pos_atualizacao:
            print(f"üìÖ Ap√≥s atualiza√ß√£o - Data de Cria√ß√£o: '{client_pos_atualizacao.get('criadoEm', 'VAZIO')}'")
            print(f"üïê Ap√≥s atualiza√ß√£o - √öltima Atualiza√ß√£o: '{client_pos_atualizacao.get('ultimaAtualizacao', 'VAZIO')}'")
            
            # Comparar
            criacao_mudou = client.get('criadoEm') != client_pos_atualizacao.get('criadoEm')
            atualizacao_mudou = client.get('ultimaAtualizacao') != client_pos_atualizacao.get('ultimaAtualizacao')
            
            print(f"\nüìä AN√ÅLISE FINAL:")
            print(f"{'‚ùå' if criacao_mudou else '‚úÖ'} Data de Cria√ß√£o {'MUDOU' if criacao_mudou else 'PRESERVADA'} {'(ERRO!)' if criacao_mudou else '(correto)'}")
            print(f"{'‚úÖ' if atualizacao_mudou else '‚ùå'} √öltima Atualiza√ß√£o {'ATUALIZADA' if atualizacao_mudou else 'N√ÉO MUDOU'} {'(correto)' if atualizacao_mudou else '(ERRO!)'}")
    
    else:
        print("‚ùå Cliente n√£o encontrado")
        
except Exception as e:
    print(f"‚ùå Erro: {e}")
    import traceback
    traceback.print_exc()