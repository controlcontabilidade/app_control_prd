#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Otimiza√ß√£o RENDER
Prepara a aplica√ß√£o para consumir menos de 256MB de mem√≥ria no Render
"""

import os
import sys
import shutil
import json

def optimize_for_render():
    """Aplicar todas as otimiza√ß√µes para deploy no Render"""
    
    print("üéØ INICIANDO OTIMIZA√á√ÉO PARA RENDER")
    print("=" * 50)
    
    # 1. Verificar se est√° no diret√≥rio correto
    if not os.path.exists('app.py'):
        print("‚ùå Erro: Execute este script no diret√≥rio raiz da aplica√ß√£o")
        return False
    
    # 2. Backup do requirements.txt original
    if os.path.exists('requirements.txt'):
        print("üìã Fazendo backup do requirements.txt original...")
        shutil.copy('requirements.txt', 'requirements.original.txt')
    
    # 3. Substituir requirements.txt pelo otimizado
    if os.path.exists('requirements.render.minimal.txt'):
        print("üì¶ Aplicando requirements.txt otimizado para Render...")
        shutil.copy('requirements.render.minimal.txt', 'requirements.txt')
    
    # 4. Verificar configura√ß√µes Gunicorn
    if os.path.exists('gunicorn.render.optimized.conf.py'):
        print("‚öôÔ∏è Configura√ß√£o Gunicorn otimizada encontrada")
    else:
        print("‚ö†Ô∏è Aviso: Configura√ß√£o Gunicorn otimizada n√£o encontrada")
    
    # 5. Verificar Procfile
    if os.path.exists('Procfile'):
        with open('Procfile', 'r') as f:
            procfile_content = f.read()
        
        if 'gunicorn.render.optimized.conf.py' in procfile_content:
            print("‚úÖ Procfile j√° otimizado")
        else:
            print("‚ö†Ô∏è Aviso: Procfile pode n√£o estar otimizado")
    
    # 6. Verificar vari√°veis de ambiente necess√°rias
    print("\nüîç VERIFICANDO VARI√ÅVEIS DE AMBIENTE NECESS√ÅRIAS:")
    required_env_vars = [
        'GOOGLE_SERVICE_ACCOUNT_JSON',
        'GOOGLE_SHEETS_ID',
        'SECRET_KEY'
    ]
    
    for var in required_env_vars:
        if os.environ.get(var):
            print(f"   ‚úÖ {var}: Configurado")
        else:
            print(f"   ‚ùå {var}: N√ÉO CONFIGURADO")
    
    # 7. Informa√ß√µes sobre otimiza√ß√µes aplicadas
    print("\nüöÄ OTIMIZA√á√ïES APLICADAS:")
    print("   ‚úÖ Memory Optimizer Lite")
    print("   ‚úÖ Gunicorn: 1 worker, 3 conex√µes")
    print("   ‚úÖ Upload limitado: 256KB")
    print("   ‚úÖ GC agressivo: (10,1,1)")
    print("   ‚úÖ Cache m√≠nimo: 5 minutos")
    print("   ‚úÖ Timeouts baixos: 15s")
    print("   ‚úÖ Logs m√≠nimos: apenas erros")
    print("   ‚úÖ Depend√™ncias m√≠nimas")
    
    # 8. Estimativa de uso de mem√≥ria
    print("\nüìä ESTIMATIVA DE USO DE MEM√ìRIA:")
    memory_components = {
        "Python runtime": "~30MB",
        "Flask + depend√™ncias": "~40MB",
        "Google API client": "~25MB",
        "Aplica√ß√£o + templates": "~15MB",
        "Buffer/overhead": "~20MB",
        "TOTAL ESTIMADO": "~130MB"
    }
    
    for component, usage in memory_components.items():
        print(f"   {component}: {usage}")
    
    print("\n" + "=" * 50)
    print("üéØ OTIMIZA√á√ÉO CONCLU√çDA!")
    print("üíæ Objetivo: <256MB de mem√≥ria")
    print("üìà Estimativa: ~130MB")
    print("üöÄ Redu√ß√£o esperada: ~70% (de 500MB)")
    
    # 9. Pr√≥ximos passos
    print("\nüîÑ PR√ìXIMOS PASSOS:")
    print("1. Commit e push das mudan√ßas")
    print("2. Deploy no Render")
    print("3. Monitorar uso de mem√≥ria")
    print("4. Verificar logs para erros")
    
    return True

def revert_optimizations():
    """Reverter otimiza√ß√µes (voltar ao original)"""
    print("üîÑ REVERTENDO OTIMIZA√á√ïES...")
    
    # Restaurar requirements.txt original
    if os.path.exists('requirements.original.txt'):
        print("üì¶ Restaurando requirements.txt original...")
        shutil.copy('requirements.original.txt', 'requirements.txt')
        os.remove('requirements.original.txt')
    
    print("‚úÖ Otimiza√ß√µes revertidas")

def show_memory_tips():
    """Mostrar dicas de otimiza√ß√£o de mem√≥ria"""
    print("\nüí° DICAS PARA REDUZIR AINDA MAIS A MEM√ìRIA:")
    print("‚îÅ" * 50)
    print("1. üóÑÔ∏è  Use cache Redis externo em vez de cache interno")
    print("2. üì¶  Remova depend√™ncias desnecess√°rias")
    print("3. üîÑ  Configure restart autom√°tico dos workers")
    print("4. üìä  Use lazy loading para dados grandes")
    print("5. üßπ  Implemente limpeza autom√°tica de sess√µes")
    print("6. ‚ö°  Use CDN para arquivos est√°ticos")
    print("7. üóÇÔ∏è  Considere pagination para listas grandes")
    print("8. üíæ  Use format JSON compacto (sem pretty print)")

if __name__ == "__main__":
    print("üéØ OTIMIZADOR RENDER - Control Contabilidade")
    print("Objetivo: Reduzir uso de mem√≥ria de 500MB para <256MB")
    print()
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "revert":
            revert_optimizations()
        elif sys.argv[1] == "tips":
            show_memory_tips()
        else:
            print("Uso: python optimize_render.py [revert|tips]")
    else:
        optimize_for_render()
        show_memory_tips()
