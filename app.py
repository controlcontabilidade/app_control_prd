# -*- coding: utf-8 -*-
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash, session
import json
import os
import gc  # Para otimiza√ß√£o de mem√≥ria
from datetime import datetime
from functools import wraps

# Importar otimizador de mem√≥ria
try:
    from memory_optimizer import MemoryOptimizer, MEMORY_OPTIMIZED_SETTINGS, get_optimized_batch_size
    MEMORY_OPTIMIZER_AVAILABLE = True
    print("üß† Memory Optimizer carregado")
except ImportError:
    MEMORY_OPTIMIZER_AVAILABLE = False
    print("‚ö†Ô∏è Memory Optimizer n√£o dispon√≠vel")
    
    # Definir fun√ß√£o fallback
    def get_optimized_batch_size():
        return 50

from services.google_sheets_service import GoogleSheetsService
from services.local_storage_service import LocalStorageService
from services.meeting_service import MeetingService
from services.user_service import UserService
from services.report_service import ReportService

# Tentar importar servi√ßo completo, usar lite como fallback
try:
    from check_dependencies import get_available_import_service
    ImportService, IMPORT_SERVICE_TYPE = get_available_import_service()
    print(f"‚úÖ Servi√ßo de importa√ß√£o: {IMPORT_SERVICE_TYPE}")
except Exception as e:
    print(f"‚ùå Erro ao carregar servi√ßo de importa√ß√£o: {e}")
    ImportService = None
    IMPORT_SERVICE_TYPE = "none"

from werkzeug.utils import secure_filename

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'your-secret-key-here-change-in-production')

# Aplicar otimiza√ß√µes de mem√≥ria se dispon√≠vel
if MEMORY_OPTIMIZER_AVAILABLE:
    MemoryOptimizer.setup_production_memory_settings()
    MemoryOptimizer.optimize_flask_config(app)
    
    # Configura√ß√µes espec√≠ficas do Render
    if os.environ.get('FLASK_ENV') == 'production':
        from memory_optimizer import setup_render_optimizations
        setup_render_optimizations()

# Configura√ß√µes de encoding UTF-8
app.config['JSON_AS_ASCII'] = False
app.jinja_env.globals['ord'] = ord  # Fun√ß√£o para debug de encoding
import sys
if hasattr(sys, 'setdefaultencoding'):
    sys.setdefaultencoding('utf-8')

# For√ßar encoding UTF-8 para templates Jinja2
app.jinja_env.charset = 'utf-8'

# Filtro customizado para remover formata√ß√£o de CPF/CNPJ
@app.template_filter('only_numbers')
def only_numbers_filter(value):
    """Remove toda formata√ß√£o, deixando apenas n√∫meros"""
    if not value:
        return ''
    import re
    return re.sub(r'\D', '', str(value))

# Filtro customizado para formata√ß√£o de datas
@app.template_filter('format_date')
def format_date_filter(value, format='%d/%m/%Y'):
    """Formata data ISO para formato brasileiro"""
    if not value:
        return '-'
    try:
        # Se j√° for string no formato ISO
        if isinstance(value, str):
            # Remove microsegundos se existirem
            if '.' in value:
                value = value.split('.')[0]
            # Tenta parsing ISO
            if 'T' in value:
                dt = datetime.fromisoformat(value.replace('T', ' '))
            else:
                dt = datetime.strptime(value, '%Y-%m-%d')
        elif isinstance(value, datetime):
            dt = value
        else:
            return str(value)
        
        return dt.strftime(format)
    except (ValueError, AttributeError):
        return str(value)

# Filtro customizado para formata√ß√£o de data e hora
@app.template_filter('format_datetime')
def format_datetime_filter(value):
    """Formata data e hora ISO para formato brasileiro"""
    return format_date_filter(value, '%d/%m/%Y %H:%M')

# Configura√ß√µes para upload de arquivos - ULTRA-OTIMIZADO PARA RENDER 512MB
# Reduzido DRASTICAMENTE para economizar RAM no Render
MAX_UPLOAD_SIZE = 1 * 1024 * 1024 if os.environ.get('FLASK_ENV') == 'production' else 4 * 1024 * 1024
app.config['MAX_CONTENT_LENGTH'] = MAX_UPLOAD_SIZE  # 1MB produ√ß√£o, 4MB desenvolvimento
app.config['UPLOAD_FOLDER'] = 'uploads'
ALLOWED_EXTENSIONS = {'xlsx', 'xls'}

print(f"üìÅ Upload configurado: {MAX_UPLOAD_SIZE / 1024 / 1024:.0f}MB m√°ximo")

# Configura√ß√µes ULTRA-AGRESSIVAS para produ√ß√£o com baix√≠ssimo consumo de mem√≥ria
if os.environ.get('FLASK_ENV') == 'production':
    # Garbage collection EXTREMAMENTE agressivo
    gc.set_threshold(100, 2, 2)  # Muito mais agressivo que padr√£o
    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 60  # Cache de apenas 1 minuto
    
    # Configura√ß√µes JSON ULTRA-otimizadas
    app.config['JSON_SORT_KEYS'] = False
    app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False
    app.config['JSONIFY_MIMETYPE'] = 'application/json'
    
    # Limitar DRASTICAMENTE threads e workers
    os.environ.setdefault('WEB_CONCURRENCY', '1')  # 1 worker APENAS
    os.environ.setdefault('WORKER_CONNECTIONS', '25')  # Reduzido drasticamente
    os.environ.setdefault('WORKER_TIMEOUT', '20')  # Timeout muito baixo
    os.environ.setdefault('MAX_REQUESTS', '50')  # Reiniciar worker muito frequentemente
    
    # Configura√ß√µes de sess√£o otimizadas
    app.config['PERMANENT_SESSION_LIFETIME'] = 900  # 15 minutos apenas
    app.config['SESSION_COOKIE_SECURE'] = True
    app.config['SESSION_COOKIE_HTTPONLY'] = True
    
    # Desabilitar funcionalidades que consomem mem√≥ria
    app.config['PRESERVE_CONTEXT_ON_EXCEPTION'] = False
    app.config['EXPLAIN_TEMPLATE_LOADING'] = False
    
    print("üß† Configura√ß√µes ULTRA-AGRESSIVAS de produ√ß√£o aplicadas para economia m√°xima de mem√≥ria")

# Criar pasta de uploads se n√£o existir
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Hook ULTRA-AGRESSIVO para limpeza de mem√≥ria ap√≥s cada requisi√ß√£o
@app.after_request
def cleanup_memory_after_request(response):
    """Limpa mem√≥ria AGRESSIVAMENTE ap√≥s cada requisi√ß√£o"""
    if MEMORY_OPTIMIZER_AVAILABLE and os.environ.get('FLASK_ENV') == 'production':
        # M√∫ltiplas passadas de garbage collection
        MemoryOptimizer.cleanup_after_request()
        
        # Limpeza adicional para ambientes cr√≠ticos de mem√≥ria
        try:
            # For√ßar limpeza de cache Python interno
            if hasattr(sys, '_clear_type_cache'):
                sys._clear_type_cache()
            
            # Coleta de lixo adicional
            gc.collect()
        except:
            pass
    
    return response

# Carregar vari√°veis de ambiente (.env local / Render)
from dotenv import load_dotenv
load_dotenv()  # Carrega .env apenas localmente (Render usa vari√°veis nativas)

# Carregar configura√ß√µes (compat√≠vel com produ√ß√£o)
USE_GOOGLE_SHEETS = True
USE_OAUTH2 = False  # OAuth2 para autentica√ß√£o manual  
USE_SERVICE_ACCOUNT = True  # Service Account para aplica√ß√µes server-side (RECOMENDADO)
GOOGLE_SHEETS_API_KEY = os.environ.get('GOOGLE_SHEETS_API_KEY')
GOOGLE_SHEETS_ID = os.environ.get('GOOGLE_SHEETS_ID')
GOOGLE_SHEETS_RANGE = 'Clientes!A:CZ'

print(f"üîß Configura√ß√µes:")
print(f"   USE_GOOGLE_SHEETS: {USE_GOOGLE_SHEETS}")
print(f"   USE_OAUTH2: {USE_OAUTH2}")
print(f"   USE_SERVICE_ACCOUNT: {USE_SERVICE_ACCOUNT}")
print(f"   API_KEY: {GOOGLE_SHEETS_API_KEY[:10]}...")
print(f"   SPREADSHEET_ID: {GOOGLE_SHEETS_ID}")

# Inicializar servi√ßos COM LAZY LOADING - OTIMIZA√á√ÉO MEM√ìRIA RENDER
storage_service = None
meeting_service = None
user_service = None
report_service = None
import_service = None

def get_storage_service():
    """Lazy loading do storage service com fallback robusto para Render"""
    global storage_service
    if storage_service is None:
        try:
            if USE_GOOGLE_SHEETS and GOOGLE_SHEETS_ID:
                if USE_SERVICE_ACCOUNT:
                    print("üîê Inicializando Google Sheets Service Account...")
                    from services.google_sheets_service_account import GoogleSheetsServiceAccountService
                    storage_service = GoogleSheetsServiceAccountService(GOOGLE_SHEETS_ID, GOOGLE_SHEETS_RANGE)
                    print("‚úÖ Storage service inicializado (Service Account)")
                elif USE_OAUTH2:
                    print("üîê Inicializando Google Sheets OAuth2...")
                    from services.google_sheets_oauth_service import GoogleSheetsOAuthService
                    storage_service = GoogleSheetsOAuthService(GOOGLE_SHEETS_ID, GOOGLE_SHEETS_RANGE)
                    print("‚úÖ Storage service inicializado (OAuth2)")
                else:
                    print("üìä Inicializando Google Sheets h√≠brido...")
                    storage_service = GoogleSheetsService(GOOGLE_SHEETS_API_KEY, GOOGLE_SHEETS_ID, GOOGLE_SHEETS_RANGE)
                    print("‚úÖ Storage service inicializado (H√≠brido)")
            else:
                print("‚ö†Ô∏è Usando armazenamento local")
                storage_service = LocalStorageService()
                
        except Exception as e:
            print(f"‚ùå Erro ao inicializar storage service: {e}")
            print(f"üîç Tipo do erro: {type(e).__name__}")
            
            # Verificar se √© erro de autentica√ß√£o espec√≠fico do Render
            error_str = str(e).lower()
            is_auth_error = any(keyword in error_str for keyword in [
                'authentication', 'credential', 'unauthorized', 'forbidden',
                'service account', 'google', 'api', 'quota', 'permission'
            ])
            
            if is_auth_error and os.environ.get('FLASK_ENV') == 'production':
                print("üö® Erro de autentica√ß√£o detectado no Render - ativando fallback")
                try:
                    from services.render_fallback_service import RenderFallbackService
                    storage_service = RenderFallbackService()
                    print("‚úÖ Render Fallback Service ativado")
                    
                    # Adicionar mensagem global para mostrar na interface
                    if not hasattr(get_storage_service, '_fallback_message_shown'):
                        flash('‚ö†Ô∏è Sistema temporariamente usando dados locais. Verifique configura√ß√µes do Google Sheets.', 'warning')
                        get_storage_service._fallback_message_shown = True
                        
                except Exception as fallback_error:
                    print(f"‚ùå Erro ao ativar fallback: {fallback_error}")
                    storage_service = LocalStorageService()
                    print("‚ö†Ô∏è Fallback final para armazenamento local")
            else:
                storage_service = LocalStorageService()
                print("‚ö†Ô∏è Fallback para armazenamento local")
        
        # Limpeza de mem√≥ria ap√≥s inicializa√ß√£o
        if MEMORY_OPTIMIZER_AVAILABLE:
            gc.collect()
            print(f"üíæ Mem√≥ria ap√≥s init storage: {MemoryOptimizer.get_memory_usage()}")
    
    return storage_service

def get_meeting_service():
    """Lazy loading do meeting service"""
    global meeting_service
    if meeting_service is None and GOOGLE_SHEETS_ID:
        try:
            meeting_service = MeetingService(GOOGLE_SHEETS_ID)
            print("‚úÖ Meeting service inicializado")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar meeting service: {e}")
            meeting_service = None
    return meeting_service

def get_user_service():
    """Lazy loading do user service com fallback"""
    global user_service
    if user_service is None:
        if GOOGLE_SHEETS_ID:
            try:
                print(f"üîÑ Tentando inicializar UserService com SHEETS_ID: {GOOGLE_SHEETS_ID}")
                user_service = UserService(GOOGLE_SHEETS_ID)
                print("‚úÖ User service inicializado com sucesso")
            except Exception as e:
                print(f"‚ùå Erro ao inicializar user service: {e}")
                print(f"üîç Tipo do erro: {type(e).__name__}")
                print("üîÑ Tentando fallback de usu√°rios...")
                
                # Usar servi√ßo de fallback
                try:
                    from services.fallback_user_service import FallbackUserService
                    user_service = FallbackUserService()
                    print("‚úÖ Fallback user service inicializado")
                except Exception as fallback_error:
                    print(f"‚ùå Erro no fallback user service: {fallback_error}")
                    user_service = None
        else:
            print("‚ùå GOOGLE_SHEETS_ID n√£o dispon√≠vel para UserService")
            print("üîÑ Inicializando fallback user service...")
            
            # Usar servi√ßo de fallback quando n√£o h√° SHEETS_ID
            try:
                from services.fallback_user_service import FallbackUserService
                user_service = FallbackUserService()
                print("‚úÖ Fallback user service inicializado (sem SHEETS_ID)")
            except Exception as fallback_error:
                print(f"‚ùå Erro no fallback user service: {fallback_error}")
                user_service = None
    else:
        print("‚ôªÔ∏è User service j√° inicializado")
    return user_service

def get_report_service():
    """Lazy loading do report service"""
    global report_service
    print(f"üîç Debug get_report_service: report_service atual = {report_service}")
    print(f"üîç Debug get_report_service: GOOGLE_SHEETS_ID = {GOOGLE_SHEETS_ID}")
    
    if report_service is None and GOOGLE_SHEETS_ID:
        try:
            print("üîÑ Inicializando ReportService...")
            report_service = ReportService(GOOGLE_SHEETS_ID)
            print("‚úÖ Report service inicializado com sucesso")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar report service: {e}")
            import traceback
            traceback.print_exc()
            report_service = None
    elif report_service is None:
        print("‚ùå GOOGLE_SHEETS_ID n√£o dispon√≠vel para ReportService")
    else:
        print("‚ôªÔ∏è Report service j√° inicializado")
    
    print(f"üîç Debug get_report_service: retornando = {report_service}")
    return report_service

def get_import_service():
    """Lazy loading do import service"""
    global import_service
    if import_service is None and ImportService:
        try:
            storage = get_storage_service()
            if storage:
                import_service = ImportService(storage)
                print(f"‚úÖ Import service inicializado ({IMPORT_SERVICE_TYPE})")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar import service: {e}")
            import_service = None
    return import_service

# Inicializa√ß√£o b√°sica - s√≥ o essencial
print("üöÄ Aplica√ß√£o inicializada com lazy loading")
print(f"üíæ Mem√≥ria inicial: {MemoryOptimizer.get_memory_usage() if MEMORY_OPTIMIZER_AVAILABLE else 'N/A'}")

# Garbage collection inicial
if os.environ.get('FLASK_ENV') == 'production':
    gc.collect()
    print("üß† Limpeza inicial de mem√≥ria conclu√≠da")

# Decorator para verificar autentica√ß√£o
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        print(f"üîê LOGIN_REQUIRED: Verificando sess√£o para fun√ß√£o {f.__name__}")
        print(f"üîê Dados da sess√£o: {dict(session)}")
        if 'user_id' not in session:
            print("‚ùå user_id n√£o encontrado na sess√£o - Redirecionando para login")
            flash('Voc√™ precisa fazer login para acessar esta p√°gina.', 'warning')
            return redirect(url_for('login'))
        print(f"‚úÖ user_id encontrado: {session['user_id']} - Executando fun√ß√£o {f.__name__}")
        return f(*args, **kwargs)
    return decorated_function

# Fun√ß√£o para verificar se √© administrador
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Voc√™ precisa fazer login para acessar esta p√°gina.', 'warning')
            return redirect(url_for('login'))
        
        # Usar get_user_service() em vez de user_service diretamente
        current_user_service = get_user_service()
        if current_user_service:
            user = current_user_service.get_user_by_id(session['user_id'])
            if not user or user.get('perfil', '').lower() != 'administrador':
                flash('Acesso negado. Apenas administradores podem acessar esta p√°gina.', 'danger')
                return redirect(url_for('index'))
        else:
            # Se n√£o h√° user_service, verificar se √© o admin de fallback
            if session.get('user_id') != 'admin-fallback':
                flash('Acesso negado. Sistema em modo de manuten√ß√£o.', 'danger')
                return redirect(url_for('index'))
        
        return f(*args, **kwargs)
    return decorated_function

@app.route('/login', methods=['GET', 'POST'])
def login():
    print(f"üîê LOGIN: M√©todo da requisi√ß√£o: {request.method}")
    
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        print(f"üîê LOGIN: Tentativa de login para usu√°rio: {username}")
        
        # Debug das vari√°veis de ambiente cr√≠ticas
        print(f"üîç DEBUG: GOOGLE_SHEETS_ID = {GOOGLE_SHEETS_ID}")
        print(f"üîç DEBUG: USE_GOOGLE_SHEETS = {USE_GOOGLE_SHEETS}")
        print(f"üîç DEBUG: USE_SERVICE_ACCOUNT = {USE_SERVICE_ACCOUNT}")
        
        # Tentar inicializar o user_service
        current_user_service = get_user_service()
        print(f"üîê LOGIN: user_service dispon√≠vel: {current_user_service is not None}")
        
        if current_user_service:
            print("üîê LOGIN: Chamando authenticate_user...")
            user = current_user_service.authenticate_user(username, password)
            print(f"üîê LOGIN: Resultado da autentica√ß√£o: {user}")
            
            if user:
                session['user_id'] = user['id']
                session['user_name'] = user['nome']
                session['user_perfil'] = user['perfil']
                print(f"üîê LOGIN: Sess√£o criada - user_id: {session['user_id']}")
                flash(f'Bem-vindo(a), {user["nome"]}!', 'success')
                print("üîê LOGIN: Redirecionando para index...")
                return redirect(url_for('index'))
            else:
                print("‚ùå LOGIN: Falha na autentica√ß√£o")
                flash('Usu√°rio ou senha incorretos.', 'error')
        else:
            print("‚ùå LOGIN: user_service n√£o dispon√≠vel")
            flash('Servi√ßo de autentica√ß√£o indispon√≠vel. Tente novamente.', 'error')
    else:
        print("üîê LOGIN: Exibindo formul√°rio de login (GET)")
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    flash('Logout realizado com sucesso.', 'info')
    return redirect(url_for('login'))

@app.route('/users')
@admin_required
def users():
    current_user_service = get_user_service()
    if current_user_service:
        users_list = current_user_service.list_users()
        return render_template('users.html', users=users_list)
    else:
        flash('Servi√ßo de usu√°rios indispon√≠vel.', 'error')
        return redirect(url_for('index'))

@app.route('/create_user', methods=['POST'])
@admin_required
def create_user():
    current_user_service = get_user_service()
    if current_user_service:
        nome = request.form['nome']
        email = request.form['email']
        usuario = request.form['usuario']
        senha = request.form['senha']
        perfil = request.form['perfil']
        
        result = current_user_service.create_user(nome, email, usuario, senha, perfil)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de usu√°rios indispon√≠vel.', 'error')
    
    return redirect(url_for('users'))

@app.route('/edit_user', methods=['POST'])
@admin_required
def edit_user():
    current_user_service = get_user_service()
    if current_user_service:
        user_id = request.form['user_id']
        nome = request.form['nome']
        email = request.form['email']
        usuario = request.form['usuario']
        perfil = request.form['perfil']
        ativo = request.form['ativo']
        nova_senha = request.form.get('nova_senha', '').strip()
        
        # Se nova senha foi fornecida, usa ela, sen√£o None
        senha_param = nova_senha if nova_senha else None
        
        result = current_user_service.update_user(user_id, nome, email, usuario, perfil, ativo, senha_param)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de usu√°rios indispon√≠vel.', 'error')
    
    return redirect(url_for('users'))

@app.route('/delete_user', methods=['POST'])
@admin_required
def delete_user():
    current_user_service = get_user_service()
    if current_user_service:
        user_id = request.form['user_id']
        
        result = current_user_service.delete_user(user_id)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de usu√°rios indispon√≠vel.', 'error')
    
    return redirect(url_for('users'))

@app.route('/import')
@admin_required
def import_page():
    """P√°gina para importar clientes de planilha Excel"""
    return render_template('import.html')

@app.route('/import/upload', methods=['POST'])
@admin_required
def upload_and_import():
    """Processa upload e importa arquivo Excel"""
    print("üì§ === INICIANDO UPLOAD E IMPORTA√á√ÉO ===")
    
    try:
        # Verificar se arquivo foi enviado
        if 'file' not in request.files:
            flash('Nenhum arquivo selecionado', 'error')
            return redirect(url_for('import_page'))
        
        file = request.files['file']
        
        # Verificar se arquivo tem nome
        if file.filename == '':
            flash('Nenhum arquivo selecionado', 'error')
            return redirect(url_for('import_page'))
        
        # Verificar extens√£o do arquivo
        if not allowed_file(file.filename):
            flash('Apenas arquivos .xlsx e .xls s√£o permitidos', 'error')
            return redirect(url_for('import_page'))
        
        # Salvar arquivo temporariamente
        filename = secure_filename(file.filename)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{timestamp}_{filename}"
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        print(f"üíæ Salvando arquivo: {file_path}")
        file.save(file_path)
        
        # Validar estrutura do arquivo
        if import_service and import_service.is_available():
            print("üîç Validando estrutura do arquivo...")
            is_valid, validation_message = import_service.validate_excel_structure(file_path)
            
            if not is_valid:
                # Remover arquivo
                if os.path.exists(file_path):
                    os.remove(file_path)
                flash(f'Estrutura do arquivo inv√°lida: {validation_message}', 'error')
                return redirect(url_for('import_page'))
            
            print("‚úÖ Estrutura v√°lida, iniciando importa√ß√£o...")
            
            # Executar importa√ß√£o
            sucessos, erros, lista_erros = import_service.import_from_excel(file_path)
            
            # Remover arquivo tempor√°rio
            if os.path.exists(file_path):
                os.remove(file_path)
            
            # Mostrar resultados
            if sucessos > 0:
                flash(f'‚úÖ Importa√ß√£o conclu√≠da: {sucessos} clientes importados com sucesso!', 'success')
            
            if erros > 0:
                flash(f'‚ö†Ô∏è {erros} erro(s) encontrado(s)', 'warning')
                # Limitar erros mostrados para n√£o sobrecarregar
                erros_mostrados = lista_erros[:5]
                for erro in erros_mostrados:
                    flash(f'‚ùå {erro}', 'error')
                
                if len(lista_erros) > 5:
                    flash(f'... e mais {len(lista_erros) - 5} erro(s)', 'error')
            
            if sucessos == 0 and erros == 0:
                flash('Nenhum cliente foi processado', 'warning')
        
        else:
            # Remover arquivo
            if os.path.exists(file_path):
                os.remove(file_path)
            flash('Servi√ßo de importa√ß√£o n√£o dispon√≠vel. Pandas n√£o est√° instalado.', 'error')
    
    except Exception as e:
        print(f"‚ùå Erro durante importa√ß√£o: {e}")
        flash(f'Erro durante importa√ß√£o: {str(e)}', 'error')
        
        # Limpar arquivo se houver erro
        try:
            if 'file_path' in locals() and os.path.exists(file_path):
                os.remove(file_path)
        except:
            pass
    
    return redirect(url_for('index'))

@app.route('/import/template')
@admin_required  
def download_template():
    """Baixa template Excel para importa√ß√£o"""
    try:
        # Verificar se openpyxl est√° dispon√≠vel
        try:
            from openpyxl import Workbook
            import io
        except ImportError as e:
            print(f"‚ùå OpenPyXL n√£o encontrado: {e}")
            # Fallback: criar template CSV
            return create_simple_template()
        
        print("‚úÖ OpenPyXL importado com sucesso")
        
        # Criar workbook
        wb = Workbook()
        ws = wb.active
        ws.title = "Clientes"
        
        # Cabe√ßalhos SIGEC - 8 Blocos Organizados
        headers = [
            # Bloco 1: Informa√ß√µes da Pessoa Jur√≠dica (13 campos obrigat√≥rios)
            'NOME DA EMPRESA', 'RAZ√ÉO SOCIAL NA RECEITA', 'NOME FANTASIA NA RECEITA', 
            'CNPJ', 'PERFIL', 'INSCRI√á√ÉO ESTADUAL', 'INSCRI√á√ÉO MUNICIPAL', 
            'ESTADO', 'CIDADE', 'REGIME FEDERAL', 'REGIME ESTADUAL', 'SEGMENTO', 'ATIVIDADE',
            
            # Bloco 2: Servi√ßos Prestados pela Control (12 campos)
            'SERVI√áO CT', 'SERVI√áO FS', 'SERVI√áO DP', 'SERVI√áO BPO FINANCEIRO', 
            'RESPONS√ÅVEL PELOS SERVI√áOS', 'DATA IN√çCIO DOS SERVI√áOS',
            'C√ìDIGO FORTES CT', 'C√ìDIGO FORTES FS', 'C√ìDIGO FORTES PS', 
            'C√ìDIGO DOM√çNIO', 'SISTEMA UTILIZADO', 'M√ìDULO SPED TRIER',
            
            # Bloco 3: Quadro Societ√°rio (6 campos)
            'S√ìCIO 1 NOME', 'S√ìCIO 1 CPF', 'S√ìCIO 1 DATA NASCIMENTO', 
            'S√ìCIO 1 ADMINISTRADOR', 'S√ìCIO 1 COTAS', 'S√ìCIO 1 RESPONS√ÅVEL LEGAL',
            
            # Bloco 4: Contatos (10 campos)
            'TELEFONE FIXO', 'TELEFONE CELULAR', 'WHATSAPP', 
            'EMAIL PRINCIPAL', 'EMAIL SECUND√ÅRIO', 'RESPONS√ÅVEL IMEDIATO',
            'EMAILS DOS S√ìCIOS', 'CONTATO CONTADOR', 'TELEFONE CONTADOR', 'EMAIL CONTADOR',
            
            # Bloco 5: Sistemas e Acessos (7 campos)
            'SISTEMA PRINCIPAL', 'VERS√ÉO DO SISTEMA', 'C√ìDIGO ACESSO SIMPLES NACIONAL',
            'CPF/CNPJ PARA ACESSO', 'PORTAL CLIENTE ATIVO', 'INTEGRA√á√ÉO DOM√çNIO', 'SISTEMA ONVIO',
            
            # Bloco 6: Senhas e Credenciais (20 campos)
            'ACESSO ISS', 'SENHA ISS', 'ACESSO SEFIN', 'SENHA SEFIN', 
            'ACESSO SEUMA', 'SENHA SEUMA', 'ACESSO EMPWEB', 'SENHA EMPWEB',
            'ACESSO FAP/INSS', 'SENHA FAP/INSS', 'ACESSO CRF', 'SENHA CRF',
            'EMAIL GESTOR', 'SENHA EMAIL GESTOR', 'ANVISA GESTOR', 'ANVISA EMPRESA',
            'ACESSO IBAMA', 'SENHA IBAMA', 'ACESSO SEMACE', 'SENHA SEMACE',
            
            # Bloco 7: Procura√ß√µes (12 campos)
            'PROCURA√á√ÉO RFB', 'DATA PROCURA√á√ÉO RFB', 'PROCURA√á√ÉO RECEITA ESTADUAL', 'DATA PROCURA√á√ÉO RC',
            'PROCURA√á√ÉO CAIXA ECON√îMICA', 'DATA PROCURA√á√ÉO CX', 'PROCURA√á√ÉO PREVID√äNCIA SOCIAL', 'DATA PROCURA√á√ÉO SW',
            'PROCURA√á√ÉO MUNICIPAL', 'DATA PROCURA√á√ÉO MUNICIPAL', 'OUTRAS PROCURA√á√ïES', 'OBSERVA√á√ïES PROCURA√á√ïES',
            
            # Bloco 8: Observa√ß√µes e Dados Adicionais (12 campos)
            'OBSERVA√á√ïES GERAIS', 'TAREFAS VINCULADAS', 'STATUS DO CLIENTE',
            '√öLTIMA ATUALIZA√á√ÉO', 'RESPONS√ÅVEL ATUALIZA√á√ÉO', 'PRIORIDADE',
            'TAGS/CATEGORIAS', 'HIST√ìRICO DE ALTERA√á√ïES'
        ]
        
        # Dados de exemplo SIGEC
        example_data = [
            # Bloco 1: Informa√ß√µes da Pessoa Jur√≠dica
            'EMPRESA EXEMPLO LTDA', 'EMPRESA EXEMPLO LTDA', 'Exemplo Empresa', 
            '12.345.678/0001-99', 'LUCRO PRESUMIDO', '123456789', '987654321', 
            'CE', 'FORTALEZA', 'LUCRO PRESUMIDO', 'NORMAL', 'COM√âRCIO', 'VENDA DE PRODUTOS',
            
            # Bloco 2: Servi√ßos Prestados pela Control
            'SIM', 'SIM', 'N√ÉO', 'SIM', 
            'Jo√£o da Silva', '2024-01-01',
            '12345', '67890', '', 
            'DOM123', 'FORTES', 'COMPLETO',
            
            # Bloco 3: Quadro Societ√°rio
            'JO√ÉO DA SILVA', '123.456.789-00', '1980-01-01', 
            'SIM', '100%', 'SIM',
            
            # Bloco 4: Contatos
            '(85) 3333-4444', '(85) 99999-8888', '(85) 99999-8888', 
            'teste@empresa.com', 'contato@empresa.com', 'Maria Santos',
            'joao@empresa.com', 'Contador ABC', '(85) 3333-5555', 'contador@abc.com',
            
            # Bloco 5: Sistemas e Acessos
            'FORTES', '2024.1', 'SN123456',
            '12345678000190', 'SIM', 'SIM', 'N√ÉO',
            
            # Bloco 6: Senhas e Credenciais
            'usuario123', 'senha123', 'sefin123', 'senha456', 
            'seuma123', 'senha789', 'empweb123', 'senha999',
            'fap123', 'senha000', 'crf123', 'senha111',
            'gestor@empresa.com', 'senha222', 'anvisa123', 'empresa123',
            'ibama123', 'senha333', 'semace123', 'senha444',
            
            # Bloco 7: Procura√ß√µes
            'SIM', '2024-01-15', 'SIM', '2024-01-20',
            'N√ÉO', '', 'SIM', '2024-02-01',
            'SIM', '2024-02-05', 'Procura√ß√£o JUCEC', 'Todas v√°lidas',
            
            # Bloco 8: Observa√ß√µes e Dados Adicionais
            'Cliente em dia com obriga√ß√µes', '5', 'ATIVO',
            '2024-01-01', 'Sistema', 'ALTA',
            'VIP,PREMIUM', 'Cliente cadastrado via sistema'
        ]
        
        # Escrever cabe√ßalhos
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # Escrever exemplo
        for col, value in enumerate(example_data, 1):
            ws.cell(row=2, column=col, value=value)
        
        # Salvar em buffer
        buffer = io.BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        template_filename = f'template_importacao_clientes_{timestamp}.xlsx'
        
        from flask import send_file
        
        return send_file(
            buffer,
            as_attachment=True, 
            download_name=template_filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar template: {e}")
        flash(f'Erro ao gerar template: {str(e)}', 'error')
        return redirect(url_for('import_page'))

def create_simple_template():
    """Cria template simples sem pandas como fallback"""
    try:
        import csv
        import io
        from flask import Response
        
        # Dados do template em formato CSV
        csv_data = [
            ['NOME DA EMPRESA', 'CT', 'FS', 'DP', 'COD. FORTES CT', 'COD. FORTES FS', 'COD. FORTES PS', 'COD. DOM√çNIO', 'SISTEMA UTILIZADO', 'M√ìDULO SPED TRIER', 'RAZ√ÉO SOCIAL NA RECEITA', 'NOME FANTASIA NA RECEITA', 'CNPJ', 'INSC. EST.', 'INSC. MUN.', 'SEGMENTO', 'ATIVIDADE', 'TRIBUTA√á√ÉO', 'PERFIL', 'CIDADE', 'DONO / RESP.', 'COD. ACESSO SIMPLES', 'CPF OU CNPJ', 'ACESSO ISS', 'ACESSO SEFIN', 'ACESSO SEUMA', 'ACESSO EMP. WEB', 'SENHA EMP. WEB', 'ACESSO FAP/INSS', 'ACESSO CRF', 'EMAIL GESTOR', 'ANVISA GESTOR', 'ANVISA EMPRESA', 'ACESSO IBAMA', 'ACESSO SEMACE', 'SENHA SEMACE', 'PROC. RC', 'PROC. CX', 'PROC. SW', 'M√äS/ANO DE  IN√çCIO', 'RESPONS√ÅVEL IMEDIATO', 'TELEFONE FIXO', 'TELEFONE CELULAR', 'E-MAILS', 'S√ìCIO', 'S√ìCIO.1', 'S√ìCIO.2', 'S√ìCIO.3'],
            ['Exemplo Empresa Ltda', 'SIM', 'NAO', 'NAO', '123', '456', '789', '999', 'Sistema XYZ', 'M√≥dulo ABC', 'EXEMPLO EMPRESA LTDA', 'Exemplo Empresa', '12.345.678/0001-99', '123456789', '987654321', 'COM√âRCIO', 'VAREJO', 'SIMPLES', 'A', 'FORTALEZA', 'Jo√£o Silva', 'ABC123', '123.456.789-00', 'usuario123', 'senha123', 'acesso123', 'web123', 'senha456', 'fap123', 'crf123', 'gestor@empresa.com', 'anvisa123', 'empresa123', 'ibama123', 'semace123', 'senha789', 'OK', 'OK', 'OK', '01/2024', 'Jo√£o Silva', '(85) 3333-4444', '(85) 99999-8888', 'contato@empresa.com', 'Jo√£o Silva', 'Maria Silva', '', '']
        ]
        
        # Criar CSV em mem√≥ria
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerows(csv_data)
        
        # Converter para bytes
        csv_bytes = output.getvalue().encode('utf-8-sig')  # BOM para Excel
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'template_importacao_clientes_{timestamp}.csv'
        
        return Response(
            csv_bytes,
            mimetype='text/csv',
            headers={'Content-Disposition': f'attachment; filename={filename}'}
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao criar template CSV: {e}")
        flash('Erro ao gerar template. Crie manualmente um arquivo Excel com as colunas necess√°rias.', 'error')
        return redirect(url_for('import_page'))

# ==================== ROTAS DE RELAT√ìRIOS ====================

@app.route('/test-embed-auth')
def test_embed_auth():
    """P√°gina de teste para embedding com autentica√ß√£o"""
    with open('test_embed_auth.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/test-direct-embed')
def test_direct_embed():
    """P√°gina de teste direto para iframe"""
    with open('test_direct_embed.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/debug-sistema-real')
def debug_sistema_real():
    """P√°gina de debug que simula o sistema real"""
    with open('debug_sistema_real.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/reports')
@login_required
def reports():
    """P√°gina de visualiza√ß√£o de relat√≥rios para usu√°rios"""
    # Inicializar o servi√ßo de relat√≥rios se necess√°rio
    report_svc = get_report_service()
    
    if report_svc:
        try:
            # Busca apenas relat√≥rios ativos
            reports_data = report_svc.list_reports(only_active=True)
            username = session.get('user_name', '')
            
            print(f"üîç Debug: {len(reports_data)} relat√≥rios encontrados (apenas ativos)")
            
            # Filtrar relat√≥rios que o usu√°rio tem acesso
            accessible_reports = []
            for report in reports_data:
                print(f"üîç Debug: Relat√≥rio '{report.get('nome')}' - Ativo: '{report.get('ativo')}'")
                if report_svc.user_has_access(report, username):
                    accessible_reports.append(report)
            
            print(f"üîç Debug: {len(accessible_reports)} relat√≥rios acess√≠veis para '{username}'")
            return render_template('reports.html', reports=accessible_reports)
        except Exception as e:
            print(f"‚ùå Erro ao carregar relat√≥rios: {e}")
            flash('Erro ao carregar relat√≥rios. Tente novamente.', 'error')
            return render_template('reports.html', reports=[])
    else:
        flash('Servi√ßo de relat√≥rios indispon√≠vel.', 'error')
        return render_template('reports.html', reports=[])

@app.route('/manage_reports')
@admin_required
def manage_reports():
    """P√°gina de gerenciamento de relat√≥rios (somente admin)"""
    # Inicializar o servi√ßo de relat√≥rios se necess√°rio
    report_svc = get_report_service()
    
    if report_svc:
        try:
            reports_data = report_svc.list_reports()
            return render_template('manage_reports.html', reports=reports_data)
        except Exception as e:
            print(f"‚ùå Erro ao carregar relat√≥rios para gerenciamento: {e}")
            flash('Erro ao carregar relat√≥rios. Tente novamente.', 'error')
            return render_template('manage_reports.html', reports=[])
    else:
        flash('Servi√ßo de relat√≥rios indispon√≠vel.', 'error')
        return render_template('manage_reports.html', reports=[])

@app.route('/create_report', methods=['POST'])
@admin_required
def create_report():
    """Criar novo relat√≥rio"""
    # Inicializar o servi√ßo de relat√≥rios se necess√°rio
    report_svc = get_report_service()
    
    if report_svc:
        nome = request.form['nome']
        descricao = request.form['descricao']
        link = request.form['link']
        
        # Corrige convers√£o do checkbox 'ativo'
        # Se m√∫ltiplos valores com mesmo nome, getlist retorna uma lista
        ativo_values = request.form.getlist('ativo')
        print(f"üîç Debug checkbox ativo: request.form.getlist('ativo') = {ativo_values}")
        
        # Se 'on' estiver na lista, checkbox foi marcado
        ativo = 'Sim' if 'on' in ativo_values else 'N√£o'
        print(f"üîç Debug convers√£o final: {ativo_values} -> '{ativo}'")
        print(f"üîç Debug form completo: {dict(request.form)}")
        
        ordem = int(request.form.get('ordem', 0))
        usuarios_autorizados = request.form.get('usuarios_autorizados', 'todos')
        
        # Obter usu√°rio da sess√£o
        criado_por = session.get('user_name', 'Desconhecido')
        
        result = report_svc.create_report(nome, descricao, link, ativo, ordem, criado_por, usuarios_autorizados)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de relat√≥rios indispon√≠vel.', 'error')
    
    return redirect(url_for('manage_reports'))

@app.route('/edit_report', methods=['POST'])
@admin_required
def edit_report():
    """Editar relat√≥rio existente"""
    # Inicializar o servi√ßo de relat√≥rios se necess√°rio
    report_svc = get_report_service()
    
    if report_svc:
        report_id = request.form['report_id']
        nome = request.form['nome']
        descricao = request.form['descricao']
        link = request.form['link']
        
        # Corrige convers√£o do checkbox 'ativo' na edi√ß√£o
        # Se m√∫ltiplos valores com mesmo nome, getlist retorna uma lista
        ativo_values = request.form.getlist('ativo')
        print(f"üîç Debug checkbox ativo (edi√ß√£o): request.form.getlist('ativo') = {ativo_values}")
        
        # Se 'on' estiver na lista, checkbox foi marcado
        ativo = 'Sim' if 'on' in ativo_values else 'N√£o'
        print(f"üîç Debug convers√£o final (edi√ß√£o): {ativo_values} -> '{ativo}'")
        print(f"üîç Debug form completo (edi√ß√£o): {dict(request.form)}")
        
        ordem = int(request.form.get('ordem', 0))
        usuarios_autorizados = request.form.get('usuarios_autorizados', 'todos')
        
        result = report_svc.update_report(report_id, nome, descricao, link, ativo, ordem, usuarios_autorizados)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de relat√≥rios indispon√≠vel.', 'error')
    
    return redirect(url_for('manage_reports'))

@app.route('/delete_report', methods=['POST'])
@admin_required
def delete_report():
    """Deletar relat√≥rio"""
    # Inicializar o servi√ßo de relat√≥rios se necess√°rio
    report_svc = get_report_service()
    
    if report_svc:
        report_id = request.form['report_id']
        
        result = report_svc.delete_report(report_id)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de relat√≥rios indispon√≠vel.', 'error')
    
    return redirect(url_for('manage_reports'))

def calculate_dashboard_stats(clients):
    """Calcula estat√≠sticas para o dashboard baseado nos dados SIGEC"""
    stats = {
        'total_clientes': len(clients),
        'clientes_ativos': 0,
        'empresas': 0,
        'domesticas': 0,
        'mei': 0,
        'simples_nacional': 0,
        'lucro_presumido': 0,
        'lucro_real': 0,
        'ct': 0,
        'fs': 0,
        'dp': 0,
        'bpo': 0
    }
    
    for client in clients:
        # Contadores b√°sicos
        if client.get('ativo', True):
            stats['clientes_ativos'] += 1
        
        # Servi√ßos
        if client.get('ct', False):
            stats['ct'] += 1
        if client.get('fs', False):
            stats['fs'] += 1
        if client.get('dp', False):
            stats['dp'] += 1
        if client.get('bpoFinanceiro', False):
            stats['bpo'] += 1
        
        # Categoriza√ß√£o por regime federal (SIGEC)
        regime = str(client.get('regimeFederal', '')).upper().strip()
        perfil = str(client.get('perfil', '')).upper().strip()
        
        # MEI - Microempreendedor Individual
        if 'MEI' in regime or 'MICROEMPRESARIO' in perfil or 'INDIVIDUAL' in perfil:
            stats['mei'] += 1
        # Simples Nacional
        elif 'SIMPLES' in regime or 'SN' in regime:
            stats['simples_nacional'] += 1
        # Lucro Presumido
        elif 'PRESUMIDO' in regime or 'LP' in regime:
            stats['lucro_presumido'] += 1
        # Lucro Real
        elif 'REAL' in regime or 'LR' in regime:
            stats['lucro_real'] += 1
        # Dom√©sticas - identificar por perfil ou atividade
        elif 'DOMESTICA' in perfil or 'EMPREGADA' in perfil:
            stats['domesticas'] += 1
        else:
            # Demais casos consideramos como empresas
            stats['empresas'] += 1
    
    return stats

def calculate_dashboard_stats_optimized(clients):
    """Vers√£o otimizada para ambientes com pouca mem√≥ria"""
    if not clients:
        return {
            'total_clientes': 0, 'clientes_ativos': 0, 'empresas': 0, 
            'domesticas': 0, 'mei': 0, 'simples_nacional': 0,
            'lucro_presumido': 0, 'lucro_real': 0,
            'ct': 0, 'fs': 0, 'dp': 0, 'bpo': 0
        }
    
    # Inicializar contadores
    stats = {
        'total_clientes': len(clients),
        'clientes_ativos': 0,
        'empresas': 0,
        'domesticas': 0,
        'mei': 0,
        'simples_nacional': 0,
        'lucro_presumido': 0,
        'lucro_real': 0,
        'ct': 0,
        'fs': 0,
        'dp': 0,
        'bpo': 0
    }
    
    # Processar em lotes para economizar mem√≥ria
    batch_size = get_optimized_batch_size() if MEMORY_OPTIMIZER_AVAILABLE else 50
    
    for i in range(0, len(clients), batch_size):
        batch = clients[i:i+batch_size]
        
        for client in batch:
            # Contadores b√°sicos (apenas campos essenciais)
            if client.get('ativo', True):
                stats['clientes_ativos'] += 1
            
            # Servi√ßos b√°sicos
            if client.get('ct'):
                stats['ct'] += 1
            if client.get('fs'):
                stats['fs'] += 1
            if client.get('dp'):
                stats['dp'] += 1
            if client.get('bpoFinanceiro'):
                stats['bpo'] += 1
            
            # Categoriza√ß√£o simplificada (menos processamento de string)
            regime = client.get('regimeFederal', '')
            if regime:
                regime_upper = regime.upper()
                if 'MEI' in regime_upper:
                    stats['mei'] += 1
                elif 'SIMPLES' in regime_upper:
                    stats['simples_nacional'] += 1
                elif 'PRESUMIDO' in regime_upper:
                    stats['lucro_presumido'] += 1
                elif 'REAL' in regime_upper:
                    stats['lucro_real'] += 1
                else:
                    stats['empresas'] += 1
            else:
                stats['empresas'] += 1
        
        # Limpeza de mem√≥ria ap√≥s cada lote
        if os.environ.get('FLASK_ENV') == 'production':
            gc.collect()
    
    return stats

@app.route('/api/users')
@admin_required
def get_users():
    """API para obter lista de usu√°rios dispon√≠veis"""
    user_svc = get_user_service()
    if user_svc:
        users = user_svc.get_available_users()
        return jsonify({'users': users})
    else:
        return jsonify({'users': ['todos', 'admin', 'usuario']})

@app.route('/api/memory-status')
@admin_required  
def memory_status():
    """API para monitorar uso de mem√≥ria em produ√ß√£o"""
    try:
        # Coletar informa√ß√µes de mem√≥ria
        memory_info = {
            'timestamp': datetime.now().isoformat(),
            'environment': os.environ.get('FLASK_ENV', 'development'),
            'python_version': sys.version.split()[0],
        }
        
        # Tentar obter info detalhada de mem√≥ria
        try:
            import psutil
            process = psutil.Process()
            memory_info.update({
                'memory_mb': round(process.memory_info().rss / 1024 / 1024, 1),
                'memory_percent': round(process.memory_percent(), 1),
                'cpu_percent': round(process.cpu_percent(), 1),
                'threads': process.num_threads(),
            })
            
            # Alertas baseados nos limites do Render (512MB)
            memory_mb = memory_info['memory_mb']
            if memory_mb > 450:
                memory_info['alert'] = 'CRITICAL - Pr√≥ximo do limite de 512MB'
                memory_info['alert_level'] = 'danger'
            elif memory_mb > 350:
                memory_info['alert'] = 'WARNING - Uso de mem√≥ria elevado'
                memory_info['alert_level'] = 'warning'
            else:
                memory_info['alert'] = 'OK - Uso de mem√≥ria normal'
                memory_info['alert_level'] = 'success'
                
        except ImportError:
            memory_info['memory_mb'] = 'N/A (psutil n√£o dispon√≠vel)'
            memory_info['alert'] = 'Monitoramento limitado'
            memory_info['alert_level'] = 'info'
        
        # Informa√ß√µes sobre garbage collection
        memory_info['gc_counts'] = gc.get_count()
        memory_info['gc_threshold'] = gc.get_threshold()
        
        # Informa√ß√µes sobre lazy loading
        services_loaded = {
            'storage_service': storage_service is not None,
            'meeting_service': meeting_service is not None,
            'user_service': user_service is not None,
            'report_service': report_service is not None,
            'import_service': import_service is not None
        }
        memory_info['services_loaded'] = services_loaded
        memory_info['services_count'] = sum(services_loaded.values())
        
        # Configura√ß√µes de otimiza√ß√£o ativas
        optimizations = {
            'memory_optimizer_available': MEMORY_OPTIMIZER_AVAILABLE,
            'max_content_length': app.config.get('MAX_CONTENT_LENGTH', 0) / 1024 / 1024,  # MB
            'json_sort_keys': app.config.get('JSON_SORT_KEYS', True),
            'web_concurrency': os.environ.get('WEB_CONCURRENCY', 'auto'),
            'worker_connections': os.environ.get('WORKER_CONNECTIONS', 'auto'),
        }
        memory_info['optimizations'] = optimizations
        
        return jsonify(memory_info)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat(),
            'alert': 'ERROR - Falha ao obter status de mem√≥ria',
            'alert_level': 'danger'
        }), 500

@app.route('/api/auth-status')
@admin_required
def auth_status():
    """API para diagn√≥stico de autentica√ß√£o Google Sheets"""
    try:
        diagnosis = {
            'timestamp': datetime.now().isoformat(),
            'environment': os.environ.get('FLASK_ENV', 'development'),
            'google_sheets_config': {
                'use_google_sheets': USE_GOOGLE_SHEETS,
                'use_service_account': USE_SERVICE_ACCOUNT,
                'use_oauth2': USE_OAUTH2,
                'sheets_id_configured': bool(GOOGLE_SHEETS_ID),
                'api_key_configured': bool(GOOGLE_SHEETS_API_KEY),
            }
        }
        
        # Verificar vari√°vel de ambiente do Service Account
        service_account_json = os.environ.get('GOOGLE_SERVICE_ACCOUNT_JSON')
        diagnosis['service_account'] = {
            'env_var_present': bool(service_account_json),
            'env_var_length': len(service_account_json) if service_account_json else 0,
            'is_valid_json': False,
            'project_id': None,
            'client_email': None
        }
        
        if service_account_json:
            try:
                credentials_info = json.loads(service_account_json)
                diagnosis['service_account'].update({
                    'is_valid_json': True,
                    'project_id': credentials_info.get('project_id'),
                    'client_email': credentials_info.get('client_email'),
                    'has_private_key': bool(credentials_info.get('private_key'))
                })
            except json.JSONDecodeError as e:
                diagnosis['service_account']['json_error'] = str(e)
        
        # Verificar status do storage service
        storage = get_storage_service()
        diagnosis['storage_service'] = {
            'type': type(storage).__name__,
            'is_fallback': hasattr(storage, 'is_fallback') and storage.is_fallback,
            'initialized': storage is not None
        }
        
        # Se estiver usando fallback, incluir informa√ß√µes adicionais
        if hasattr(storage, 'get_status_info'):
            diagnosis['fallback_info'] = storage.get_status_info()
        
        return jsonify(diagnosis)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat(),
            'status': 'ERROR - Falha no diagn√≥stico de autentica√ß√£o'
        }), 500

@app.route('/')
@login_required
def index():
    print("üîç === ROTA INDEX CHAMADA (ULTRA-MEMORY OPTIMIZED) ===")
    try:
        print("üìä Carregando clientes com lazy loading EXTREMO...")
        
        # OTIMIZA√á√ÉO MEM√ìRIA: For√ßar limpeza antes de carregar
        if os.environ.get('FLASK_ENV') == 'production':
            gc.collect()
            gc.collect()  # Dupla passada
        
        # OTIMIZA√á√ÉO MEM√ìRIA: Usar lazy loading e limite ULTRA-restritivo
        storage = get_storage_service()
        
        # Verificar se √© poss√≠vel usar servi√ßo otimizado
        try:
            from services.memory_optimized_sheets_service import MemoryOptimizedGoogleSheetsService
            if hasattr(storage, 'spreadsheet_id'):
                print("üß† Usando servi√ßo ULTRA-otimizado para mem√≥ria")
                optimized_service = MemoryOptimizedGoogleSheetsService(
                    storage.spreadsheet_id, 
                    storage.range_name
                )
                clients = optimized_service.get_clients()
            else:
                clients = storage.get_clients()
        except ImportError:
            clients = storage.get_clients()
        
        # Limite ULTRA-restritivo baseado na mem√≥ria dispon√≠vel
        max_clients = MEMORY_OPTIMIZED_SETTINGS.get('MAX_ROWS_PER_REQUEST', 25) if MEMORY_OPTIMIZER_AVAILABLE else 25
        
        # Para produ√ß√£o, ser ainda mais restritivo
        if os.environ.get('FLASK_ENV') == 'production':
            max_clients = min(max_clients, 15)  # M√°ximo 15 clientes por vez
            
        if len(clients) > max_clients:
            clients = clients[:max_clients]
            print(f"üß† ULTRA-LIMITADO a {max_clients} clientes (economia RAM cr√≠tica)")
        
        print(f"‚úÖ {len(clients)} clientes carregados")
        print(f"üíæ Mem√≥ria atual: {MemoryOptimizer.get_memory_usage() if MEMORY_OPTIMIZER_AVAILABLE else 'N/A'}")
        
        # OTIMIZA√á√ÉO MEM√ìRIA: Stats ULTRA-simplificadas
        try:
            # Usar apenas contadores b√°sicos para economizar mem√≥ria
            stats = {
                'total_clientes': len(clients),
                'clientes_ativos': sum(1 for c in clients if c.get('ativo', True)),
                'ct': sum(1 for c in clients if c.get('ct')),
                'fs': sum(1 for c in clients if c.get('fs')),
                'dp': sum(1 for c in clients if c.get('dp')),
                # Remover c√°lculos complexos que consomem mem√≥ria
                'empresas': len(clients),  # Simplificado
                'domesticas': 0,  # Simplificado
                'mei': 0,  # Simplificado
                'simples_nacional': 0,  # Simplificado
                'lucro_presumido': 0,  # Simplificado
                'lucro_real': 0,  # Simplificado
                'bpo': sum(1 for c in clients if c.get('bpoFinanceiro'))
            }
            print(f"üìà Estat√≠sticas ULTRA-simplificadas calculadas")
        except Exception as stats_error:
            print(f"‚ö†Ô∏è Erro ao calcular stats: {stats_error}")
            stats = {
                'total_clientes': len(clients), 
                'clientes_ativos': len(clients),  # Simplificado
                'empresas': len(clients), 'domesticas': 0, 'mei': 0, 'simples_nacional': 0,
                'lucro_presumido': 0, 'lucro_real': 0,
                'ct': 0, 'fs': 0, 'dp': 0, 'bpo': 0
            }
        
        # Garbage collection AGRESSIVO ap√≥s processamento
        if os.environ.get('FLASK_ENV') == 'production':
            # M√∫ltiplas passadas para garantir limpeza m√°xima
            for _ in range(3):
                gc.collect()
            print(f"üíæ Mem√≥ria p√≥s-GC-EXTREMO: {MemoryOptimizer.get_memory_usage() if MEMORY_OPTIMIZER_AVAILABLE else 'N/A'}")
        
        return render_template('index_modern.html', clients=clients, stats=stats)
        
    except Exception as e:
        print(f"‚ùå ERRO na rota index: {str(e)}")
        print(f"üîç Tipo do erro: {type(e).__name__}")
        flash(f'Erro ao carregar clientes: {str(e)}', 'error')
        
        # Em caso de erro, criar stats vazias e for√ßar limpeza
        stats = {
            'total_clientes': 0, 'clientes_ativos': 0, 'empresas': 0,
            'domesticas': 0, 'mei': 0, 'simples_nacional': 0,
            'lucro_presumido': 0, 'lucro_real': 0,
            'ct': 0, 'fs': 0, 'dp': 0, 'bpo': 0
        }
        
        # Limpeza de emerg√™ncia
        if os.environ.get('FLASK_ENV') == 'production':
            for _ in range(5):
                gc.collect()
        
        return render_template('index_modern.html', clients=[], stats=stats)

@app.route('/test')
@login_required
def test():
    """Rota de teste simples"""
    return """
    <html>
    <head>
        <title>Teste</title>
        <style>
            body { font-family: Arial; padding: 20px; background: #f0f0f0; }
            .container { background: white; padding: 20px; border-radius: 8px; }
            h1 { color: #333; }
            .success { color: green; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ Aplica√ß√£o Flask Funcionando!</h1>
            <p class="success">‚úÖ Servidor est√° respondendo corretamente</p>
            <p>üìä Google Sheets configurado</p>
            <p>üîß Sistema h√≠brido ativo</p>
            <a href="/">‚Üê Voltar para p√°gina principal</a>
        </div>
    </body>
    </html>
    """

@app.route('/client/<client_id>')
@login_required
def view_client(client_id):
    try:
        print(f"üîç [VIEW] ===== CARREGANDO CLIENTE PARA VISUALIZA√á√ÉO =====")
        print(f"üîç [VIEW] ID solicitado: '{client_id}'")
        print(f"üîç [VIEW] Tipo do ID: {type(client_id)}")
        
        # CORRE√á√ÉO: Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        client = storage.get_client(client_id)
        print(f"üîç [VIEW] Cliente carregado: {client is not None}")
        
        if client:
            print(f"üîç [VIEW] Nome do cliente: {client.get('nomeEmpresa')}")
            print(f"üîç [VIEW] ID do cliente retornado: '{client.get('id')}'")
            return render_template('client_view_modern.html', client=client)
        else:
            print(f"‚ùå [VIEW] Cliente {client_id} n√£o encontrado!")
            flash('Cliente n√£o encontrado', 'error')
            return redirect(url_for('index'))
    except Exception as e:
        print(f"‚ùå [VIEW] Erro ao carregar cliente: {str(e)}")
        import traceback
        print(f"‚ùå [VIEW] Traceback: {traceback.format_exc()}")
        flash(f'Erro ao carregar cliente: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/client/new')
@login_required
def new_client():
    return render_template('client_form_complete.html', client=None)

@app.route('/client/<client_id>/edit')
@login_required
def edit_client(client_id):
    try:
        print(f"üîç [EDIT] ===== CARREGANDO CLIENTE PARA EDI√á√ÉO =====")
        print(f"üîç [EDIT] ID solicitado: '{client_id}'")
        
        # CORRE√á√ÉO: Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        client = storage.get_client(client_id)
        print(f"üîç [EDIT] Cliente carregado: {client is not None}")
        
        if client:
            print(f"üîç [EDIT] Nome do cliente: {client.get('nomeEmpresa')}")
            print(f"üîç [EDIT] ID do cliente retornado: '{client.get('id')}'")
            print(f"üîç [EDIT] Tipo do ID: {type(client.get('id'))}")
            print(f"üîç [EDIT] Dados principais: {list(client.keys())[:10]}")
            
            # Garantir que o ID est√° correto
            if not client.get('id'):
                print(f"‚ö†Ô∏è [EDIT] Cliente n√£o tem ID! For√ßando ID = {client_id}")
                client['id'] = client_id
            
            return render_template('client_form_complete.html', client=client)
        else:
            print(f"‚ùå [EDIT] Cliente {client_id} n√£o encontrado!")
            flash('Cliente n√£o encontrado', 'error')
            return redirect(url_for('index'))
    except Exception as e:
        print(f"‚ùå [EDIT] Erro ao carregar cliente: {str(e)}")
        import traceback
        print(f"‚ùå [EDIT] Traceback: {traceback.format_exc()}")
        flash(f'Erro ao carregar cliente: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/client', methods=['POST'])
@login_required
def save_client():
    print("üîç === FUN√á√ÉO SAVE_CLIENT CHAMADA ===")
    print(f"üîç M√©todo da requisi√ß√£o: {request.method}")
    print(f"üîç Dados do form: {dict(request.form)}")
    
    # CORRE√á√ÉO DUPLICA√á√ÉO: Verificar ID primeiro
    client_id = request.form.get('id', '').strip()
    print(f"üîç ID do cliente (raw): '{request.form.get('id')}'")
    print(f"üîç ID do cliente (processed): '{client_id}'")
    print(f"üîç Opera√ß√£o: {'EDI√á√ÉO' if client_id else 'CRIA√á√ÉO'}")
    
    try:
        # Validar dados obrigat√≥rios do Bloco 1
        nome_empresa = request.form.get('nomeEmpresa', '').strip()
        razao_social = request.form.get('razaoSocialReceita', '').strip()
        nome_fantasia = request.form.get('nomeFantasiaReceita', '').strip()
        cpf_cnpj = request.form.get('cpfCnpj', '').strip()
        perfil = request.form.get('perfil', '').strip()
        insc_est = request.form.get('inscEst', '').strip()
        insc_mun = request.form.get('inscMun', '').strip()
        estado = request.form.get('estado', '').strip()
        cidade = request.form.get('cidade', '').strip()
        regime_federal = request.form.get('regimeFederal', '').strip()
        regime_estadual = request.form.get('regimeEstadual', '').strip()
        segmento = request.form.get('segmento', '').strip()
        atividade = request.form.get('atividade', '').strip()
        
        # Valida√ß√µes obrigat√≥rias
        if not nome_empresa:
            flash('Nome da empresa √© obrigat√≥rio!', 'error')
            return redirect(url_for('index'))
        if not razao_social:
            flash('Raz√£o Social (Receita) √© obrigat√≥ria!', 'error')
            return redirect(url_for('index'))
        if not nome_fantasia:
            flash('Nome Fantasia (Receita) √© obrigat√≥rio!', 'error')
            return redirect(url_for('index'))
        if not cpf_cnpj:
            flash('CPF/CNPJ √© obrigat√≥rio!', 'error')
            return redirect(url_for('index'))
        if not perfil:
            flash('Perfil √© obrigat√≥rio!', 'error')
            return redirect(url_for('index'))
        if not insc_est:
            flash('Inscri√ß√£o Estadual √© obrigat√≥ria!', 'error')
            return redirect(url_for('index'))
        if not insc_mun:
            flash('Inscri√ß√£o Municipal √© obrigat√≥ria!', 'error')
            return redirect(url_for('index'))
        if not estado:
            flash('Estado √© obrigat√≥rio!', 'error')
            return redirect(url_for('index'))
        if not cidade:
            flash('Cidade √© obrigat√≥ria!', 'error')
            return redirect(url_for('index'))
        if not regime_federal:
            flash('Regime Federal √© obrigat√≥rio!', 'error')
            return redirect(url_for('index'))
        if not regime_estadual:
            flash('Regime Estadual √© obrigat√≥rio!', 'error')
            return redirect(url_for('index'))
        if not segmento:
            flash('Segmento √© obrigat√≥rio!', 'error')
            return redirect(url_for('index'))
        if not atividade:
            flash('Atividade Principal √© obrigat√≥ria!', 'error')
            return redirect(url_for('index'))
        
        print(f"üîç Nome da empresa: {nome_empresa}")
        
        # CORRE√á√ÉO DUPLICA√á√ÉO: Garantir que o ID seja passado corretamente
        # Dados b√°sicos obrigat√≥rios - Bloco 1
        client_data = {
            'id': client_id if client_id else None,  # FIXADO: usar vari√°vel processada
            
            # Bloco 1: Informa√ß√µes da Pessoa F√≠sica / Jur√≠dica
            'nomeEmpresa': nome_empresa,
            'razaoSocialReceita': razao_social,
            'nomeFantasiaReceita': nome_fantasia,
            'cpfCnpj': cpf_cnpj,
            'cnpj': cpf_cnpj,  # Manter compatibilidade com campo antigo
            'perfil': perfil,
            'inscEst': insc_est,
            'inscMun': insc_mun,
            'estado': estado,
            'cidade': cidade,
            'regimeFederal': regime_federal,
            'tributacao': regime_federal,  # Manter compatibilidade com campo antigo
            'regimeEstadual': regime_estadual,
            'segmento': segmento,
            'atividade': atividade,
            
            # Bloco 2: Servi√ßos Prestados pela Control
            'bpoFinanceiro': request.form.get('bpoFinanceiro') == 'on',
            'ct': request.form.get('ct') == 'on',
            'fs': request.form.get('fs') == 'on',
            'dp': request.form.get('dp') == 'on',
            'dataInicioServicos': request.form.get('dataInicioServicos', ''),
            
            # C√≥digos dos Sistemas (Bloco 2)
            'codFortesCt': request.form.get('codFortesCt', ''),
            'codFortesFs': request.form.get('codFortesFs', ''),
            'codFortesPs': request.form.get('codFortesPs', ''),
            'codDominio': request.form.get('codDominio', ''),
            'sistemaUtilizado': request.form.get('sistemaUtilizado', ''),
            'moduloSpedTrier': request.form.get('moduloSpedTrier', ''),
            
            # Bloco 4: Contatos
            'telefoneFixo': request.form.get('telefoneFixo', ''),
            'telefoneCelular': request.form.get('telefoneCelular', ''),
            'whatsapp': request.form.get('whatsapp', ''),
            'emailPrincipal': request.form.get('emailPrincipal', ''),
            'emailSecundario': request.form.get('emailSecundario', ''),
            'responsavelImediato': request.form.get('responsavelImediato', ''),
            'emailsSocios': request.form.get('emailsSocios', ''),
            'contatoContador': request.form.get('contatoContador', ''),
            'telefoneContador': request.form.get('telefoneContador', ''),
            'emailContador': request.form.get('emailContador', ''),
        }
        
        # Processar dados dos s√≥cios dinamicamente
        print("üîç Processando dados dos s√≥cios...")
        for i in range(1, 11):  # Suporte para at√© 10 s√≥cios
            nome_socio = request.form.get(f'socio_{i}_nome', '').strip()
            if nome_socio:  # Se h√° nome, processar os dados do s√≥cio
                client_data[f'socio_{i}_nome'] = nome_socio
                client_data[f'socio_{i}_cpf'] = request.form.get(f'socio_{i}_cpf', '').strip()
                client_data[f'socio_{i}_email'] = request.form.get(f'socio_{i}_email', '').strip()
                client_data[f'socio_{i}_telefone'] = request.form.get(f'socio_{i}_telefone', '').strip()
                client_data[f'socio_{i}_participacao'] = request.form.get(f'socio_{i}_participacao', '').strip()
                print(f"üîç S√≥cio {i}: {nome_socio}")
        
        # Continuar com outros dados
        client_data.update({
            
            # Bloco 5: Sistemas e Acessos
            'sistemaPrincipal': request.form.get('sistemaPrincipal', ''),
            'versaoSistema': request.form.get('versaoSistema', ''),
            'codAcessoSimples': request.form.get('codAcessoSimples', ''),
            'cpfCnpjAcesso': request.form.get('cpfCnpjAcesso', ''),
            'portalClienteAtivo': request.form.get('portalClienteAtivo') == 'on',
            'integracaoDominio': request.form.get('integracaoDominio') == 'on',
            'sistemaOnvio': request.form.get('sistemaOnvio') == 'on',
            
            # Novos campos Sistema Onvio
            'sistemaOnvioContabil': request.form.get('sistemaOnvioContabil') == 'on',
            'sistemaOnvioFiscal': request.form.get('sistemaOnvioFiscal') == 'on',
            'sistemaOnvioPessoal': request.form.get('sistemaOnvioPessoal') == 'on',
            
            # Bloco 6: Senhas e Credenciais
            'acessoIss': request.form.get('acessoIss', ''),
            'senhaIss': request.form.get('senhaIss', ''),
            'acessoSefin': request.form.get('acessoSefin', ''),
            'senhaSefin': request.form.get('senhaSefin', ''),
            'acessoSeuma': request.form.get('acessoSeuma', ''),
            'senhaSeuma': request.form.get('senhaSeuma', ''),
            'acessoEmpWeb': request.form.get('acessoEmpWeb', ''),
            'senhaEmpWeb': request.form.get('senhaEmpWeb', ''),
            'acessoFapInss': request.form.get('acessoFapInss', ''),
            'senhaFapInss': request.form.get('senhaFapInss', ''),
            'acessoCrf': request.form.get('acessoCrf', ''),
            'senhaCrf': request.form.get('senhaCrf', ''),
            'emailGestor': request.form.get('emailGestor', ''),
            'senhaEmailGestor': request.form.get('senhaEmailGestor', ''),
            'anvisaGestor': request.form.get('anvisaGestor', ''),
            'anvisaEmpresa': request.form.get('anvisaEmpresa', ''),
            'acessoIbama': request.form.get('acessoIbama', ''),
            'senhaIbama': request.form.get('senhaIbama', ''),
            'acessoSemace': request.form.get('acessoSemace', ''),
            'senhaSemace': request.form.get('senhaSemace', ''),
            
            # Bloco 7: Procura√ß√µes
            'procRfb': request.form.get('procRfb') == 'on',
            'procRfbData': request.form.get('procRfbData', ''),
            'procRc': request.form.get('procRc') == 'on',
            'procRcData': request.form.get('procRcData', ''),
            'procCx': request.form.get('procCx') == 'on',
            'procCxData': request.form.get('procCxData', ''),
            'procSw': request.form.get('procSw') == 'on',
            'procSwData': request.form.get('procSwData', ''),
            'procMunicipal': request.form.get('procMunicipal') == 'on',
            'procMunicipalData': request.form.get('procMunicipalData', ''),
            'outrasProc': request.form.get('outrasProc', ''),
            'obsProcuracoes': request.form.get('obsProcuracoes', ''),
            
            # Bloco 8: Observa√ß√µes e Dados Adicionais
            'observacoesGerais': request.form.get('observacoesGerais', ''),
            'tarefasVinculadas': int(request.form.get('tarefasVinculadas', '0') or '0'),
            'dataInicioServicos': request.form.get('dataInicioServicos', ''),
            'statusCliente': request.form.get('statusCliente', 'ativo'),
            'ultimaAtualizacao': datetime.now().isoformat(),
            'responsavelAtualizacao': session.get('usuario', ''),
            'prioridadeCliente': request.form.get('prioridadeCliente', 'normal'),
            'tagsCliente': request.form.get('tagsCliente', ''),
            'historicoAlteracoes': request.form.get('historicoAlteracoes', ''),
            
            # Campos de compatibilidade (manter existentes)
            'mesAnoInicio': request.form.get('dataInicioServicos', ''),
            
            # Status e configura√ß√µes
            'ativo': request.form.get('ativo') == 'on',
        })
        
        # Sincronizar statusCliente com ativo para compatibilidade
        status_cliente = client_data.get('statusCliente', 'ativo')
        client_data['ativo'] = status_cliente == 'ativo'
        
        # CORRE√á√ÉO DUPLICA√á√ÉO: Melhor controle de cria√ß√£o vs edi√ß√£o
        if not client_data.get('id'):
            print("üîç NOVO CLIENTE: Definindo criadoEm")
            client_data['criadoEm'] = datetime.now().isoformat()
        else:
            print(f"üîç EDITANDO CLIENTE: ID = {client_data['id']}")
            # Para edi√ß√£o, sempre manter o ultimaAtualizacao
            client_data['ultimaAtualizacao'] = datetime.now().isoformat()
        
        print(f"üîç Cliente preparado: {client_data.get('nomeEmpresa')}")
        print(f"üîç ID final do cliente: {client_data.get('id')}")
        print(f"üîç Tipo de opera√ß√£o: {'EDI√á√ÉO' if client_data.get('id') else 'CRIA√á√ÉO'}")
        print("üîç Verificando conex√£o com storage_service...")
        
        # CORRE√á√ÉO: Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        if not storage:
            print("‚ùå storage_service n√£o est√° dispon√≠vel!")
            flash('Erro: Servi√ßo de armazenamento n√£o dispon√≠vel', 'error')
            return redirect(url_for('index'))
        
        print("üîç Chamando storage_service.save_client...")
        print(f"üîç client_data['id']: '{client_data.get('id')}'")
        print(f"üîç client_data['nomeEmpresa']: '{client_data.get('nomeEmpresa')}'")
        print(f"üîç Dados essenciais: ID={client_data.get('id')}, Nome={client_data.get('nomeEmpresa')}")
        
        success = storage.save_client(client_data)
        
        print(f"üîç Resultado do salvamento: {success}")
        
        if success:
            if client_data.get('id'):
                flash('Cliente atualizado com sucesso!', 'success')
                print("‚úÖ Flash message de atualiza√ß√£o adicionada")
            else:
                flash('Cliente criado com sucesso!', 'success')
                print("‚úÖ Flash message de cria√ß√£o adicionada")
        else:
            flash('Erro ao salvar cliente', 'error')
            print("‚ùå Flash message de erro adicionada")
            
    except Exception as e:
        print(f"‚ùå EXCE√á√ÉO na fun√ß√£o save_client: {str(e)}")
        print(f"‚ùå Tipo da exce√ß√£o: {type(e).__name__}")
        import traceback
        print(f"‚ùå Traceback completo: {traceback.format_exc()}")
        flash(f'Erro ao salvar cliente: {str(e)}', 'error')
    
    print("üîç Redirecionando para index...")
    return redirect(url_for('index'))

@app.route('/client/<client_id>/delete', methods=['POST'])
@login_required
def delete_client(client_id):
    try:
        # Verificar se o usu√°rio √© administrador
        if not session.get('user_perfil') or session.get('user_perfil').lower() != 'administrador':
            flash('Acesso negado. Apenas administradores podem excluir clientes.', 'danger')
            return redirect(url_for('view_client', client_id=client_id))
        
        # CORRE√á√ÉO: Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        success = storage.delete_client(client_id)
        if success:
            flash('Cliente exclu√≠do com sucesso!', 'success')
        else:
            flash('Erro ao excluir cliente', 'error')
    except Exception as e:
        flash(f'Erro ao excluir cliente: {str(e)}', 'error')
    
    return redirect(url_for('index'))

@app.route('/client/<client_id>/meeting')
@login_required
def register_meeting(client_id):
    """P√°gina para registrar ata de reuni√£o com cliente"""
    try:
        client = storage_service.get_client(client_id)
        if client:
            return render_template('meeting_form.html', client=client)
        else:
            flash('Cliente n√£o encontrado', 'error')
            return redirect(url_for('index'))
    except Exception as e:
        flash(f'Erro ao carregar cliente: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/client/<client_id>/meeting', methods=['POST'])
@login_required
def save_meeting(client_id):
    """Salvar ata de reuni√£o"""
    try:
        # Busca o nome do cliente
        client = storage_service.get_client(client_id)
        client_name = client.get('nomeFantasiaReceita') or client.get('nomeEmpresa') if client else 'Cliente'
        
        meeting_data = {
            'client_id': client_id,
            'client_name': client_name,
            'date': request.form.get('meeting_date'),
            'time': request.form.get('meeting_time'),
            'participants': request.form.get('participants'),
            'topics': request.form.get('topics'),
            'decisions': request.form.get('decisions'),
            'next_steps': request.form.get('next_steps')
        }
        
        # Salva usando o servi√ßo de atas
        if meeting_service:
            meeting_id = meeting_service.save_meeting(meeting_data)
            if meeting_id:
                flash(f'‚úÖ Ata de reuni√£o {meeting_id} registrada com sucesso para {client_name}!', 'success')
            else:
                flash('‚ùå Erro ao salvar ata de reuni√£o', 'error')
        else:
            # Fallback - salva localmente (simula√ß√£o)
            flash(f'‚ö†Ô∏è Ata de reuni√£o registrada localmente para {client_name} (funcionalidade limitada)', 'warning')
        
    except Exception as e:
        flash(f'‚ùå Erro ao salvar ata de reuni√£o: {str(e)}', 'error')
        print(f"‚ùå Erro detalhado: {e}")
    
    return redirect(url_for('index'))

@app.route('/client/<client_id>/meetings')
@login_required
def view_client_meetings(client_id):
    """Visualizar todas as atas de um cliente"""
    try:
        client = storage_service.get_client(client_id)
        if not client:
            flash('Cliente n√£o encontrado', 'error')
            return redirect(url_for('index'))
        
        meetings = []
        if meeting_service:
            meetings = meeting_service.get_client_meetings(client_id)
        
        return render_template('client_meetings.html', client=client, meetings=meetings)
        
    except Exception as e:
        flash(f'Erro ao carregar atas do cliente: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/meetings')
@login_required
def all_meetings():
    """Visualizar todas as atas de reuni√£o"""
    try:
        meetings = []
        if meeting_service:
            meetings = meeting_service.get_all_meetings()
        
        return render_template('all_meetings.html', meetings=meetings)
        
    except Exception as e:
        flash(f'Erro ao carregar atas: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/debug-render')
def debug_render():
    """Rota de debug para verificar configura√ß√µes no Render"""
    try:
        import json
        import sys
        
        debug_info = {
            'timestamp': datetime.now().isoformat(),
            'python_version': sys.version,
            'environment': {}
        }
        
        # Verificar vari√°veis de ambiente
        env_vars = ['GOOGLE_SERVICE_ACCOUNT_JSON', 'GOOGLE_SHEETS_ID', 'FLASK_ENV']
        for var in env_vars:
            value = os.environ.get(var)
            if var == 'GOOGLE_SERVICE_ACCOUNT_JSON' and value:
                # N√£o expor credenciais completas
                debug_info['environment'][var] = f"Presente ({len(value)} chars)"
                try:
                    creds_info = json.loads(value)
                    debug_info['environment'][f'{var}_parsed'] = {
                        'project_id': creds_info.get('project_id', 'N/A'),
                        'client_email': creds_info.get('client_email', 'N/A'),
                        'keys_available': list(creds_info.keys())
                    }
                except:
                    debug_info['environment'][f'{var}_parsed'] = "Erro ao parsear JSON"
            else:
                debug_info['environment'][var] = value or "N√£o encontrada"
        
        # Testar importa√ß√µes
        debug_info['imports'] = {}
        try:
            from google.oauth2.service_account import Credentials
            debug_info['imports']['google_oauth2'] = "OK"
        except ImportError as e:
            debug_info['imports']['google_oauth2'] = f"ERRO: {e}"
        
        try:
            from googleapiclient.discovery import build
            debug_info['imports']['googleapiclient'] = "OK"
        except ImportError as e:
            debug_info['imports']['googleapiclient'] = f"ERRO: {e}"
        
        # Testar servi√ßo
        debug_info['service_test'] = {}
        try:
            if USE_GOOGLE_SHEETS and storage_service:
                debug_info['service_test']['storage_type'] = "Google Sheets"
                debug_info['service_test']['service_initialized'] = bool(storage_service.service)
                debug_info['service_test']['spreadsheet_id'] = storage_service.spreadsheet_id
                
                # Testar busca de clientes
                clients = storage_service.get_clients()
                debug_info['service_test']['clients_count'] = len(clients)
                
                if clients:
                    first_client = clients[0]
                    debug_info['service_test']['first_client'] = {
                        'name': first_client.get('nomeEmpresa', 'N/A'),
                        'id': first_client.get('id', 'N/A'),
                        'keys_count': len(first_client.keys())
                    }
            else:
                debug_info['service_test']['storage_type'] = "Local"
                
        except Exception as e:
            debug_info['service_test']['error'] = str(e)
        
        return jsonify(debug_info)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        })

@app.route('/debug-client/<client_id>')
def debug_client_search(client_id):
    """Rota espec√≠fica para debug de busca de cliente"""
    try:
        debug_info = {
            'timestamp': datetime.now().isoformat(),
            'client_id_received': client_id,
            'client_id_type': str(type(client_id)),
            'client_id_length': len(str(client_id)),
            'storage_type': 'Google Sheets' if USE_GOOGLE_SHEETS else 'Local'
        }
        
        # Teste 1: Buscar cliente espec√≠fico
        print(f"üîç [DEBUG_CLIENT] Buscando cliente: {client_id}")
        client = storage_service.get_client(client_id)
        debug_info['client_found'] = client is not None
        
        if client:
            debug_info['client_data'] = {
                'nome': client.get('nomeEmpresa', 'N/A'),
                'id': client.get('id', 'N/A'),
                'id_type': str(type(client.get('id'))),
                'fields_count': len(client.keys()),
                'has_cnpj': bool(client.get('cnpj')),
                'has_razao_social': bool(client.get('razaoSocialReceita'))
            }
        else:
            debug_info['client_data'] = None
            
            # Teste 2: Listar todos os clientes para comparar IDs
            all_clients = storage_service.get_clients()
            debug_info['total_clients'] = len(all_clients)
            debug_info['sample_client_ids'] = []
            
            for i, c in enumerate(all_clients[:10]):  # Primeiros 10
                debug_info['sample_client_ids'].append({
                    'index': i,
                    'name': c.get('nomeEmpresa', 'N/A'),
                    'id': c.get('id', 'N/A'),
                    'id_matches': str(c.get('id', '')).strip() == str(client_id).strip()
                })
        
        return jsonify(debug_info)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat(),
            'client_id': client_id
        })

if __name__ == '__main__':
    print("üöÄ Iniciando aplica√ß√£o Flask...")
    print(f"üìä Armazenamento: {'Google Sheets' if USE_GOOGLE_SHEETS else 'Local'}")
    app.run(debug=True, host='0.0.0.0', port=5000)
