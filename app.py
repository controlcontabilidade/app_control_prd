# -*- coding: utf-8 -*-
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash, session
import json
import os
import gc  # Para otimiza√ß√£o de mem√≥ria
from datetime import datetime
from functools import wraps

# Importar otimizador de mem√≥ria LITE para Render
try:
    from memory_optimizer_lite import RenderMemoryOptimizer, RENDER_MEMORY_SETTINGS, get_optimized_batch_size
    MEMORY_OPTIMIZER_AVAILABLE = True
    print("üöÄ Render Memory Optimizer carregado")
    # Usar aliases para compatibilidade
    UltraMemoryOptimizer = RenderMemoryOptimizer
    ULTRA_MEMORY_SETTINGS = RENDER_MEMORY_SETTINGS
    get_ultra_optimized_batch_size = get_optimized_batch_size
except ImportError:
    try:
        from ultra_memory_optimizer import UltraMemoryOptimizer, ULTRA_MEMORY_SETTINGS, get_ultra_optimized_batch_size
        MEMORY_OPTIMIZER_AVAILABLE = True
        print("üß† Ultra Memory Optimizer carregado")
    except ImportError:
        try:
            from memory_optimizer import MemoryOptimizer, MEMORY_OPTIMIZED_SETTINGS, get_optimized_batch_size
            MEMORY_OPTIMIZER_AVAILABLE = True
            print("üß† Memory Optimizer carregado")
            # Usar vers√£o padr√£o se ultra n√£o estiver dispon√≠vel
            UltraMemoryOptimizer = MemoryOptimizer
            ULTRA_MEMORY_SETTINGS = MEMORY_OPTIMIZED_SETTINGS
            get_ultra_optimized_batch_size = get_optimized_batch_size
        except ImportError:
            MEMORY_OPTIMIZER_AVAILABLE = False
            print("‚ö†Ô∏è Memory Optimizer n√£o dispon√≠vel")
            
            # Definir fun√ß√£o fallback
            def get_ultra_optimized_batch_size():
                return 3  # Valor MUITO baixo para fallback

from services.google_sheets_service import GoogleSheetsService
from services.local_storage_service import LocalStorageService
from services.meeting_service import MeetingService
from services.user_service import UserService
# Removido: from services.report_service import ReportService
from services.segmento_atividade_service import SegmentoAtividadeService

# Tentar importar servi√ßo completo, usar lite como fallback
try:
    from check_dependencies import get_available_import_service
    ImportService, IMPORT_SERVICE_TYPE = get_available_import_service()
    print(f"‚úÖ Servi√ßo de importa√ß√£o: {IMPORT_SERVICE_TYPE}")
except Exception as e:
    print(f"‚ùå Erro ao carregar servi√ßo de importa√ß√£o: {e}")
    ImportService = None
    IMPORT_SERVICE_TYPE = "none"

from werkzeug.utils import secure_filename

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'your-secret-key-here-change-in-production')

# Aplicar otimiza√ß√µes de mem√≥ria RENDER-OTIMIZADAS se dispon√≠vel
if MEMORY_OPTIMIZER_AVAILABLE:
    UltraMemoryOptimizer.setup_extreme_memory_optimization()
    UltraMemoryOptimizer.optimize_flask_config(app)
    
    # Configura√ß√µes espec√≠ficas do Render
    if os.environ.get('RENDER'):  # Detectar ambiente Render
        UltraMemoryOptimizer.setup_render_optimizations()
        print("üéØ Otimiza√ß√µes espec√≠ficas Render aplicadas")
else:
    print("‚ö†Ô∏è Usando configura√ß√µes b√°sicas de mem√≥ria")

# Configura√ß√µes de encoding UTF-8
app.config['JSON_AS_ASCII'] = False
app.jinja_env.globals['ord'] = ord  # Fun√ß√£o para debug de encoding
import sys
if hasattr(sys, 'setdefaultencoding'):
    sys.setdefaultencoding('utf-8')

# For√ßar encoding UTF-8 para templates Jinja2
app.jinja_env.charset = 'utf-8'

# Filtro customizado para remover formata√ß√£o de CPF/CNPJ
@app.template_filter('only_numbers')
def only_numbers_filter(value):
    """Remove toda formata√ß√£o, deixando apenas n√∫meros"""
    if not value:
        return ''
    import re
    return re.sub(r'\D', '', str(value))

# Filtro customizado para formata√ß√£o de datas
@app.template_filter('format_date')
def format_date_filter(value, format='%d/%m/%Y'):
    """Formata data ISO para formato brasileiro"""
    if not value:
        return '-'
    try:
        # Se j√° for string no formato ISO
        if isinstance(value, str):
            # Remove microsegundos se existirem
            if '.' in value:
                value = value.split('.')[0]
            # Tenta parsing ISO
            if 'T' in value:
                dt = datetime.fromisoformat(value.replace('T', ' '))
            else:
                dt = datetime.strptime(value, '%Y-%m-%d')
        elif isinstance(value, datetime):
            dt = value
        else:
            return str(value)
        
        return dt.strftime(format)
    except (ValueError, AttributeError):
        return str(value)

# Filtro customizado para formata√ß√£o de data e hora
@app.template_filter('format_datetime')
def format_datetime_filter(value):
    """Formata data e hora ISO para formato brasileiro"""
    return format_date_filter(value, '%d/%m/%Y %H:%M')

# Filtro espec√≠fico para Data de In√≠cio dos Servi√ßos - CORRE√á√ÉO 05
@app.template_filter('format_mm_yyyy')
def format_mm_yyyy_filter(value):
    """Formata/valida data no formato MM/AAAA para Data de In√≠cio dos Servi√ßos"""
    if not value:
        return '-'
    
    # Se j√° est√° no formato MM/AAAA, retorna como est√°
    if isinstance(value, str) and '/' in value:
        # Validar se est√° no formato correto MM/AAAA
        import re
        if re.match(r'^(0[1-9]|1[0-2])\/\d{4}$', value.strip()):
            return value.strip()
    
    # Se √© uma string com apenas n√∫meros, tenta converter para MM/AAAA
    if isinstance(value, str):
        digits_only = ''.join(filter(str.isdigit, value))
        if len(digits_only) == 6:  # MMAAAA
            month = digits_only[:2]
            year = digits_only[2:]
            if 1 <= int(month) <= 12:
                return f"{month}/{year}"
    
    # Retorna o valor original se n√£o conseguir formatar
    return str(value) if value else '-'

# Configura√ß√µes para upload de arquivos - OTIMIZADO PARA RENDER
# Reduzido DRASTICAMENTE para economizar RAM no Render (256KB)
MAX_UPLOAD_SIZE = 256 * 1024 if os.environ.get('RENDER') else 1 * 1024 * 1024  # 256KB Render, 1MB desenvolvimento
app.config['MAX_CONTENT_LENGTH'] = MAX_UPLOAD_SIZE
app.config['UPLOAD_FOLDER'] = 'uploads'
ALLOWED_EXTENSIONS = {'xlsx', 'xls'}

print(f"üìÅ Upload configurado: {MAX_UPLOAD_SIZE / 1024:.0f}KB m√°ximo")

# Configura√ß√µes RENDER-ESPEC√çFICAS para produ√ß√£o - FOCO EM MEM√ìRIA M√çNIMA
if os.environ.get('RENDER'):
    # Garbage collection EXTREMAMENTE agressivo para Render
    gc.set_threshold(10, 1, 1)  # Muito mais agressivo que antes
    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0  # Zero cache para economizar mem√≥ria
    
    # Configura√ß√µes JSON EXTREMAS
    app.config['JSON_SORT_KEYS'] = False
    app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False
    app.config['JSONIFY_MIMETYPE'] = 'application/json'
    
    # Limitar DRASTICAMENTE workers e conex√µes para Render
    os.environ.setdefault('WEB_CONCURRENCY', '1')  # 1 worker APENAS
    os.environ.setdefault('WORKER_CONNECTIONS', '3')  # Extremamente reduzido
    os.environ.setdefault('WORKER_TIMEOUT', '15')  # Timeout muito baixo
    os.environ.setdefault('MAX_REQUESTS', '25')  # Restart worker mais frequentemente
    os.environ.setdefault('PRELOAD_APP', 'true')  # Preload para economizar mem√≥ria
    
    # Configura√ß√µes de sess√£o otimizadas para Render
    app.config['PERMANENT_SESSION_LIFETIME'] = 43200  # 12 horas (43200 segundos)
    app.config['SESSION_COOKIE_SECURE'] = True
    app.config['SESSION_COOKIE_HTTPONLY'] = True
    app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'  # Melhor compatibilidade
    
    # Desabilitar TUDO que consome mem√≥ria desnecessariamente
    app.config['PRESERVE_CONTEXT_ON_EXCEPTION'] = False
    app.config['EXPLAIN_TEMPLATE_LOADING'] = False
    app.config['PROPAGATE_EXCEPTIONS'] = None
    
    print("üéØ Configura√ß√µes RENDER aplicadas - MEM√ìRIA M√çNIMA")
elif os.environ.get('FLASK_ENV') == 'production':
    # Configura√ß√µes gen√©ricas de produ√ß√£o (n√£o Render)
    gc.set_threshold(25, 1, 1)
    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 30
    app.config['PERMANENT_SESSION_LIFETIME'] = 43200  # 12 horas tamb√©m em produ√ß√£o
    print("üß† Configura√ß√µes gen√©ricas de produ√ß√£o aplicadas")
else:
    # Configura√ß√µes para desenvolvimento local
    app.config['PERMANENT_SESSION_LIFETIME'] = 43200  # 12 horas em desenvolvimento
    app.config['SESSION_COOKIE_SECURE'] = False  # HTTP permitido em desenvolvimento
    app.config['SESSION_COOKIE_HTTPONLY'] = True
    app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'
    print("üîß Configura√ß√µes de desenvolvimento aplicadas - Sess√£o 12h")

# Criar pasta de uploads se n√£o existir
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Hook EXTREMO para limpeza de mem√≥ria ap√≥s cada requisi√ß√£o - RENDER OTIMIZADO
@app.after_request
def cleanup_memory_after_request(response):
    """Limpa mem√≥ria EXTREMAMENTE ap√≥s cada requisi√ß√£o - otimizado para Render"""
    if MEMORY_OPTIMIZER_AVAILABLE and os.environ.get('RENDER'):
        # Usar otimizador espec√≠fico para Render
        UltraMemoryOptimizer.cleanup_after_request()
        
        # Limpeza adicional para ambientes cr√≠ticos de mem√≥ria (Render)
        try:
            # For√ßar limpeza de cache Python interno
            if hasattr(sys, '_clear_type_cache'):
                sys._clear_type_cache()
            
            # Coleta de lixo m√∫ltipla para Render
            for _ in range(3):  # Mais agressivo no Render
                gc.collect()
                
            # For√ßa limpeza de weakrefs
            import weakref
            weakref.getweakrefs(object())
        except:
            pass
    elif os.environ.get('FLASK_ENV') == 'production':
        # Limpeza b√°sica para outros ambientes de produ√ß√£o
        for _ in range(2):
            gc.collect()
    
    return response

# Carregar vari√°veis de ambiente (.env local / Render)
from dotenv import load_dotenv
load_dotenv()  # Carrega .env apenas localmente (Render usa vari√°veis nativas)

# Carregar configura√ß√µes (compat√≠vel com produ√ß√£o)
USE_GOOGLE_SHEETS = True
USE_OAUTH2 = False  # OAuth2 para autentica√ß√£o manual  
USE_SERVICE_ACCOUNT = True  # Service Account para aplica√ß√µes server-side (RECOMENDADO)
GOOGLE_SHEETS_API_KEY = os.environ.get('GOOGLE_SHEETS_API_KEY')
GOOGLE_SHEETS_ID = os.environ.get('GOOGLE_SHEETS_ID')
GOOGLE_SHEETS_RANGE = 'Clientes!A:DD'

print(f"üîß Configura√ß√µes:")
print(f"   USE_GOOGLE_SHEETS: {USE_GOOGLE_SHEETS}")
print(f"   USE_OAUTH2: {USE_OAUTH2}")
print(f"   USE_SERVICE_ACCOUNT: {USE_SERVICE_ACCOUNT}")
if GOOGLE_SHEETS_API_KEY:
    print(f"   API_KEY: {GOOGLE_SHEETS_API_KEY[:10]}...")
else:
    print("   API_KEY: None")
print(f"   SPREADSHEET_ID: {GOOGLE_SHEETS_ID}")

# Inicializar servi√ßos COM LAZY LOADING - OTIMIZA√á√ÉO MEM√ìRIA RENDER
storage_service = None
meeting_service = None
user_service = None
# Removido: report_service = None (funcionalidade de relat√≥rios removida)
import_service = None

def get_storage_service():
    """Lazy loading do storage service com fallback robusto para Render"""
    global storage_service
    if storage_service is None:
        try:
            if USE_GOOGLE_SHEETS and GOOGLE_SHEETS_ID:
                if USE_SERVICE_ACCOUNT:
                    print("üîê Inicializando Google Sheets Service Account...")
                    from services.google_sheets_service_account import GoogleSheetsServiceAccountService
                    storage_service = GoogleSheetsServiceAccountService(GOOGLE_SHEETS_ID, GOOGLE_SHEETS_RANGE)
                    print("‚úÖ Storage service inicializado (Service Account)")
                elif USE_OAUTH2:
                    print("üîê Inicializando Google Sheets OAuth2...")
                    from services.google_sheets_oauth_service import GoogleSheetsOAuthService
                    storage_service = GoogleSheetsOAuthService(GOOGLE_SHEETS_ID, GOOGLE_SHEETS_RANGE)
                    print("‚úÖ Storage service inicializado (OAuth2)")
                else:
                    print("üìä Inicializando Google Sheets h√≠brido...")
                    storage_service = GoogleSheetsService(GOOGLE_SHEETS_API_KEY, GOOGLE_SHEETS_ID, GOOGLE_SHEETS_RANGE)
                    print("‚úÖ Storage service inicializado (H√≠brido)")
            else:
                print("‚ö†Ô∏è Usando armazenamento local")
                storage_service = LocalStorageService()
                
        except Exception as e:
            print(f"‚ùå Erro ao inicializar storage service: {e}")
            print(f"üîç Tipo do erro: {type(e).__name__}")
            
            # Verificar se √© erro de autentica√ß√£o espec√≠fico do Render
            error_str = str(e).lower()
            is_auth_error = any(keyword in error_str for keyword in [
                'authentication', 'credential', 'unauthorized', 'forbidden',
                'service account', 'google', 'api', 'quota', 'permission'
            ])
            
            if is_auth_error and os.environ.get('FLASK_ENV') == 'production':
                print("üö® Erro de autentica√ß√£o detectado no Render - ativando fallback")
                try:
                    from services.render_fallback_service import RenderFallbackService
                    storage_service = RenderFallbackService()
                    print("‚úÖ Render Fallback Service ativado")
                    
                    # Adicionar mensagem global para mostrar na interface
                    if not hasattr(get_storage_service, '_fallback_message_shown'):
                        flash('‚ö†Ô∏è Sistema temporariamente usando dados locais. Verifique configura√ß√µes do Google Sheets.', 'warning')
                        get_storage_service._fallback_message_shown = True
                        
                except Exception as fallback_error:
                    print(f"‚ùå Erro ao ativar fallback: {fallback_error}")
                    storage_service = LocalStorageService()
                    print("‚ö†Ô∏è Fallback final para armazenamento local")
            else:
                storage_service = LocalStorageService()
                print("‚ö†Ô∏è Fallback para armazenamento local")
        
        # Limpeza de mem√≥ria ap√≥s inicializa√ß√£o
        if MEMORY_OPTIMIZER_AVAILABLE:
            UltraMemoryOptimizer.force_cleanup()
            print(f"üíæ Mem√≥ria ap√≥s limpeza completa: {UltraMemoryOptimizer.get_memory_usage()}")
    
    return storage_service

def get_meeting_service():
    """Lazy loading do meeting service"""
    global meeting_service
    if meeting_service is None and GOOGLE_SHEETS_ID:
        try:
            meeting_service = MeetingService(GOOGLE_SHEETS_ID)
            print("‚úÖ Meeting service inicializado")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar meeting service: {e}")
            meeting_service = None
    return meeting_service

def get_user_service():
    """Lazy loading do user service com fallback"""
    global user_service
    if user_service is None:
        if GOOGLE_SHEETS_ID:
            try:
                print(f"üîÑ Tentando inicializar UserService com SHEETS_ID: {GOOGLE_SHEETS_ID}")
                user_service = UserService(GOOGLE_SHEETS_ID)
                print("‚úÖ User service inicializado com sucesso")
            except Exception as e:
                print(f"‚ùå Erro ao inicializar user service: {e}")
                print(f"üîç Tipo do erro: {type(e).__name__}")
                print("üîÑ Tentando fallback de usu√°rios...")
                
                # Usar servi√ßo de fallback
                try:
                    from services.fallback_user_service import FallbackUserService
                    user_service = FallbackUserService()
                    print("‚úÖ Fallback user service inicializado")
                except Exception as fallback_error:
                    print(f"‚ùå Erro no fallback user service: {fallback_error}")
                    user_service = None
        else:
            print("‚ùå GOOGLE_SHEETS_ID n√£o dispon√≠vel para UserService")
            print("üîÑ Inicializando fallback user service...")
            
            # Usar servi√ßo de fallback quando n√£o h√° SHEETS_ID
            try:
                from services.fallback_user_service import FallbackUserService
                user_service = FallbackUserService()
                print("‚úÖ Fallback user service inicializado (sem SHEETS_ID)")
            except Exception as fallback_error:
                print(f"‚ùå Erro no fallback user service: {fallback_error}")
                user_service = None
    else:
        print("‚ôªÔ∏è User service j√° inicializado")
    return user_service

# Removido: Fun√ß√£o get_report_service() (funcionalidade de relat√≥rios removida)

def get_import_service():
    """Lazy loading do import service"""
    global import_service
    if import_service is None and ImportService:
        try:
            storage = get_storage_service()
            if storage:
                import_service = ImportService(storage)
                print(f"‚úÖ Import service inicializado ({IMPORT_SERVICE_TYPE})")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar import service: {e}")
            import_service = None
    return import_service

# Global para cache do servi√ßo de segmentos/atividades
segmento_atividade_service = None

def get_segmento_atividade_service():
    """Lazy loading do segmento/atividade service"""
    global segmento_atividade_service
    if segmento_atividade_service is None:
        try:
            if GOOGLE_SHEETS_ID:
                print("üè¢ Inicializando SegmentoAtividadeService...")
                segmento_atividade_service = SegmentoAtividadeService(GOOGLE_SHEETS_ID)
                print("‚úÖ SegmentoAtividadeService inicializado")
            else:
                print("‚ùå GOOGLE_SHEETS_ID n√£o dispon√≠vel para SegmentoAtividadeService")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar SegmentoAtividadeService: {e}")
            import traceback
            traceback.print_exc()
            segmento_atividade_service = None
    return segmento_atividade_service

# Inicializa√ß√£o b√°sica - EXTREMAMENTE otimizada
print("üöÄ Aplica√ß√£o inicializada com lazy loading EXTREMO")
print(f"üíæ Mem√≥ria inicial: {UltraMemoryOptimizer.get_memory_usage() if MEMORY_OPTIMIZER_AVAILABLE else 'N/A'}")

# Iniciar monitor de mem√≥ria ultra-otimizado
if os.environ.get('FLASK_ENV') == 'production' and MEMORY_OPTIMIZER_AVAILABLE:
    try:
        from ultra_memory_monitor import start_ultra_monitoring
        start_ultra_monitoring()
        print("üîç Monitor de mem√≥ria ULTRA iniciado")
    except ImportError:
        print("‚ö†Ô∏è Monitor ultra n√£o dispon√≠vel")

# Garbage collection EXTREMO inicial
if os.environ.get('FLASK_ENV') == 'production':
    if MEMORY_OPTIMIZER_AVAILABLE:
        UltraMemoryOptimizer.force_cleanup()
    else:
        gc.collect()
    print("üß† Limpeza EXTREMA de mem√≥ria inicial conclu√≠da")

# Decorator para verificar autentica√ß√£o
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        print(f"üîê LOGIN_REQUIRED: Verificando sess√£o para fun√ß√£o {f.__name__}")
        print(f"üîê Dados da sess√£o: {dict(session)}")
        if 'user_id' not in session:
            print("‚ùå user_id n√£o encontrado na sess√£o - Redirecionando para login")
            flash('Voc√™ precisa fazer login para acessar esta p√°gina.', 'warning')
            return redirect(url_for('login'))
        print(f"‚úÖ user_id encontrado: {session['user_id']} - Executando fun√ß√£o {f.__name__}")
        return f(*args, **kwargs)
    return decorated_function

# Fun√ß√£o para verificar se √© administrador
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Voc√™ precisa fazer login para acessar esta p√°gina.', 'warning')
            return redirect(url_for('login'))
        
        # Usar get_user_service() em vez de user_service diretamente
        current_user_service = get_user_service()
        if current_user_service:
            user = current_user_service.get_user_by_id(session['user_id'])
            if not user or user.get('perfil', '').lower() != 'administrador':
                flash('Acesso negado. Apenas administradores podem acessar esta p√°gina.', 'danger')
                return redirect(url_for('index'))
        else:
            # Se n√£o h√° user_service, verificar se √© o admin de fallback
            if session.get('user_id') != 'admin-fallback':
                flash('Acesso negado. Sistema em modo de manuten√ß√£o.', 'danger')
                return redirect(url_for('index'))
        
        return f(*args, **kwargs)
    return decorated_function

# Rota de boas-vindas (n√£o protegida) - redireciona para login ou dashboard
@app.route('/welcome')
def welcome():
    """P√°gina de boas-vindas - redireciona baseado no status de autentica√ß√£o"""
    print("üè† WELCOME: Verificando status de autentica√ß√£o...")
    
    # Se j√° est√° logado, redirecionar para dashboard
    if 'user_id' in session and session.get('user_id'):
        print(f"üè† WELCOME: Usu√°rio j√° autenticado (ID: {session['user_id']}) - Redirecionando para dashboard")
        return redirect(url_for('index'))
    
    # Se n√£o est√° logado, redirecionar para login
    print("üè† WELCOME: Usu√°rio n√£o autenticado - Redirecionando para login")
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    print(f"üîê LOGIN: M√©todo da requisi√ß√£o: {request.method}")
    
    if request.method == 'POST':
        # Aceitar tanto username/password quanto usuario/senha
        username = request.form.get('username') or request.form.get('usuario')
        password = request.form.get('password') or request.form.get('senha')
        
        if not username or not password:
            flash('Por favor, preencha usu√°rio e senha.', 'error')
            return render_template('login.html')
        
        print(f"üîê LOGIN: Tentativa de login para usu√°rio: {username}")
        
        # Debug das vari√°veis de ambiente cr√≠ticas
        print(f"üîç DEBUG: GOOGLE_SHEETS_ID = {GOOGLE_SHEETS_ID}")
        print(f"üîç DEBUG: USE_GOOGLE_SHEETS = {USE_GOOGLE_SHEETS}")
        print(f"üîç DEBUG: USE_SERVICE_ACCOUNT = {USE_SERVICE_ACCOUNT}")
        
        # Tentar inicializar o user_service
        current_user_service = get_user_service()
        print(f"üîê LOGIN: user_service dispon√≠vel: {current_user_service is not None}")
        
        if current_user_service:
            print("üîê LOGIN: Chamando authenticate_user...")
            user = current_user_service.authenticate_user(username, password)
            print(f"üîê LOGIN: Resultado da autentica√ß√£o: {user}")
            
            if user:
                session['user_id'] = user['id']
                session['user_name'] = user['nome']
                session['user_perfil'] = user['perfil']
                session.permanent = True
                print(f"üîê LOGIN: Sess√£o criada - user_id: {session['user_id']}")
                flash(f'Bem-vindo(a), {user["nome"]}!', 'success')
                print("üîê LOGIN: Redirecionando para sele√ß√£o de sistemas...")
                return redirect(url_for('system_selection'))
            else:
                print("‚ùå LOGIN: Falha na autentica√ß√£o")
                flash('Usu√°rio ou senha incorretos.', 'error')
        else:
            print("‚ùå LOGIN: user_service n√£o dispon√≠vel")
            flash('Servi√ßo de autentica√ß√£o indispon√≠vel. Tente novamente.', 'error')
    else:
        print("üîê LOGIN: Exibindo formul√°rio de login (GET)")
    
    return render_template('login.html')

@app.route('/system-selection')
@login_required
def system_selection():
    """Tela de sele√ß√£o de sistemas ap√≥s o login"""
    print(f"üéØ SYSTEM_SELECTION: Usu√°rio {session.get('user_name')} acessando sele√ß√£o de sistemas")
    return render_template('system_selection.html')

@app.route('/get-user-systems')
@login_required
def get_user_systems():
    """Retorna os sistemas dispon√≠veis para o usu√°rio baseado em suas permiss√µes"""
    try:
        user_id = session.get('user_id')
        print(f"üéØ GET_USER_SYSTEMS: Buscando sistemas para usu√°rio {user_id}")
        
        # Buscar dados do usu√°rio para verificar permiss√µes
        current_user_service = get_user_service()
        if current_user_service:
            user_data = current_user_service.get_user_by_id(user_id)
            if user_data:
                # Sistemas dispon√≠veis baseado nas permiss√µes do usu√°rio
                available_systems = []
                
                # SIGEC sempre dispon√≠vel (m√≠nimo)
                available_systems.append('sigec')
                
                # Verificar se √© administrador - tem acesso a tudo
                user_perfil = user_data.get('perfil', '').lower()
                if user_perfil == 'administrador':
                    # Administradores t√™m acesso a todos os sistemas
                    available_systems = ['sigec', 'operacao-fiscal', 'gestao-operacional', 'gestao-financeira']
                    print(f"üîë GET_USER_SYSTEMS: Usu√°rio administrador - todos os sistemas dispon√≠veis")
                    
                    return {
                        'success': True,
                        'systems': available_systems,
                        'user_permissions': 'TOTAL_CADASTROS'  # Administradores t√™m permiss√£o total
                    }
                
                # Para usu√°rios n√£o-administradores, verificar permiss√µes espec√≠ficas
                user_systems = user_data.get('sistemas_acesso', 'sigec')
                if isinstance(user_systems, str):
                    user_systems = [s.strip() for s in user_systems.split(',') if s.strip()]
                
                for system in user_systems:
                    system_lower = system.lower().strip()
                    if system_lower == 'operacao-fiscal':
                        available_systems.append('operacao-fiscal')
                    elif system_lower == 'gestao-operacional':
                        available_systems.append('gestao-operacional')
                    elif system_lower == 'gestao-financeira':
                        available_systems.append('gestao-financeira')
                
                # Remover duplicatas mantendo ordem
                available_systems = list(dict.fromkeys(available_systems))
                
                print(f"üéØ GET_USER_SYSTEMS: Sistemas dispon√≠veis: {available_systems}")
                
                return {
                    'success': True,
                    'systems': available_systems,
                    'user_permissions': user_data.get('permissoes_sigec', 'VISUALIZADOR')
                }
            else:
                print("‚ùå GET_USER_SYSTEMS: Usu√°rio n√£o encontrado")
                return {'success': False, 'message': 'Usu√°rio n√£o encontrado'}, 404
        else:
            print("‚ùå GET_USER_SYSTEMS: Servi√ßo de usu√°rio indispon√≠vel")
            # Fallback: retornar apenas SIGEC
            return {
                'success': True,
                'systems': ['sigec'],
                'user_permissions': 'VISUALIZADOR'
            }
            
    except Exception as e:
        print(f"‚ùå GET_USER_SYSTEMS: Erro: {str(e)}")
        return {'success': False, 'message': 'Erro interno do servidor'}, 500

@app.route('/select-system', methods=['POST'])
@login_required
def select_system():
    """Processa a sele√ß√£o do sistema e redireciona para o sistema escolhido"""
    try:
        data = request.get_json()
        system_type = data.get('system')
        
        print(f"üéØ SELECT_SYSTEM: Usu√°rio {session.get('user_name')} selecionou sistema: {system_type}")
        
        # Armazenar o sistema selecionado na sess√£o
        session['selected_system'] = system_type
        
        # Definir URLs de redirecionamento baseado no sistema
        redirect_urls = {
            'sigec': url_for('index'),  # Dashboard principal atual
            'operacao-fiscal': '/operacao-fiscal',  # Sistema fiscal (placeholder)
            'gestao-operacional': 'https://app.powerbi.com/reportEmbed?reportId=8165cd63-42f4-44c1-8e4a-cad1a32d0e5b&autoAuth=true&ctid=0b754a09-0568-48fd-a100-8621a0bbd7ab',  # Power BI Gest√£o Operacional
            'gestao-financeira': 'https://app.powerbi.com/reportEmbed?reportId=ef9c9663-7cec-4c9a-8b57-c1a6c895057a&autoAuth=true&ctid=0b754a09-0568-48fd-a100-8621a0bbd7ab'  # Power BI Gest√£o Financeira
        }
        
        redirect_url = redirect_urls.get(system_type, url_for('index'))
        
        return {
            'success': True,
            'redirect_url': redirect_url,
            'message': f'Sistema {system_type} selecionado com sucesso!'
        }
        
    except Exception as e:
        print(f"‚ùå SELECT_SYSTEM: Erro ao processar sele√ß√£o: {str(e)}")
        return {
            'success': False,
            'message': 'Erro interno do servidor'
        }, 500

@app.route('/logout')
def logout():
    session.clear()
    flash('Logout realizado com sucesso.', 'info')
    return redirect(url_for('login'))

# === ROTAS PARA SISTEMAS ESPEC√çFICOS ===
@app.route('/operacao-fiscal')
@login_required
def operacao_fiscal():
    """Sistema de Opera√ß√£o Fiscal - Placeholder"""
    flash('Sistema de Opera√ß√£o Fiscal em desenvolvimento.', 'info')
    return render_template('under_construction.html', 
                         system_name='Opera√ß√£o Fiscal',
                         description='Sistema de controle fiscal e tribut√°rio')

# Removido: Rotas /gestao-operacional e /gestao-financeira (funcionalidade Power BI removida)

# === FUN√á√ïES AUXILIARES PARA SEGMENTOS E ATIVIDADES ===
def get_segmentos_list():
    """Retorna lista de segmentos cadastrados"""
    try:
        service = get_segmento_atividade_service()
        if service:
            segmentos = service.get_segmentos_ativos()
            return segmentos  # Retorna objetos completos com id e nome
        else:
            print("‚ö†Ô∏è Servi√ßo n√£o dispon√≠vel, usando lista padr√£o")
    except Exception as e:
        print(f"‚ùå Erro ao buscar segmentos: {e}")
    
    # Fallback para lista est√°tica
    return [
        {"id": 1, "nome": "COM√âRCIO VAREJISTA"},
        {"id": 2, "nome": "COM√âRCIO ATACADISTA"},
        {"id": 3, "nome": "PRESTA√á√ÉO DE SERVI√áOS"},
        {"id": 4, "nome": "IND√öSTRIA"},
        {"id": 5, "nome": "AGRONEG√ìCIO"},
        {"id": 6, "nome": "TECNOLOGIA"},
        {"id": 7, "nome": "EDUCA√á√ÉO"},
        {"id": 8, "nome": "SA√öDE"},
        {"id": 9, "nome": "ALIMENTA√á√ÉO"},
        {"id": 10, "nome": "OUTROS"}
    ]

def get_atividades_list():
    """Retorna lista de atividades principais cadastradas"""
    try:
        service = get_segmento_atividade_service()
        if service:
            atividades = service.get_atividades_ativas()
            return atividades  # Retorna objetos completos com id e nome
        else:
            print("‚ö†Ô∏è Servi√ßo n√£o dispon√≠vel, usando lista padr√£o")
    except Exception as e:
        print(f"‚ùå Erro ao buscar atividades: {e}")
    
    # Fallback para lista est√°tica
    return [
        {"id": 1, "nome": "VENDA DE ROUPAS E ACESS√ìRIOS"},
        {"id": 2, "nome": "CONSULTORIA EMPRESARIAL"},
        {"id": 3, "nome": "DESENVOLVIMENTO DE SOFTWARE"},
        {"id": 4, "nome": "SERVI√áOS CONT√ÅBEIS"},
        {"id": 5, "nome": "RESTAURANTE E LANCHONETE"},
        {"id": 6, "nome": "CL√çNICA M√âDICA"},
        {"id": 7, "nome": "ESCOLA DE ENSINO FUNDAMENTAL"},
        {"id": 8, "nome": "TRANSPORTE RODOVI√ÅRIO DE CARGAS"},
        {"id": 9, "nome": "CONSTRU√á√ÉO DE EDIF√çCIOS"},
        {"id": 10, "nome": "PRODU√á√ÉO AGR√çCOLA"}
    ]

def get_sistemas_list():
    """Retorna lista de sistemas utilizados dispon√≠veis"""
    # Lista est√°tica de sistemas mais utilizados
    return [
        {"id": 1, "nome": "FORTES"},
        {"id": 2, "nome": "DOM√çNIO"},
        {"id": 3, "nome": "SAGE"},
        {"id": 4, "nome": "ALTERDATA"},
        {"id": 5, "nome": "ECONET"},
        {"id": 6, "nome": "SISPAG"},
        {"id": 7, "nome": "FOLHAMATIC"},
        {"id": 8, "nome": "PROSOFT"},
        {"id": 9, "nome": "SISTEMA PR√ìPRIO"},
        {"id": 10, "nome": "PLANILHAS EXCEL"},
        {"id": 11, "nome": "SISTEMA ONLINE"},
        {"id": 12, "nome": "OUTROS"}
    ]

# === ROTAS PARA CADASTRO DE SEGMENTOS E ATIVIDADES ===
@app.route('/segmentos')
@login_required
def manage_segmentos():
    """P√°gina para gerenciar segmentos"""
    try:
        service = get_segmento_atividade_service()
        if service:
            segmentos = service.get_segmentos()
            return render_template('manage_segmentos.html', segmentos=segmentos)
        else:
            flash('Servi√ßo de segmentos indispon√≠vel', 'error')
            return redirect(url_for('index'))
    except Exception as e:
        print(f"‚ùå Erro ao carregar segmentos: {e}")
        flash('Erro ao carregar segmentos', 'error')
        return redirect(url_for('index'))

@app.route('/segmentos/create', methods=['POST'])
@login_required  
def create_segmento():
    """Criar novo segmento"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            flash('Servi√ßo de segmentos indispon√≠vel', 'error')
            return redirect(url_for('manage_segmentos'))
        
        nome_segmento = request.form.get('nome', '').strip()
        descricao = request.form.get('descricao', '').strip()
        codigo = request.form.get('codigo', '').strip()
        
        if not nome_segmento:
            flash('Nome do segmento √© obrigat√≥rio', 'error')
            return redirect(url_for('manage_segmentos'))
        
        segmento_data = {
            'nome': nome_segmento.upper(),
            'descricao': descricao,
            'codigo': codigo.upper() if codigo else '',
            'ativo': True,
            'criadoPor': session.get('user_name', 'Sistema')
        }
        
        if service.save_segmento(segmento_data):
            flash(f'Segmento "{nome_segmento}" criado com sucesso!', 'success')
        else:
            flash('Erro ao criar segmento', 'error')
            
        return redirect(url_for('manage_segmentos'))
    except Exception as e:
        print(f"‚ùå Erro ao criar segmento: {e}")
        flash('Erro ao criar segmento', 'error')
        return redirect(url_for('manage_segmentos'))

@app.route('/segmentos/edit/<segmento_id>', methods=['POST'])
@login_required
def edit_segmento(segmento_id):
    """Editar segmento existente"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            flash('Servi√ßo de segmentos indispon√≠vel', 'error')
            return redirect(url_for('manage_segmentos'))
        
        segmento = service.get_segmento(segmento_id)
        if not segmento:
            flash('Segmento n√£o encontrado', 'error')
            return redirect(url_for('manage_segmentos'))
        
        # Atualizar dados
        segmento['nome'] = request.form.get('nome', '').strip().upper()
        segmento['descricao'] = request.form.get('descricao', '').strip()
        segmento['codigo'] = request.form.get('codigo', '').strip().upper()
        segmento['ativo'] = request.form.get('ativo') == 'on'
        
        if not segmento['nome']:
            flash('Nome do segmento √© obrigat√≥rio', 'error')
            return redirect(url_for('manage_segmentos'))
        
        if service.save_segmento(segmento):
            flash(f'Segmento "{segmento["nome"]}" atualizado com sucesso!', 'success')
        else:
            flash('Erro ao atualizar segmento', 'error')
            
        return redirect(url_for('manage_segmentos'))
    except Exception as e:
        print(f"‚ùå Erro ao editar segmento: {e}")
        flash('Erro ao editar segmento', 'error')
        return redirect(url_for('manage_segmentos'))

@app.route('/segmentos/delete/<segmento_id>', methods=['POST'])
@login_required
def delete_segmento(segmento_id):
    """Excluir segmento (soft delete)"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            flash('Servi√ßo de segmentos indispon√≠vel', 'error')
            return redirect(url_for('manage_segmentos'))
        
        if service.delete_segmento(segmento_id):
            flash('Segmento exclu√≠do com sucesso!', 'success')
        else:
            flash('Erro ao excluir segmento', 'error')
            
        return redirect(url_for('manage_segmentos'))
    except Exception as e:
        print(f"‚ùå Erro ao excluir segmento: {e}")
        flash('Erro ao excluir segmento', 'error')
        return redirect(url_for('manage_segmentos'))

@app.route('/atividades')
@login_required
def manage_atividades():
    """P√°gina para gerenciar atividades principais"""
    try:
        service = get_segmento_atividade_service()
        if service:
            atividades = service.get_atividades()
            segmentos = service.get_segmentos_ativos()
            return render_template('manage_atividades.html', atividades=atividades, segmentos=segmentos)
        else:
            flash('Servi√ßo de atividades indispon√≠vel', 'error')
            return redirect(url_for('index'))
    except Exception as e:
        print(f"‚ùå Erro ao carregar atividades: {e}")
        flash('Erro ao carregar atividades', 'error')
        return redirect(url_for('index'))

@app.route('/atividades/create', methods=['POST'])
@login_required
def create_atividade():
    """Criar nova atividade principal"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            flash('Servi√ßo de atividades indispon√≠vel', 'error')
            return redirect(url_for('manage_atividades'))
        
        nome_atividade = request.form.get('nome', '').strip()
        codigo_cnae = request.form.get('codigoCnae', '').strip()
        descricao = request.form.get('descricao', '').strip()
        segmento_id = request.form.get('segmentoId', '').strip()
        
        if not nome_atividade:
            flash('Nome da atividade √© obrigat√≥rio', 'error')
            return redirect(url_for('manage_atividades'))
        
        if not segmento_id:
            flash('Segmento √© obrigat√≥rio', 'error')
            return redirect(url_for('manage_atividades'))
        
        atividade_data = {
            'nome': nome_atividade.upper(),
            'codigoCnae': codigo_cnae,
            'descricao': descricao,
            'segmentoId': segmento_id,
            'ativo': True,
            'criadoPor': session.get('user_name', 'Sistema')
        }
        
        if service.save_atividade(atividade_data):
            flash(f'Atividade "{nome_atividade}" criada com sucesso!', 'success')
        else:
            flash('Erro ao criar atividade', 'error')
            
        return redirect(url_for('manage_atividades'))
    except Exception as e:
        print(f"‚ùå Erro ao criar atividade: {e}")
        flash('Erro ao criar atividade', 'error')
        return redirect(url_for('manage_atividades'))

@app.route('/atividades/edit/<atividade_id>', methods=['POST'])
@login_required
def edit_atividade(atividade_id):
    """Editar atividade existente"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            flash('Servi√ßo de atividades indispon√≠vel', 'error')
            return redirect(url_for('manage_atividades'))
        
        atividade = service.get_atividade(atividade_id)
        if not atividade:
            flash('Atividade n√£o encontrada', 'error')
            return redirect(url_for('manage_atividades'))
        
        # Atualizar dados
        atividade['nome'] = request.form.get('nome', '').strip().upper()
        atividade['codigoCnae'] = request.form.get('codigoCnae', '').strip()
        atividade['descricao'] = request.form.get('descricao', '').strip()
        atividade['segmentoId'] = request.form.get('segmentoId', '').strip()
        atividade['ativo'] = request.form.get('ativo') == 'on'
        
        if not atividade['nome']:
            flash('Nome da atividade √© obrigat√≥rio', 'error')
            return redirect(url_for('manage_atividades'))
        
        if not atividade['segmentoId']:
            flash('Segmento √© obrigat√≥rio', 'error')
            return redirect(url_for('manage_atividades'))
        
        if service.save_atividade(atividade):
            flash(f'Atividade "{atividade["nome"]}" atualizada com sucesso!', 'success')
        else:
            flash('Erro ao atualizar atividade', 'error')
            
        return redirect(url_for('manage_atividades'))
    except Exception as e:
        print(f"‚ùå Erro ao editar atividade: {e}")
        flash('Erro ao editar atividade', 'error')
        return redirect(url_for('manage_atividades'))

@app.route('/atividades/delete/<atividade_id>', methods=['POST'])
@login_required
def delete_atividade(atividade_id):
    """Excluir atividade (soft delete)"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            flash('Servi√ßo de atividades indispon√≠vel', 'error')
            return redirect(url_for('manage_atividades'))
        
        if service.delete_atividade(atividade_id):
            flash('Atividade exclu√≠da com sucesso!', 'success')
        else:
            flash('Erro ao excluir atividade', 'error')
            
        return redirect(url_for('manage_atividades'))
    except Exception as e:
        print(f"‚ùå Erro ao excluir atividade: {e}")
        flash('Erro ao excluir atividade', 'error')
        return redirect(url_for('manage_atividades'))

# === ROTAS API PARA INTEGRA√á√ÉO ===

@app.route('/api/segmentos', methods=['GET'])
@login_required
def api_get_segmentos():
    """API para buscar segmentos"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            return jsonify({'error': 'Servi√ßo indispon√≠vel'}), 500
        
        apenas_ativos = request.args.get('ativos', 'true').lower() == 'true'
        termo_busca = request.args.get('busca', '').strip()
        
        if termo_busca:
            segmentos = service.search_segmentos(termo_busca)
        elif apenas_ativos:
            segmentos = service.get_segmentos_ativos()
        else:
            segmentos = service.get_segmentos()
        
        return jsonify({
            'success': True,
            'data': segmentos,
            'total': len(segmentos)
        })
    except Exception as e:
        print(f"‚ùå Erro na API de segmentos: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/atividades', methods=['GET'])
@login_required
def api_get_atividades():
    """API para buscar atividades"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            return jsonify({'error': 'Servi√ßo indispon√≠vel'}), 500
        
        segmento_id = request.args.get('segmento_id')
        apenas_ativos = request.args.get('ativos', 'true').lower() == 'true'
        termo_busca = request.args.get('busca', '').strip()
        
        if termo_busca:
            atividades = service.search_atividades(termo_busca, segmento_id)
        elif apenas_ativos:
            atividades = service.get_atividades_ativas(segmento_id)
        else:
            atividades = service.get_atividades(segmento_id)
        
        return jsonify({
            'success': True,
            'data': atividades,
            'total': len(atividades)
        })
    except Exception as e:
        print(f"‚ùå Erro na API de atividades: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/segmentos/<segmento_id>', methods=['GET'])
@login_required
def api_get_segmento(segmento_id):
    """API para buscar um segmento espec√≠fico"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            return jsonify({'error': 'Servi√ßo indispon√≠vel'}), 500
        
        segmento = service.get_segmento(segmento_id)
        if not segmento:
            return jsonify({'error': 'Segmento n√£o encontrado'}), 404
        
        return jsonify({
            'success': True,
            'data': segmento
        })
    except Exception as e:
        print(f"‚ùå Erro na API de segmento: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/atividades/<atividade_id>', methods=['GET'])
@login_required
def api_get_atividade(atividade_id):
    """API para buscar uma atividade espec√≠fica"""
    try:
        service = get_segmento_atividade_service()
        if not service:
            return jsonify({'error': 'Servi√ßo indispon√≠vel'}), 500
        
        atividade = service.get_atividade(atividade_id)
        if not atividade:
            return jsonify({'error': 'Atividade n√£o encontrada'}), 404
        
        return jsonify({
            'success': True,
            'data': atividade
        })
    except Exception as e:
        print(f"‚ùå Erro na API de atividade: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/users')
@admin_required
def users():
    current_user_service = get_user_service()
    if current_user_service:
        users_list = current_user_service.list_users()
        return render_template('users.html', users=users_list)
    else:
        flash('Servi√ßo de usu√°rios indispon√≠vel.', 'error')
        return redirect(url_for('index'))

@app.route('/create_user', methods=['POST'])
@admin_required
def create_user():
    current_user_service = get_user_service()
    if current_user_service:
        nome = request.form['nome']
        email = request.form['email']
        usuario = request.form['usuario']
        senha = request.form['senha']
        perfil = request.form['perfil']
        
        # Novos campos para sistemas e permiss√µes
        sistemas_acesso = request.form.getlist('sistemas_acesso')  # Lista de sistemas selecionados
        if not sistemas_acesso:
            sistemas_acesso = ['sigec']  # SIGEC sempre dispon√≠vel
        sistemas_str = ','.join(sistemas_acesso)
        
        permissoes_sigec = request.form.get('permissoes_sigec', 'VISUALIZADOR')
        
        result = current_user_service.create_user(nome, email, usuario, senha, perfil, sistemas_str, permissoes_sigec)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de usu√°rios indispon√≠vel.', 'error')
    
    return redirect(url_for('users'))

@app.route('/edit_user', methods=['POST'])
@admin_required
def edit_user():
    current_user_service = get_user_service()
    if current_user_service:
        user_id = request.form['user_id']
        nome = request.form['nome']
        email = request.form['email']
        usuario = request.form['usuario']
        perfil = request.form['perfil']
        ativo = request.form['ativo']
        nova_senha = request.form.get('nova_senha', '').strip()
        
        # Novos campos para sistemas e permiss√µes
        sistemas_acesso = request.form.getlist('sistemas_acesso')
        if not sistemas_acesso:
            sistemas_acesso = ['sigec']  # SIGEC sempre dispon√≠vel
        sistemas_str = ','.join(sistemas_acesso)
        
        permissoes_sigec = request.form.get('permissoes_sigec', 'VISUALIZADOR')
        
        # Se nova senha foi fornecida, usa ela, sen√£o None
        senha_param = nova_senha if nova_senha else None
        
        result = current_user_service.update_user(user_id, nome, email, usuario, perfil, ativo, senha_param, sistemas_str, permissoes_sigec)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de usu√°rios indispon√≠vel.', 'error')
    
    return redirect(url_for('users'))

@app.route('/delete_user', methods=['POST'])
@admin_required
def delete_user():
    current_user_service = get_user_service()
    if current_user_service:
        user_id = request.form['user_id']
        
        result = current_user_service.delete_user(user_id)
        
        if result['success']:
            flash(result['message'], 'success')
        else:
            flash(result['message'], 'error')
    else:
        flash('Servi√ßo de usu√°rios indispon√≠vel.', 'error')
    
    return redirect(url_for('users'))

@app.route('/import')
@admin_required
def import_page():
    """P√°gina para importar clientes de planilha Excel"""
    return render_template('import.html')

@app.route('/import/upload', methods=['POST'])
@admin_required
def upload_and_import():
    """Processa upload e importa arquivo Excel com logs detalhados"""
    print("üì§ === INICIANDO UPLOAD E IMPORTA√á√ÉO APRIMORADA ===")
    
    import_logs = []
    import_stats = {'success': 0, 'errors': 0, 'total': 0, 'details': []}
    
    # Obter servi√ßo de importa√ß√£o
    import_service = get_import_service()
    print(f"üîß Import service obtido: {import_service is not None}")
    if import_service:
        print(f"‚úÖ Servi√ßo dispon√≠vel: {import_service.is_available()}")
    
    def add_log(message, level='info'):
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_entry = {'timestamp': timestamp, 'message': message, 'level': level}
        import_logs.append(log_entry)
        print(f"[{timestamp}] {level.upper()}: {message}")
    
    try:
        add_log("Iniciando processo de importa√ß√£o", "info")
        
        # Verificar se arquivo foi enviado
        if 'file' not in request.files:
            add_log("Erro: Nenhum arquivo foi enviado na requisi√ß√£o", "error")
            flash('Nenhum arquivo selecionado', 'error')
            return redirect(url_for('import_page'))
        
        file = request.files['file']
        add_log(f"Arquivo recebido: {file.filename}", "info")
        
        # Verificar se arquivo tem nome
        if file.filename == '':
            add_log("Erro: Nome do arquivo est√° vazio", "error")
            flash('Nenhum arquivo selecionado', 'error')
            return redirect(url_for('import_page'))
        
        # Verificar extens√£o do arquivo
        if not allowed_file(file.filename):
            add_log(f"Erro: Extens√£o inv√°lida para arquivo {file.filename}", "error")
            flash('Apenas arquivos .xlsx e .xls s√£o permitidos', 'error')
            return redirect(url_for('import_page'))
        
        add_log("Valida√ß√£o inicial do arquivo: APROVADA", "success")
        
        # Salvar arquivo temporariamente
        filename = secure_filename(file.filename)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{timestamp}_{filename}"
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        add_log(f"Salvando arquivo tempor√°rio: {filename}", "info")
        file.save(file_path)
        
        file_size = os.path.getsize(file_path)
        add_log(f"Arquivo salvo com sucesso ({file_size} bytes)", "success")
        
        # Validar estrutura do arquivo
        if import_service and import_service.is_available():
            add_log("Servi√ßo de importa√ß√£o dispon√≠vel", "success")
            add_log("Iniciando valida√ß√£o da estrutura do arquivo", "info")
            
            try:
                is_valid, validation_message = import_service.validate_excel_structure(file_path)
                
                if not is_valid:
                    add_log(f"Valida√ß√£o falhou: {validation_message}", "error")
                    # Remover arquivo
                    if os.path.exists(file_path):
                        os.remove(file_path)
                        add_log("Arquivo tempor√°rio removido", "info")
                    
                    flash(f'Estrutura do arquivo inv√°lida: {validation_message}', 'error')
                    return redirect(url_for('import_page'))
                
                add_log("Estrutura do arquivo: V√ÅLIDA", "success")
                add_log("Iniciando processo de importa√ß√£o dos dados", "info")
                
                # Executar importa√ß√£o
                sucessos, erros, lista_erros = import_service.import_from_excel(file_path)
                
                import_stats['success'] = sucessos
                import_stats['errors'] = erros
                import_stats['total'] = sucessos + erros
                import_stats['details'] = lista_erros
                
                add_log(f"Importa√ß√£o conclu√≠da: {sucessos} sucessos, {erros} erros", "info")
                
                # Remover arquivo tempor√°rio
                if os.path.exists(file_path):
                    os.remove(file_path)
                    add_log("Arquivo tempor√°rio removido", "info")
                
                # Mostrar resultados detalhados
                if sucessos > 0:
                    add_log(f"Clientes importados com sucesso: {sucessos}", "success")
                    flash(f'‚úÖ Importa√ß√£o conclu√≠da: {sucessos} clientes importados com sucesso!', 'success')
                
                if erros > 0:
                    add_log(f"Erros encontrados durante importa√ß√£o: {erros}", "warning")
                    flash(f'‚ö†Ô∏è {erros} erro(s) encontrado(s) - veja detalhes abaixo', 'warning')
                    
                    # Mostrar detalhes dos erros
                    for i, erro in enumerate(lista_erros[:10]):  # Limitar a 10 erros
                        add_log(f"Erro {i+1}: {erro}", "error")
                        flash(f'‚ùå {erro}', 'error')
                    
                    if len(lista_erros) > 10:
                        flash(f'... e mais {len(lista_erros) - 10} erro(s)', 'error')
                        add_log(f"Total de {len(lista_erros)} erros (mostrando apenas os primeiros 10)", "warning")
                
                if sucessos == 0 and erros == 0:
                    add_log("Nenhum cliente foi processado - arquivo pode estar vazio", "warning")
                    flash('Nenhum cliente foi processado', 'warning')
                
                # Log de resumo final
                add_log("=== RESUMO DA IMPORTA√á√ÉO ===", "info")
                add_log(f"Total de registros processados: {import_stats['total']}", "info")
                add_log(f"Sucessos: {import_stats['success']}", "success")
                add_log(f"Erros: {import_stats['errors']}", "error" if import_stats['errors'] > 0 else "info")
                
            except Exception as import_error:
                add_log(f"Erro durante valida√ß√£o/importa√ß√£o: {str(import_error)}", "error")
                # Remover arquivo
                if os.path.exists(file_path):
                    os.remove(file_path)
                    add_log("Arquivo tempor√°rio removido ap√≥s erro", "info")
                
                flash(f'Erro durante importa√ß√£o: {str(import_error)}', 'error')
                return redirect(url_for('import_page'))
        
        else:
            add_log("Servi√ßo de importa√ß√£o n√£o dispon√≠vel - depend√™ncias faltando", "error")
            # Remover arquivo
            if os.path.exists(file_path):
                os.remove(file_path)
                add_log("Arquivo tempor√°rio removido", "info")
            
            flash('Servi√ßo de importa√ß√£o n√£o dispon√≠vel. Pandas/OpenPyXL n√£o est√£o instalados.', 'error')
            return redirect(url_for('import_page'))
    
    except Exception as e:
        add_log(f"Erro cr√≠tico durante importa√ß√£o: {str(e)}", "error")
        print(f"‚ùå Erro cr√≠tico: {e}")
        flash(f'Erro cr√≠tico durante importa√ß√£o: {str(e)}', 'error')
        
        # Limpar arquivo se houver erro
        try:
            if 'file_path' in locals() and os.path.exists(file_path):
                os.remove(file_path)
                add_log("Arquivo tempor√°rio removido ap√≥s erro cr√≠tico", "info")
        except Exception as cleanup_error:
            add_log(f"Erro ao limpar arquivo tempor√°rio: {str(cleanup_error)}", "warning")
    
    finally:
        # Log final
        add_log("Processo de importa√ß√£o finalizado", "info")
        print("üì§ === IMPORTA√á√ÉO FINALIZADA ===")
        
        # Em um ambiente real, voc√™ poderia salvar os logs em sess√£o ou banco de dados
        # para mostrar na interface posteriormente
    
    return redirect(url_for('index'))
    
    return redirect(url_for('index'))

@app.route('/import/template')
@admin_required  
def download_template():
    """Baixa template Excel para importa√ß√£o"""
    try:
        # Verificar se openpyxl est√° dispon√≠vel
        try:
            from openpyxl import Workbook
            import io
        except ImportError as e:
            print(f"‚ùå OpenPyXL n√£o encontrado: {e}")
            # Fallback: criar template CSV
            return create_simple_template()
        
        print("‚úÖ OpenPyXL importado com sucesso")
        
        # Criar workbook
        wb = Workbook()
        ws = wb.active
        ws.title = "Clientes"
        
        # Cabe√ßalhos SIGEC - 8 Blocos Organizados
        headers = [
            # Bloco 1: Informa√ß√µes da Pessoa Jur√≠dica (13 campos obrigat√≥rios)
            'NOME DA EMPRESA', 'RAZ√ÉO SOCIAL NA RECEITA', 'NOME FANTASIA NA RECEITA', 
            'CNPJ', 'PERFIL', 'INSCRI√á√ÉO ESTADUAL', 'INSCRI√á√ÉO MUNICIPAL', 
            'ESTADO', 'CIDADE', 'REGIME FEDERAL', 'REGIME ESTADUAL', 'SEGMENTO', 'ATIVIDADE',
            
            # Bloco 2: Servi√ßos Prestados pela Control (12 campos)
            'SERVI√áO CT', 'SERVI√áO FS', 'SERVI√áO DP', 'SERVI√áO BPO FINANCEIRO', 
            'RESPONS√ÅVEL PELOS SERVI√áOS', 'DATA IN√çCIO DOS SERVI√áOS',
            'C√ìDIGO FORTES CT', 'C√ìDIGO FORTES FS', 'C√ìDIGO FORTES PS', 
            'C√ìDIGO DOM√çNIO', 'SISTEMA UTILIZADO', 'M√ìDULO SPED TRIER',
            
            # Bloco 3: Quadro Societ√°rio (6 campos)
            'S√ìCIO 1 NOME', 'S√ìCIO 1 CPF', 'S√ìCIO 1 DATA NASCIMENTO', 
            'S√ìCIO 1 ADMINISTRADOR', 'S√ìCIO 1 COTAS', 'S√ìCIO 1 RESPONS√ÅVEL LEGAL',
            
            # Bloco 4: Contatos (10 campos b√°sicos + contatos detalhados)
            'TELEFONE FIXO', 'TELEFONE CELULAR', 'WHATSAPP', 
            'EMAIL PRINCIPAL', 'EMAIL SECUND√ÅRIO', 'RESPONS√ÅVEL IMEDIATO',
            'EMAILS DOS S√ìCIOS', 'CONTATO CONTADOR', 'TELEFONE CONTADOR', 'EMAIL CONTADOR',
            
            # Contatos Detalhados (at√© 10 contatos com 4 campos cada = 40 campos)
            'CONTATO_1_NOME', 'CONTATO_1_CARGO', 'CONTATO_1_TELEFONE', 'CONTATO_1_EMAIL',
            'CONTATO_2_NOME', 'CONTATO_2_CARGO', 'CONTATO_2_TELEFONE', 'CONTATO_2_EMAIL',
            'CONTATO_3_NOME', 'CONTATO_3_CARGO', 'CONTATO_3_TELEFONE', 'CONTATO_3_EMAIL',
            'CONTATO_4_NOME', 'CONTATO_4_CARGO', 'CONTATO_4_TELEFONE', 'CONTATO_4_EMAIL',
            'CONTATO_5_NOME', 'CONTATO_5_CARGO', 'CONTATO_5_TELEFONE', 'CONTATO_5_EMAIL',
            
            # Bloco 5: Sistemas e Acessos (7 campos)
            'SISTEMA PRINCIPAL', 'VERS√ÉO DO SISTEMA', 'C√ìDIGO ACESSO SIMPLES NACIONAL',
            'CPF/CNPJ PARA ACESSO', 'PORTAL CLIENTE ATIVO', 'INTEGRA√á√ÉO DOM√çNIO', 'SISTEMA ONVIO',
            
            # Bloco 6: Senhas e Credenciais (20 campos)
            'ACESSO ISS', 'SENHA ISS', 'ACESSO SEFIN', 'SENHA SEFIN', 
            'ACESSO SEUMA', 'SENHA SEUMA', 'ACESSO EMPWEB', 'SENHA EMPWEB',
            'ACESSO FAP/INSS', 'SENHA FAP/INSS', 'ACESSO CRF', 'SENHA CRF',
            'EMAIL GESTOR', 'SENHA EMAIL GESTOR', 'ANVISA GESTOR', 'ANVISA EMPRESA',
            'ACESSO IBAMA', 'SENHA IBAMA', 'ACESSO SEMACE', 'SENHA SEMACE',
            
            # Bloco 7: Procura√ß√µes (12 campos)
            'PROCURA√á√ÉO RFB', 'DATA PROCURA√á√ÉO RFB', 'PROCURA√á√ÉO RECEITA ESTADUAL', 'DATA PROCURA√á√ÉO RC',
            'PROCURA√á√ÉO CAIXA ECON√îMICA', 'DATA PROCURA√á√ÉO CX', 'PROCURA√á√ÉO PREVID√äNCIA SOCIAL', 'DATA PROCURA√á√ÉO SW',
            'PROCURA√á√ÉO MUNICIPAL', 'DATA PROCURA√á√ÉO MUNICIPAL', 'OUTRAS PROCURA√á√ïES', 'OBSERVA√á√ïES PROCURA√á√ïES',
            
            # Bloco 8: Observa√ß√µes e Dados Adicionais (12 campos)
            'OBSERVA√á√ïES GERAIS', 'TAREFAS VINCULADAS', 'STATUS DO CLIENTE',
            '√öLTIMA ATUALIZA√á√ÉO', 'RESPONS√ÅVEL ATUALIZA√á√ÉO', 'PRIORIDADE',
            'TAGS/CATEGORIAS', 'HIST√ìRICO DE ALTERA√á√ïES'
        ]
        
        # Dados de exemplo SIGEC
        example_data = [
            # Bloco 1: Informa√ß√µes da Pessoa Jur√≠dica
            'EMPRESA EXEMPLO LTDA', 'EMPRESA EXEMPLO LTDA', 'Exemplo Empresa', 
            '12.345.678/0001-99', 'LUCRO PRESUMIDO', '123456789', '987654321', 
            'CE', 'FORTALEZA', 'LUCRO PRESUMIDO', 'NORMAL', 'COM√âRCIO', 'VENDA DE PRODUTOS',
            
            # Bloco 2: Servi√ßos Prestados pela Control
            'SIM', 'SIM', 'N√ÉO', 'SIM', 
            'Jo√£o da Silva', '2024-01-01',
            '12345', '67890', '', 
            'DOM123', 'FORTES', 'COMPLETO',
            
            # Bloco 3: Quadro Societ√°rio
            'JO√ÉO DA SILVA', '123.456.789-00', '1980-01-01', 
            'SIM', '100%', 'SIM',
            
            # Bloco 4: Contatos
            '(85) 3333-4444', '(85) 99999-8888', '(85) 99999-8888', 
            'teste@empresa.com', 'contato@empresa.com', 'Maria Santos',
            'joao@empresa.com', 'Contador ABC', '(85) 3333-5555', 'contador@abc.com',
            
            # Bloco 5: Sistemas e Acessos
            'FORTES', '2024.1', 'SN123456',
            '12345678000190', 'SIM', 'SIM', 'N√ÉO',
            
            # Bloco 6: Senhas e Credenciais
            'usuario123', 'senha123', 'sefin123', 'senha456', 
            'seuma123', 'senha789', 'empweb123', 'senha999',
            'fap123', 'senha000', 'crf123', 'senha111',
            'gestor@empresa.com', 'senha222', 'anvisa123', 'empresa123',
            'ibama123', 'senha333', 'semace123', 'senha444',
            
            # Bloco 7: Procura√ß√µes
            'SIM', '2024-01-15', 'SIM', '2024-01-20',
            'N√ÉO', '', 'SIM', '2024-02-01',
            'SIM', '2024-02-05', 'Procura√ß√£o JUCEC', 'Todas v√°lidas',
            
            # Bloco 8: Observa√ß√µes e Dados Adicionais
            'Cliente em dia com obriga√ß√µes', '5', 'ATIVO',
            '2024-01-01', 'Sistema', 'ALTA',
            'VIP,PREMIUM', 'Cliente cadastrado via sistema'
        ]
        
        # Escrever cabe√ßalhos
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # Escrever exemplo
        for col, value in enumerate(example_data, 1):
            ws.cell(row=2, column=col, value=value)
        
        # Salvar em buffer
        buffer = io.BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        template_filename = f'template_importacao_clientes_{timestamp}.xlsx'
        
        from flask import send_file
        
        return send_file(
            buffer,
            as_attachment=True, 
            download_name=template_filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar template: {e}")
        flash(f'Erro ao gerar template: {str(e)}', 'error')
        return redirect(url_for('import_page'))

def create_simple_template():
    """Cria template simples sem pandas como fallback"""
    try:
        import csv
        import io
        from flask import Response
        
        # Dados do template em formato CSV
        csv_data = [
            ['NOME DA EMPRESA', 'CT', 'FS', 'DP', 'COD. FORTES CT', 'COD. FORTES FS', 'COD. FORTES PS', 'COD. DOM√çNIO', 'SISTEMA UTILIZADO', 'M√ìDULO SPED TRIER', 'RAZ√ÉO SOCIAL NA RECEITA', 'NOME FANTASIA NA RECEITA', 'CNPJ', 'INSC. EST.', 'INSC. MUN.', 'SEGMENTO', 'ATIVIDADE', 'TRIBUTA√á√ÉO', 'PERFIL', 'CIDADE', 'DONO / RESP.', 'COD. ACESSO SIMPLES', 'CPF OU CNPJ', 'ACESSO ISS', 'ACESSO SEFIN', 'ACESSO SEUMA', 'ACESSO EMP. WEB', 'SENHA EMP. WEB', 'ACESSO FAP/INSS', 'ACESSO CRF', 'EMAIL GESTOR', 'ANVISA GESTOR', 'ANVISA EMPRESA', 'ACESSO IBAMA', 'ACESSO SEMACE', 'SENHA SEMACE', 'PROC. RC', 'PROC. CX', 'PROC. SW', 'M√äS/ANO DE  IN√çCIO', 'RESPONS√ÅVEL IMEDIATO', 'TELEFONE FIXO', 'TELEFONE CELULAR', 'E-MAILS', 'S√ìCIO', 'S√ìCIO.1', 'S√ìCIO.2', 'S√ìCIO.3'],
            ['Exemplo Empresa Ltda', 'SIM', 'NAO', 'NAO', '123', '456', '789', '999', 'Sistema XYZ', 'M√≥dulo ABC', 'EXEMPLO EMPRESA LTDA', 'Exemplo Empresa', '12.345.678/0001-99', '123456789', '987654321', 'COM√âRCIO', 'VAREJO', 'SIMPLES', 'A', 'FORTALEZA', 'Jo√£o Silva', 'ABC123', '123.456.789-00', 'usuario123', 'senha123', 'acesso123', 'web123', 'senha456', 'fap123', 'crf123', 'gestor@empresa.com', 'anvisa123', 'empresa123', 'ibama123', 'semace123', 'senha789', 'OK', 'OK', 'OK', '01/2024', 'Jo√£o Silva', '(85) 3333-4444', '(85) 99999-8888', 'contato@empresa.com', 'Jo√£o Silva', 'Maria Silva', '', '']
        ]
        
        # Criar CSV em mem√≥ria
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerows(csv_data)
        
        # Converter para bytes
        csv_bytes = output.getvalue().encode('utf-8-sig')  # BOM para Excel
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'template_importacao_clientes_{timestamp}.csv'
        
        return Response(
            csv_bytes,
            mimetype='text/csv',
            headers={'Content-Disposition': f'attachment; filename={filename}'}
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao criar template CSV: {e}")
        flash('Erro ao gerar template. Crie manualmente um arquivo Excel com as colunas necess√°rias.', 'error')
        return redirect(url_for('import_page'))

# Removido: Se√ß√£o completa de ROTAS DE RELAT√ìRIOS (funcionalidade Power BI removida)

def calculate_dashboard_stats(clients):
    """Calcula estat√≠sticas para o dashboard baseado nos dados SIGEC"""
    stats = {
        'total_clientes': len(clients),
        'clientes_ativos': 0,
        'empresas': 0,
        'domesticas': 0,
        'mei': 0,
        'simples_nacional': 0,
        'lucro_presumido': 0,
        'lucro_real': 0,
        'ct': 0,
        'fs': 0,
        'dp': 0,
        'bpo': 0
    }
    
    for client in clients:
        # Contadores b√°sicos
        if client.get('ativo', True):
            stats['clientes_ativos'] += 1
        
        # Servi√ßos
        if client.get('ct', False):
            stats['ct'] += 1
        if client.get('fs', False):
            stats['fs'] += 1
        if client.get('dp', False):
            stats['dp'] += 1
        if client.get('bpoFinanceiro', False):
            stats['bpo'] += 1
        
        # Categoriza√ß√£o por regime federal (SIGEC)
        regime = str(client.get('regimeFederal', '')).upper().strip()
        perfil = str(client.get('perfil', '')).upper().strip()
        
        # MEI - Microempreendedor Individual
        if 'MEI' in regime or 'MICROEMPRESARIO' in perfil or 'INDIVIDUAL' in perfil:
            stats['mei'] += 1
        # Simples Nacional
        elif 'SIMPLES' in regime or 'SN' in regime:
            stats['simples_nacional'] += 1
        # Lucro Presumido
        elif 'PRESUMIDO' in regime or 'LP' in regime:
            stats['lucro_presumido'] += 1
        # Lucro Real
        elif 'REAL' in regime or 'LR' in regime:
            stats['lucro_real'] += 1
        # Dom√©sticas - identificar por perfil ou atividade
        elif 'DOMESTICA' in perfil or 'EMPREGADA' in perfil:
            stats['domesticas'] += 1
        else:
            # Demais casos consideramos como empresas
            stats['empresas'] += 1
    
    return stats

def calculate_dashboard_stats_optimized(clients):
    """Vers√£o otimizada para ambientes com pouca mem√≥ria"""
    if not clients:
        return {
            'total_clientes': 0, 'clientes_ativos': 0, 'empresas': 0, 
            'domesticas': 0, 'mei': 0, 'simples_nacional': 0,
            'lucro_presumido': 0, 'lucro_real': 0,
            'ct': 0, 'fs': 0, 'dp': 0, 'bpo': 0
        }
    
    # Inicializar contadores
    stats = {
        'total_clientes': len(clients),
        'clientes_ativos': 0,
        'empresas': 0,
        'domesticas': 0,
        'mei': 0,
        'simples_nacional': 0,
        'lucro_presumido': 0,
        'lucro_real': 0,
        'ct': 0,
        'fs': 0,
        'dp': 0,
        'bpo': 0
    }
    
    # Processar em lotes para economizar mem√≥ria
    batch_size = get_optimized_batch_size() if MEMORY_OPTIMIZER_AVAILABLE else 50
    
    for i in range(0, len(clients), batch_size):
        batch = clients[i:i+batch_size]
        
        for client in batch:
            # Contadores b√°sicos (apenas campos essenciais)
            if client.get('ativo', True):
                stats['clientes_ativos'] += 1
            
            # Servi√ßos b√°sicos
            if client.get('ct'):
                stats['ct'] += 1
            if client.get('fs'):
                stats['fs'] += 1
            if client.get('dp'):
                stats['dp'] += 1
            if client.get('bpoFinanceiro'):
                stats['bpo'] += 1
            
            # Categoriza√ß√£o simplificada (menos processamento de string)
            regime = client.get('regimeFederal', '')
            if regime:
                regime_upper = regime.upper()
                if 'MEI' in regime_upper:
                    stats['mei'] += 1
                elif 'SIMPLES' in regime_upper:
                    stats['simples_nacional'] += 1
                elif 'PRESUMIDO' in regime_upper:
                    stats['lucro_presumido'] += 1
                elif 'REAL' in regime_upper:
                    stats['lucro_real'] += 1
                else:
                    stats['empresas'] += 1
            else:
                stats['empresas'] += 1
        
        # Limpeza de mem√≥ria ap√≥s cada lote
        if os.environ.get('FLASK_ENV') == 'production':
            gc.collect()
    
    return stats

@app.route('/api/users')
@admin_required
def get_users():
    """API para obter lista de usu√°rios dispon√≠veis"""
    user_svc = get_user_service()
    if user_svc:
        users = user_svc.get_available_users()
        return jsonify({'users': users})
    else:
        return jsonify({'users': ['todos', 'admin', 'usuario']})

@app.route('/api/memory-status')
@admin_required  
def memory_status():
    """API para monitorar uso de mem√≥ria em produ√ß√£o"""
    try:
        # Usar monitor ultra-otimizado se dispon√≠vel
        try:
            from ultra_memory_monitor import get_memory_status
            memory_info = get_memory_status()
        except ImportError:
            # Fallback para m√©todo b√°sico
            memory_info = {
                'timestamp': datetime.now().isoformat(),
                'environment': os.environ.get('FLASK_ENV', 'development'),
                'python_version': sys.version.split()[0],
                'monitoring': False
            }
            
            # Tentar obter info b√°sica de mem√≥ria
            try:
                import psutil
                process = psutil.Process()
                memory_info.update({
                    'memory_mb': round(process.memory_info().rss / 1024 / 1024, 1),
                    'memory_percent': round(process.memory_percent(), 1),
                    'cpu_percent': round(process.cpu_percent(), 1),
                    'threads': process.num_threads(),
                })
                
                # Alertas baseados nos limites do Render (512MB)
                memory_mb = memory_info['memory_mb']
                if memory_mb > 450:
                    memory_info['alert'] = 'CRITICAL - Pr√≥ximo do limite de 512MB'
                    memory_info['alert_level'] = 'danger'
                elif memory_mb > 350:
                    memory_info['alert'] = 'WARNING - Uso de mem√≥ria elevado'
                    memory_info['alert_level'] = 'warning'
                else:
                    memory_info['alert'] = 'OK - Uso de mem√≥ria normal'
                    memory_info['alert_level'] = 'success'
                    
            except ImportError:
                memory_info['memory_mb'] = 'N/A (psutil n√£o dispon√≠vel)'
                memory_info['alert'] = 'Monitoramento limitado'
                memory_info['alert_level'] = 'info'
        
        # Informa√ß√µes sobre garbage collection
        memory_info['gc_counts'] = gc.get_count()
        memory_info['gc_threshold'] = gc.get_threshold()
        
        # Informa√ß√µes sobre lazy loading
        services_loaded = {
            'storage_service': storage_service is not None,
            'meeting_service': meeting_service is not None,
            'user_service': user_service is not None,
            # Removido: 'report_service': report_service is not None,
            'import_service': import_service is not None
        }
        memory_info['services_loaded'] = services_loaded
        memory_info['services_count'] = sum(services_loaded.values())
        
        # Configura√ß√µes de otimiza√ß√£o ativas
        optimizations = {
            'ultra_optimizer_available': MEMORY_OPTIMIZER_AVAILABLE,
            'max_content_length': app.config.get('MAX_CONTENT_LENGTH', 0) / 1024,  # KB
            'json_sort_keys': app.config.get('JSON_SORT_KEYS', True),
            'web_concurrency': os.environ.get('WEB_CONCURRENCY', 'auto'),
            'worker_connections': os.environ.get('WORKER_CONNECTIONS', 'auto'),
        }
        memory_info['optimizations'] = optimizations
        
        return jsonify(memory_info)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat(),
            'alert': 'ERROR - Falha ao obter status de mem√≥ria',
            'alert_level': 'danger'
        }), 500

@app.route('/api/force-cleanup')
@admin_required
def force_cleanup_api():
    """API para for√ßar limpeza de mem√≥ria"""
    try:
        # Usar monitor ultra se dispon√≠vel
        try:
            from ultra_memory_monitor import force_cleanup
            force_cleanup()
            message = "Limpeza ULTRA executada com sucesso"
        except ImportError:
            # Fallback para limpeza b√°sica
            if MEMORY_OPTIMIZER_AVAILABLE:
                UltraMemoryOptimizer.force_cleanup()
                message = "Limpeza b√°sica executada com sucesso"
            else:
                for _ in range(3):
                    gc.collect()
                message = "Limpeza manual executada"
        
        return jsonify({
            'success': True,
            'message': message,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/auth-status')
@admin_required
def auth_status():
    """API para diagn√≥stico de autentica√ß√£o Google Sheets"""
    try:
        diagnosis = {
            'timestamp': datetime.now().isoformat(),
            'environment': os.environ.get('FLASK_ENV', 'development'),
            'google_sheets_config': {
                'use_google_sheets': USE_GOOGLE_SHEETS,
                'use_service_account': USE_SERVICE_ACCOUNT,
                'use_oauth2': USE_OAUTH2,
                'sheets_id_configured': bool(GOOGLE_SHEETS_ID),
                'api_key_configured': bool(GOOGLE_SHEETS_API_KEY),
            }
        }
        
        # Verificar vari√°vel de ambiente do Service Account
        service_account_json = os.environ.get('GOOGLE_SERVICE_ACCOUNT_JSON')
        diagnosis['service_account'] = {
            'env_var_present': bool(service_account_json),
            'env_var_length': len(service_account_json) if service_account_json else 0,
            'is_valid_json': False,
            'project_id': None,
            'client_email': None
        }
        
        if service_account_json:
            try:
                credentials_info = json.loads(service_account_json)
                diagnosis['service_account'].update({
                    'is_valid_json': True,
                    'project_id': credentials_info.get('project_id'),
                    'client_email': credentials_info.get('client_email'),
                    'has_private_key': bool(credentials_info.get('private_key'))
                })
            except json.JSONDecodeError as e:
                diagnosis['service_account']['json_error'] = str(e)
        
        # Verificar status do storage service
        storage = get_storage_service()
        diagnosis['storage_service'] = {
            'type': type(storage).__name__,
            'is_fallback': hasattr(storage, 'is_fallback') and storage.is_fallback,
            'initialized': storage is not None
        }
        
        # Se estiver usando fallback, incluir informa√ß√µes adicionais
        if hasattr(storage, 'get_status_info'):
            diagnosis['fallback_info'] = storage.get_status_info()
        
        return jsonify(diagnosis)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat(),
            'status': 'ERROR - Falha no diagn√≥stico de autentica√ß√£o'
        }), 500

# Rota raiz p√∫blica - redireciona conforme autentica√ß√£o  
@app.route('/home')
def home():
    """P√°gina inicial p√∫blica - redireciona baseado no status de autentica√ß√£o"""
    print("üè† HOME: Verificando status de autentica√ß√£o...")
    
    # Se j√° est√° logado, redirecionar para dashboard principal
    if 'user_id' in session and session.get('user_id'):
        print(f"üè† HOME: Usu√°rio j√° autenticado (ID: {session['user_id']}) - Redirecionando para dashboard")
        return redirect(url_for('index'))
    
    # Se n√£o est√° logado, redirecionar para login
    print("üè† HOME: Usu√°rio n√£o autenticado - Redirecionando para login")
    return redirect(url_for('login'))

@app.route('/')
def index():
    """Rota raiz - verifica autentica√ß√£o e redireciona conforme necess√°rio"""
    print("üè† INDEX: Verificando status de autentica√ß√£o...")
    
    # Se n√£o est√° logado, redirecionar para login
    if 'user_id' not in session or not session.get('user_id'):
        print("üè† INDEX: Usu√°rio n√£o autenticado - Redirecionando para login")
        flash('Voc√™ precisa fazer login para acessar esta p√°gina.', 'warning')
        return redirect(url_for('login'))
    
    # Se est√° logado, continuar com a l√≥gica original
    print(f"üè† INDEX: Usu√°rio autenticado (ID: {session['user_id']}) - Carregando dashboard")
    print("üîç === ROTA INDEX CHAMADA (ULTRA-MEMORY OPTIMIZED) ===")
    
    # Obter filtro de status da URL (padr√£o: apenas ativos)
    status_filter = request.args.get('status', 'ativo')
    print(f"üîç Filtro de status aplicado: {status_filter}")
    
    try:
        print("üìä Carregando clientes com lazy loading EXTREMO...")
        
        # OTIMIZA√á√ÉO MEM√ìRIA: For√ßar limpeza antes de carregar
        if os.environ.get('FLASK_ENV') == 'production':
            gc.collect()
            gc.collect()  # Dupla passada
        
        # OTIMIZA√á√ÉO MEM√ìRIA: Usar lazy loading e limite ULTRA-restritivo
        storage = get_storage_service()
        
        # Verificar se √© poss√≠vel usar servi√ßo otimizado
        try:
            from services.memory_optimized_sheets_service import MemoryOptimizedGoogleSheetsService
            if hasattr(storage, 'spreadsheet_id'):
                print("üß† Usando servi√ßo ULTRA-otimizado para mem√≥ria")
                optimized_service = MemoryOptimizedGoogleSheetsService(
                    storage.spreadsheet_id, 
                    storage.range_name
                )
                clients = optimized_service.get_clients()
            else:
                clients = storage.get_clients()
        except ImportError:
            clients = storage.get_clients()
        
        # Aplicar filtro de status ANTES da limita√ß√£o de mem√≥ria
        original_count = len(clients)
        if status_filter == 'ativo':
            clients = [c for c in clients if c.get('ativo', True) and c.get('statusCliente', 'ativo').lower() == 'ativo']
            print(f"üîç Filtro ATIVO aplicado: {len(clients)} de {original_count} clientes")
        elif status_filter == 'inativo':
            clients = [c for c in clients if not c.get('ativo', True) or c.get('statusCliente', 'ativo').lower() == 'inativo']
            print(f"üîç Filtro INATIVO aplicado: {len(clients)} de {original_count} clientes")
        elif status_filter == 'todos':
            print(f"üîç Filtro TODOS aplicado: {len(clients)} clientes (sem filtro)")
        
        # Limite EXTREMO baseado na mem√≥ria dispon√≠vel
        max_clients = ULTRA_MEMORY_SETTINGS.get('MAX_ROWS_PER_REQUEST', 10) if MEMORY_OPTIMIZER_AVAILABLE else 10
        
        # Para produ√ß√£o, ser EXTREMAMENTE restritivo
        if os.environ.get('FLASK_ENV') == 'production':
            max_clients = min(max_clients, 5)  # M√°ximo 5 clientes em produ√ß√£o
            
        if len(clients) > max_clients:
            clients = clients[:max_clients]  # Truncar para economizar mem√≥ria extrema
            print(f"üß† EXTREMAMENTE LIMITADO a {max_clients} clientes (economia RAM cr√≠tica)")
        
        print(f"‚úÖ {len(clients)} clientes carregados")
        print(f"üíæ Mem√≥ria atual: {UltraMemoryOptimizer.get_memory_usage() if MEMORY_OPTIMIZER_AVAILABLE else 'N/A'}")
        
        # OTIMIZA√á√ÉO MEM√ìRIA: Stats calculadas corretamente
        try:
            # Calcular estat√≠sticas reais mantendo otimiza√ß√£o de mem√≥ria
            stats = calculate_dashboard_stats_optimized(clients)
            print(f"üìà Estat√≠sticas calculadas: {stats['total_clientes']} total, {stats['mei']} MEI, {stats['simples_nacional']} SN, {stats['lucro_presumido']} LP, {stats['lucro_real']} LR")
        except Exception as stats_error:
            print(f"‚ö†Ô∏è Erro ao calcular stats: {stats_error}")
            stats = {
                'total_clientes': len(clients), 
                'clientes_ativos': len(clients),  # Simplificado
                'empresas': len(clients), 'domesticas': 0, 'mei': 0, 'simples_nacional': 0,
                'lucro_presumido': 0, 'lucro_real': 0,
                'ct': 0, 'fs': 0, 'dp': 0, 'bpo': 0
            }
        
        # Garbage collection AGRESSIVO ap√≥s processamento
        if os.environ.get('FLASK_ENV') == 'production':
            # M√∫ltiplas passadas para garantir limpeza m√°xima
            for _ in range(3):
                gc.collect()
            print(f"üíæ Mem√≥ria p√≥s-GC-EXTREMO: {MemoryOptimizer.get_memory_usage() if MEMORY_OPTIMIZER_AVAILABLE else 'N/A'}")
        
        return render_template('index_modern.html', clients=clients, stats=stats, status_filter=status_filter)
        
    except Exception as e:
        print(f"‚ùå ERRO na rota index: {str(e)}")
        print(f"üîç Tipo do erro: {type(e).__name__}")
        print(f"üîç Status filter no except: {status_filter}")
        flash(f'Erro ao carregar clientes: {str(e)}', 'error')
        
        # Em caso de erro, criar stats vazias e for√ßar limpeza
        stats = {
            'total_clientes': 0, 'clientes_ativos': 0, 'empresas': 0,
            'domesticas': 0, 'mei': 0, 'simples_nacional': 0,
            'lucro_presumido': 0, 'lucro_real': 0,
            'ct': 0, 'fs': 0, 'dp': 0, 'bpo': 0
        }
        
        # Limpeza de emerg√™ncia
        if os.environ.get('FLASK_ENV') == 'production':
            for _ in range(5):
                gc.collect()
        
        return render_template('index_modern.html', clients=[], stats=stats, status_filter=status_filter)

@app.route('/test')
@login_required
def test():
    """Rota de teste simples"""
    return """
    <html>
    <head>
        <title>Teste</title>
        <style>
            body { font-family: Arial; padding: 20px; background: #f0f0f0; }
            .container { background: white; padding: 20px; border-radius: 8px; }
            h1 { color: #333; }
            .success { color: green; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ Aplica√ß√£o Flask Funcionando!</h1>
            <p class="success">‚úÖ Servidor est√° respondendo corretamente</p>
            <p>üìä Google Sheets configurado</p>
            <p>üîß Sistema h√≠brido ativo</p>
            <a href="/">‚Üê Voltar para p√°gina principal</a>
        </div>
    </body>
    </html>
    """

@app.route('/update-sheet-headers')
@admin_required
def update_sheet_headers():
    """Atualiza os cabe√ßalhos da planilha Google Sheets removendo campos n√£o utilizados"""
    try:
        print("üîß [ADMIN] Iniciando atualiza√ß√£o dos cabe√ßalhos da planilha...")
        
        # Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        
        # Verificar se √© o servi√ßo do Google Sheets
        if hasattr(storage, 'update_sheet_headers_for_removed_fields'):
            print("‚úÖ [ADMIN] Servi√ßo Google Sheets detectado, iniciando atualiza√ß√£o...")
            success = storage.update_sheet_headers_for_removed_fields()
            
            if success:
                message = """
                <html>
                <head>
                    <title>Atualiza√ß√£o Conclu√≠da</title>
                    <style>
                        body { font-family: Arial; padding: 20px; background: #f0f0f0; }
                        .container { background: white; padding: 20px; border-radius: 8px; max-width: 800px; margin: 0 auto; }
                        h1 { color: #28a745; }
                        .info { background: #e7f3ff; padding: 15px; border-radius: 5px; margin: 10px 0; }
                        .removed-fields { background: #fff3cd; padding: 15px; border-radius: 5px; margin: 10px 0; }
                        ul { text-align: left; }
                        .back-btn { background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>‚úÖ Planilha Google Sheets Atualizada!</h1>
                        
                        <div class="info">
                            <h3>üìä Resumo da Atualiza√ß√£o:</h3>
                            <p><strong>Colunas atuais:</strong> 86 (antes eram 97)</p>
                            <p><strong>Campos removidos:</strong> 11 campos n√£o utilizados</p>
                            <p><strong>Status:</strong> Planilha otimizada e sincronizada com o sistema</p>
                        </div>
                        
                        <div class="removed-fields">
                            <h3>üóëÔ∏è Campos Removidos do Bloco 2:</h3>
                            <ul>
                                <li>Sistema Principal</li>
                                <li>Vers√£o do Sistema</li>
                                <li>C√≥digo Acesso Simples</li>
                                <li>CPF/CNPJ para Acesso</li>
                                <li>Portal Cliente Ativo</li>
                                <li>Integra√ß√£o Dom√≠nio</li>
                                <li>Sistema Onvio</li>
                                <li>Onvio Cont√°bil</li>
                                <li>Onvio Fiscal</li>
                                <li>Onvio Pessoal</li>
                                <li>M√≥dulo SPED Trier</li>
                            </ul>
                        </div>
                        
                        <div class="info">
                            <h3>‚úÖ Benef√≠cios:</h3>
                            <ul>
                                <li>Planilha mais limpa e organizada</li>
                                <li>Melhor performance</li>
                                <li>Campos alinhados com o que realmente √© usado</li>
                                <li>Dados existentes preservados</li>
                            </ul>
                        </div>
                        
                        <a href="/" class="back-btn">‚Üê Voltar ao Painel</a>
                    </div>
                </body>
                </html>
                """
                return message
            else:
                return """
                <html>
                <body style="font-family: Arial; padding: 20px; text-align: center;">
                    <h1 style="color: #dc3545;">‚ùå Erro na Atualiza√ß√£o</h1>
                    <p>N√£o foi poss√≠vel atualizar os cabe√ßalhos da planilha.</p>
                    <p>Verifique os logs do sistema para mais detalhes.</p>
                    <a href="/" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">‚Üê Voltar</a>
                </body>
                </html>
                """
        else:
            return """
            <html>
            <body style="font-family: Arial; padding: 20px; text-align: center;">
                <h1 style="color: #ffc107;">‚ö†Ô∏è Servi√ßo N√£o Compat√≠vel</h1>
                <p>Esta fun√ß√£o s√≥ est√° dispon√≠vel quando usando Google Sheets como storage.</p>
                <p>Servi√ßo atual: {}</p>
                <a href="/" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">‚Üê Voltar</a>
            </body>
            </html>
            """.format(type(storage).__name__)
            
    except Exception as e:
        print(f"‚ùå [ADMIN] Erro ao atualizar cabe√ßalhos: {e}")
        return f"""
        <html>
        <body style="font-family: Arial; padding: 20px; text-align: center;">
            <h1 style="color: #dc3545;">‚ùå Erro</h1>
            <p>Erro ao atualizar cabe√ßalhos: {str(e)}</p>
            <a href="/" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">‚Üê Voltar</a>
        </body>
        </html>
        """

@app.route('/client/<client_id>')
@login_required
def view_client(client_id):
    try:
        print(f"üîç [VIEW] ===== CARREGANDO CLIENTE PARA VISUALIZA√á√ÉO =====")
        print(f"üîç [VIEW] ID solicitado: '{client_id}'")
        print(f"üîç [VIEW] Tipo do ID: {type(client_id)}")
        
        # CORRE√á√ÉO: Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        client = storage.get_client(client_id)
        print(f"üîç [VIEW] Cliente carregado: {client is not None}")
        
        if client:
            print(f"üîç [VIEW] Nome do cliente: {client.get('nomeEmpresa')}")
            print(f"üîç [VIEW] ID do cliente retornado: '{client.get('id')}'")
            
            # DEBUG: Verificar campos de s√≥cio dispon√≠veis
            print("üîç [VIEW] ===== DEBUG S√ìCIOS =====")
            for key in client.keys():
                if 'socio' in key.lower():
                    print(f"üîç [VIEW] Campo s√≥cio: {key} = {client[key]}")
            print("üîç [VIEW] ========================")
            
            # DEBUG: Verificar TODOS os campos do cliente
            print("üîç [VIEW] ===== DEBUG TODOS OS CAMPOS =====")
            print(f"üîç [VIEW] Total de campos: {len(client.keys())}")
            for key in sorted(client.keys()):
                value = client[key]
                if len(str(value)) > 50:
                    value_display = str(value)[:47] + "..."
                else:
                    value_display = value
                print(f"üîç [VIEW] {key}: {value_display}")
            print("üîç [VIEW] ===================================")
            
            # DEBUG ESPEC√çFICO: Testar os diferentes formatos de campo de s√≥cio
            print("üîç [VIEW] ===== TESTE ESPEC√çFICO S√ìCIOS =====")
            test_patterns = [
                'socio_1_nome', 'socio1_nome', 'socio1',
                'socio_1_cpf', 'socio1_cpf', 'socio1_Cpf',
                'S√ìCIO 1 NOME', 's√≥cio_1_nome'
            ]
            for pattern in test_patterns:
                if pattern in client:
                    print(f"üîç [VIEW] ENCONTRADO: {pattern} = {client[pattern]}")
                else:
                    print(f"üîç [VIEW] N√ÉO EXISTE: {pattern}")
            print("üîç [VIEW] ========================================")
            
            # CORRE√á√ÉO: Usar client_view_modern_new.html como template principal
            return render_template('client_view_modern_new.html', client=client)
        else:
            print(f"‚ùå [VIEW] Cliente {client_id} n√£o encontrado!")
            flash('Cliente n√£o encontrado', 'error')
            return redirect(url_for('index'))
    except Exception as e:
        print(f"‚ùå [VIEW] Erro ao carregar cliente: {str(e)}")
        import traceback
        print(f"‚ùå [VIEW] Traceback: {traceback.format_exc()}")
        flash(f'Erro ao carregar cliente: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/client/new')
@login_required
def new_client():
    segmentos = get_segmentos_list()
    atividades = get_atividades_list()
    sistemas = get_sistemas_list()
    return render_template('client_form_complete.html', client=None, segmentos=segmentos, atividades=atividades, sistemas=sistemas)

@app.route('/client/<client_id>/edit')
@login_required
def edit_client(client_id):
    try:
        print(f"üîç [EDIT] ===== CARREGANDO CLIENTE PARA EDI√á√ÉO =====")
        print(f"üîç [EDIT] ID solicitado: '{client_id}'")
        
        # CORRE√á√ÉO: Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        client = storage.get_client(client_id)
        print(f"üîç [EDIT] Cliente carregado: {client is not None}")
        
        if client:
            print(f"üîç [EDIT] Nome do cliente: {client.get('nomeEmpresa')}")
            print(f"üîç [EDIT] ID do cliente retornado: '{client.get('id')}'")
            print(f"üîç [EDIT] Tipo do ID: {type(client.get('id'))}")
            print(f"üîç [EDIT] Dados principais: {list(client.keys())[:10]}")
            
            # Garantir que o ID est√° correto
            if not client.get('id'):
                print(f"‚ö†Ô∏è [EDIT] Cliente n√£o tem ID! For√ßando ID = {client_id}")
                client['id'] = client_id
            
            segmentos = get_segmentos_list()
            atividades = get_atividades_list()
            sistemas = get_sistemas_list()
            return render_template('client_form_complete.html', client=client, segmentos=segmentos, atividades=atividades, sistemas=sistemas)
        else:
            print(f"‚ùå [EDIT] Cliente {client_id} n√£o encontrado!")
            flash('Cliente n√£o encontrado', 'error')
            return redirect(url_for('index'))
    except Exception as e:
        print(f"‚ùå [EDIT] Erro ao carregar cliente: {str(e)}")
        import traceback
        print(f"‚ùå [EDIT] Traceback: {traceback.format_exc()}")
        flash(f'Erro ao carregar cliente: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/client', methods=['POST'])
@login_required
def save_client():
    import re  # CORRE√á√ÉO 03: Import necess√°rio para normaliza√ß√£o CPF/CNPJ
    
    print("üîç === FUN√á√ÉO SAVE_CLIENT CHAMADA ===")
    print(f"üîç M√©todo da requisi√ß√£o: {request.method}")
    print(f"üîç Dados do form: {dict(request.form)}")
    
    # CORRE√á√ÉO DUPLICA√á√ÉO: Verificar ID primeiro
    client_id = request.form.get('id', '').strip()
    row_number = request.form.get('row_number')
    print(f"üîç ID do cliente (raw): '{request.form.get('id')}'")
    print(f"üîç ID do cliente (processed): '{client_id}'")
    print(f"üîç Opera√ß√£o: {'EDI√á√ÉO' if client_id else 'CRIA√á√ÉO'}")
    
    # DEBUG ESPEC√çFICO PARA CAMPOS DE C√ìDIGOS
    print("üîç === VERIFICANDO CAMPOS DE C√ìDIGOS ===")
    print(f"üîç codDominio (raw): '{request.form.get('codDominio')}'")
    print(f"üîç codFortesCt (raw): '{request.form.get('codFortesCt')}'") 
    print(f"üîç codFortesFs (raw): '{request.form.get('codFortesFs')}'")
    print(f"üîç codFortesPs (raw): '{request.form.get('codFortesPs')}'")
    print("üîç =======================================")
    
    try:
        # Validar dados obrigat√≥rios do Bloco 1
        nome_empresa = request.form.get('nomeEmpresa', '').strip()
        razao_social = request.form.get('razaoSocialReceita', '').strip()
        nome_fantasia = request.form.get('nomeFantasiaReceita', '').strip()
        cpf_cnpj = request.form.get('cpfCnpj', '').strip()
        # Compat: o formul√°rio usa 'perfilCliente'
        perfil = (request.form.get('perfilCliente') or request.form.get('perfil') or '').strip()
        insc_est = request.form.get('inscEst', '').strip()
        insc_mun = request.form.get('inscMun', '').strip()
        estado = request.form.get('estado', '').strip()
        cidade = request.form.get('cidade', '').strip()
        regime_federal = request.form.get('regimeFederal', '').strip()
        regime_estadual = request.form.get('regimeEstadual', '').strip()
        segmento = request.form.get('segmento', '').strip()
        atividade = request.form.get('atividade', '').strip()
        
        # DEBUG ESPEC√çFICO: Campos que n√£o est√£o salvando
        print("üîç === DEBUG CAMPOS ESPEC√çFICOS ===")
        print(f"üîç bpoFinanceiro (form): '{request.form.get('bpoFinanceiro')}'")
        print(f"üîç ct (form): '{request.form.get('ct')}'")
        print(f"üîç fs (form): '{request.form.get('fs')}'")
        print(f"üîç dp (form): '{request.form.get('dp')}'")
        print(f"üîç codDominio (form): '{request.form.get('codDominio')}'")
        print(f"üîç codFortesCt (form): '{request.form.get('codFortesCt')}'")
        print(f"üîç codFortesFs (form): '{request.form.get('codFortesFs')}'")
        print(f"üîç codFortesPs (form): '{request.form.get('codFortesPs')}'")
        print("üîç ====================================")
        
        # Verificar se h√° outras chaves no formul√°rio
        
        # Fun√ß√£o auxiliar para retornar ao formul√°rio com dados preservados
        def return_to_form_with_error(error_msg):
            flash(error_msg, 'error')
            # Construir dados do cliente a partir do formul√°rio para preservar
            form_data = {}
            for key in request.form:
                form_data[key] = request.form[key]
            
            # Se tem ID, √© edi√ß√£o
            if client_id:
                form_data['id'] = client_id
            
            segmentos = get_segmentos_list()
            atividades = get_atividades_list()
            sistemas = get_sistemas_list()
            return render_template('client_form_complete.html', 
                                 client=form_data, 
                                 segmentos=segmentos, 
                                 atividades=atividades,
                                 sistemas=sistemas)
        
        # Valida√ß√µes obrigat√≥rias - retornar ao formul√°rio em caso de erro
        if not nome_empresa:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Nome da empresa deve ser preenchido.')
        if not razao_social:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Raz√£o Social (Receita) deve ser preenchida.')
        if not nome_fantasia:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Nome Fantasia (Receita) deve ser preenchido.')
        if not cpf_cnpj:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: CPF/CNPJ deve ser preenchido.')
        if not perfil:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Perfil do cliente deve ser selecionado.')
        if not insc_est:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Inscri√ß√£o Estadual deve ser preenchida (ou "ISENTO").')
        if not insc_mun:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Inscri√ß√£o Municipal deve ser preenchida (ou "ISENTO").')
        if not estado:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Estado deve ser selecionado.')
        if not cidade:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Cidade deve ser preenchida.')
        if not regime_federal:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Regime Federal deve ser selecionado.')
        if not regime_estadual:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Regime Estadual deve ser selecionado.')
        if not segmento:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Segmento deve ser selecionado.')
        if not atividade:
            return return_to_form_with_error('‚ùå Campo obrigat√≥rio: Atividade Principal deve ser selecionada.')
        
        # CORRE√á√ÉO 02: Converter campos espec√≠ficos para MAI√öSCULAS
        nome_empresa = nome_empresa.upper()
        razao_social = razao_social.upper()
        nome_fantasia = nome_fantasia.upper()
        cidade = cidade.upper()
        insc_est = insc_est.upper()
        insc_mun = insc_mun.upper()
        
        # CORRE√á√ÉO 03: Normalizar CPF/CNPJ preservando zeros √† esquerda
        cpf_cnpj_digits = re.sub(r'\D', '', cpf_cnpj)  # Remove formata√ß√£o
        if len(cpf_cnpj_digits) == 11:
            # CPF - garantir 11 d√≠gitos com zeros √† esquerda
            cpf_cnpj_normalized = cpf_cnpj_digits.zfill(11)
            # Reformatar: 12345678900 -> 123.456.789-00
            cpf_cnpj = f"{cpf_cnpj_normalized[:3]}.{cpf_cnpj_normalized[3:6]}.{cpf_cnpj_normalized[6:9]}-{cpf_cnpj_normalized[9:11]}"
            print(f"üîç CPF normalizado com zeros √† esquerda: {cpf_cnpj}")
        elif len(cpf_cnpj_digits) == 14:
            # CNPJ - garantir 14 d√≠gitos com zeros √† esquerda
            cpf_cnpj_normalized = cpf_cnpj_digits.zfill(14)
            # Reformatar: 12345678000190 -> 12.345.678/0001-90
            cpf_cnpj = f"{cpf_cnpj_normalized[:2]}.{cpf_cnpj_normalized[2:5]}.{cpf_cnpj_normalized[5:8]}/{cpf_cnpj_normalized[8:12]}-{cpf_cnpj_normalized[12:14]}"
            print(f"üîç CNPJ normalizado: {cpf_cnpj}")
        else:
            print(f"üîç CPF/CNPJ mantido como recebido (tamanho: {len(cpf_cnpj_digits)}): {cpf_cnpj}")
        
        print(f"üîç Campos convertidos para mai√∫sculas - Nome: {nome_empresa}, Cidade: {cidade}")
        
        print(f"üîç Nome da empresa: {nome_empresa}")
        
        # CORRE√á√ÉO DUPLICA√á√ÉO: Garantir que o ID seja passado corretamente
        # Dados b√°sicos obrigat√≥rios - Bloco 1
        client_data = {
            'id': client_id if client_id else None,  # FIXADO: usar vari√°vel processada
            '_row_number': int(row_number) if row_number and row_number.isdigit() else None,
            
            # Bloco 1: Informa√ß√µes da Pessoa F√≠sica / Jur√≠dica
            'nomeEmpresa': nome_empresa,
            'razaoSocialReceita': razao_social,
            'nomeFantasiaReceita': nome_fantasia,
            'cpfCnpj': cpf_cnpj,
            'cnpj': cpf_cnpj,  # Manter compatibilidade com campo antigo
            'perfil': perfil,
            'perfilCliente': perfil,  # alias
            'inscEst': insc_est,
            'inscMun': insc_mun,
            'estado': estado,
            'cidade': cidade,
            'regimeFederal': regime_federal,
            'tributacao': regime_federal,  # Manter compatibilidade com campo antigo
            'regimeEstadual': regime_estadual,
            'segmento': segmento,
            'atividade': atividade,
            
            # Bloco 2: Servi√ßos Prestados pela Control
            'bpoFinanceiro': request.form.get('bpoFinanceiro') == 'on',
            'ct': request.form.get('ct') == 'on',
            'fs': request.form.get('fs') == 'on',
            'dp': request.form.get('dp') == 'on',
            'domestica': request.form.get('domestica', '').strip(),
            'dataInicioServicos': request.form.get('dataInicioServicos', '').strip(),
            'geraArquivoSped': request.form.get('geraArquivoSped', '').strip(),
            'sistemaUtilizado': request.form.get('sistemaUtilizado', '').strip(),
            
            # C√≥digos dos Sistemas (Bloco 2)
            'codigoDominio': request.form.get('codDominio', '').strip(),
            'codigoFortesCT': request.form.get('codFortesCt', '').strip(),
            'codigoFortesFS': request.form.get('codFortesFs', '').strip(),
            'codigoFortesPS': request.form.get('codFortesPs', '').strip(),
            
            # Bloco 4: Contatos
            'telefoneFixo': request.form.get('telefoneFixo', ''),
            'telefoneCelular': request.form.get('telefoneCelular', ''),
            'whatsapp': request.form.get('whatsapp', ''),
            'emailPrincipal': request.form.get('emailPrincipal', ''),
            'emailSecundario': request.form.get('emailSecundario', ''),
            'responsavelImediato': request.form.get('responsavelImediato', ''),
            'emailsSocios': request.form.get('emailsSocios', ''),
            'contatoContador': request.form.get('contatoContador', ''),
            'telefoneContador': request.form.get('telefoneContador', ''),
            'emailContador': request.form.get('emailContador', ''),
        }
        
        # DEBUG ESPEC√çFICO: Verificar valores processados
        print("üîç === DEBUG VALORES PROCESSADOS ===")
        print(f"üîç bpoFinanceiro (processado): {client_data.get('bpoFinanceiro')}")
        print(f"üîç ct (processado): {client_data.get('ct')}")
        print(f"üîç fs (processado): {client_data.get('fs')}")
        print(f"üîç dp (processado): {client_data.get('dp')}")
        print(f"üîç codigoDominio (processado): '{client_data.get('codigoDominio')}'")
        print(f"üîç codigoFortesCT (processado): '{client_data.get('codigoFortesCT')}'")
        print(f"üîç codigoFortesFS (processado): '{client_data.get('codigoFortesFS')}'")
        print(f"üîç codigoFortesPS (processado): '{client_data.get('codigoFortesPS')}'")
        print("üîç =====================================")
        
        # Processar dados dos s√≥cios dinamicamente
        print("üîç Processando dados dos s√≥cios...")
        for i in range(1, 11):  # Suporte para at√© 10 s√≥cios
            nome_socio = request.form.get(f'socio_{i}_nome', '').strip()
            if nome_socio:  # Se h√° nome, processar os dados do s√≥cio
                # CORRE√á√ÉO 02: Converter nome do s√≥cio para MAI√öSCULAS
                nome_socio = nome_socio.upper()
                
                client_data[f'socio_{i}_nome'] = nome_socio
                client_data[f'socio_{i}_cpf'] = request.form.get(f'socio_{i}_cpf', '').strip()
                client_data[f'socio_{i}_data_nascimento'] = request.form.get(f'socio_{i}_data_nascimento', '').strip()
                client_data[f'socio_{i}_participacao'] = request.form.get(f'socio_{i}_participacao', '').strip()
                client_data[f'socio_{i}_administrador'] = request.form.get(f'socio_{i}_administrador') in ['1', 'on']
                client_data[f'socio_{i}_resp_legal'] = request.form.get('representante_legal') == f'socio_{i}'
                client_data[f'socio_{i}_email'] = request.form.get(f'socio_{i}_email', '').strip()
                client_data[f'socio_{i}_telefone'] = request.form.get(f'socio_{i}_telefone', '').strip()
                
                # COMPATIBILIDADE: Adicionar tamb√©m campos sem underscore para templates antigos
                client_data[f'socio{i}_nome'] = nome_socio
                client_data[f'socio{i}_cpf'] = client_data[f'socio_{i}_cpf']
                client_data[f'socio{i}_administrador'] = client_data[f'socio_{i}_administrador']
                client_data[f'socio{i}'] = nome_socio  # Para templates mais antigos
                
                print(f"üîç S√≥cio {i}: {nome_socio} - CPF: {client_data[f'socio_{i}_cpf']} - Admin: {client_data[f'socio_{i}_administrador']}")
                print(f"üîç Compatibilidade: socio{i}_nome = {client_data[f'socio{i}_nome']}")
        
        # Processar dados dos contatos dinamicamente
        print("üîç Processando dados dos contatos...")
        for i in range(1, 11):  # Suporte para at√© 10 contatos
            nome_contato = request.form.get(f'contato_{i}_nome', '').strip()
            telefone_contato = request.form.get(f'contato_{i}_telefone', '').strip()
            email_contato = request.form.get(f'contato_{i}_email', '').strip()
            cargo_contato = request.form.get(f'contato_{i}_cargo', '').strip()
            
            if nome_contato or telefone_contato or email_contato:  # Se h√° pelo menos um dado, processar o contato
                client_data[f'contato_{i}_nome'] = nome_contato
                client_data[f'contato_{i}_telefone'] = telefone_contato
                client_data[f'contato_{i}_email'] = email_contato
                client_data[f'contato_{i}_cargo'] = cargo_contato
                print(f"üîç Contato {i}: {nome_contato} - Cargo: {cargo_contato} - Tel: {telefone_contato} - Email: {email_contato}")
        
        # Debug espec√≠fico para dados de contatos b√°sicos
        print("üîç === DEBUG DADOS DE CONTATOS B√ÅSICOS ===")
        contatos_basicos = {
            'telefoneFixo': request.form.get('telefoneFixo', ''),
            'telefoneCelular': request.form.get('telefoneCelular', ''),
            'whatsapp': request.form.get('whatsapp', ''),
            'emailPrincipal': request.form.get('emailPrincipal', ''),
            'emailSecundario': request.form.get('emailSecundario', ''),
            'responsavelImediato': request.form.get('responsavelImediato', ''),
            'emailsSocios': request.form.get('emailsSocios', ''),
            'contatoContador': request.form.get('contatoContador', ''),
            'telefoneContador': request.form.get('telefoneContador', ''),
            'emailContador': request.form.get('emailContador', ''),
        }
        for key, value in contatos_basicos.items():
            print(f"üîç {key}: '{value}'")
        
        # Debug espec√≠fico para senhas e credenciais
        print("üîç === DEBUG SENHAS E CREDENCIAIS ===")
        senhas_credenciais = {
            'cnpjAcessoSn': request.form.get('cnpjAcessoSn', ''),
            'cpfRepLegal': request.form.get('cpfRepLegal', ''),
            'codigoAcessoSn': request.form.get('codigoAcessoSn', ''),
            'senhaIss': request.form.get('senhaIss', ''),
            'senhaSefin': request.form.get('senhaSefin', ''),
            'senhaSeuma': request.form.get('senhaSeuma', ''),
            'acessoEmpWeb': request.form.get('acessoEmpWeb', ''),
            'senhaEmpWeb': request.form.get('senhaEmpWeb', ''),
            'anvisaEmpresa': request.form.get('anvisaEmpresa', ''),
            'senhaAnvisaEmpresa': request.form.get('senhaAnvisaEmpresa', ''),
            'anvisaGestor': request.form.get('anvisaGestor', ''),
            'senhaAnvisaGestor': request.form.get('senhaAnvisaGestor', ''),
            'acessoCrf': request.form.get('acessoCrf', ''),
            'senhaFapInss': request.form.get('senhaFapInss', ''),
        }
        for key, value in senhas_credenciais.items():
            if value:  # S√≥ mostrar se tiver valor
                print(f"üîç {key}: '{value[:3]}...' (tamanho: {len(value)})")
            else:
                print(f"üîç {key}: VAZIO")
        
        # Debug espec√≠fico para procura√ß√µes
        print("üîç === DEBUG PROCURA√á√ïES ===")
        procuracoes_debug = {
            'procReceita': request.form.get('procReceita'),
            'dataProcReceita': request.form.get('dataProcReceita', ''),
            'procDte': request.form.get('procDte'),
            'dataProcDte': request.form.get('dataProcDte', ''),
            'procCaixa': request.form.get('procCaixa'),
            'dataProcCaixa': request.form.get('dataProcCaixa', ''),
            'procEmpWeb': request.form.get('procEmpWeb'),
            'dataProcEmpWeb': request.form.get('dataProcEmpWeb', ''),
            'procDet': request.form.get('procDet'),
            'dataProcDet': request.form.get('dataProcDet', ''),
            'outrasProc': request.form.get('outrasProc', ''),
            'obsProcuracoes': request.form.get('obsProcuracoes', ''),
        }
        for key, value in procuracoes_debug.items():
            if 'proc' in key.lower() and key != 'outrasProc' and key != 'obsProcuracoes':
                # Para checkboxes, mostrar se chegou como 'on' ou None
                converted = value == 'on' if value else False
                print(f"üîç {key}: '{value}' -> {converted}")
            else:
                print(f"üîç {key}: '{value}'")
        
        # Continuar com outros dados
        client_data.update({
            
            # Bloco 5: Senhas e Credenciais (ORGANIZADO CONFORME TEMPLATE)
            # Linha 1: CNPJ Acesso Simples Nacional, CPF do Representante Legal, C√≥digo de Acesso Simples Nacional, Senha ISS
            'cnpjAcessoSn': request.form.get('cnpjAcessoSn', ''),
            'cpfRepLegal': request.form.get('cpfRepLegal', ''),
            'codigoAcessoSn': request.form.get('codigoAcessoSn', ''),
            'senhaIss': request.form.get('senhaIss', ''),
            
            # Linha 2: Senha SEFIN, Senha SEUMA, Acesso EmpWeb, Senha EmpWeb
            'senhaSefin': request.form.get('senhaSefin', ''),
            'senhaSeuma': request.form.get('senhaSeuma', ''),
            'acessoEmpWeb': request.form.get('acessoEmpWeb', ''),
            'senhaEmpWeb': request.form.get('senhaEmpWeb', ''),
            
            # Linha 3: Login ANVISA Empresa, Senha ANVISA Empresa, Login ANVISA Gestor, Senha ANVISA Gestor
            'anvisaEmpresa': request.form.get('anvisaEmpresa', ''),
            'senhaAnvisaEmpresa': request.form.get('senhaAnvisaEmpresa', ''),
            'anvisaGestor': request.form.get('anvisaGestor', ''),
            'senhaAnvisaGestor': request.form.get('senhaAnvisaGestor', ''),
            
            # Linha 4: Acesso CRF, Senha FAP/INSS
            'acessoCrf': request.form.get('acessoCrf', ''),
            'senhaFapInss': request.form.get('senhaFapInss', ''),
            
            # Bloco 6: Procura√ß√µes (CORRIGIDO - alinhado com formul√°rio)
            'procReceita': request.form.get('procReceita') == 'on',
            'dataProcReceita': request.form.get('dataProcReceita', ''),
            'procDte': request.form.get('procDte') == 'on',
            'dataProcDte': request.form.get('dataProcDte', ''),
            'procCaixa': request.form.get('procCaixa') == 'on',
            'dataProcCaixa': request.form.get('dataProcCaixa', ''),
            'procEmpWeb': request.form.get('procEmpWeb') == 'on',
            'dataProcEmpWeb': request.form.get('dataProcEmpWeb', ''),
            'procDet': request.form.get('procDet') == 'on',
            'dataProcDet': request.form.get('dataProcDet', ''),
            'outrasProc': request.form.get('outrasProc', ''),
            'obsProcuracoes': request.form.get('obsProcuracoes', ''),
            
            # Bloco 7: Observa√ß√µes e Dados Adicionais (apenas campos mantidos)
            'observacoes': request.form.get('observacoes', ''),
        })
        
        # CORRE√á√ÉO: Para statusCliente, usar valor do formul√°rio se fornecido
        if client_id:
            # Estamos editando - usar status do formul√°rio se fornecido, sen√£o preservar atual
            try:
                storage = get_storage_service()
                current_client = storage.get_client(client_id) if storage else None
                current_status = current_client.get('statusCliente', 'ativo') if current_client else 'ativo'
                
                # L√ìGICA CORRETA: Priorizar valor do formul√°rio
                form_status = request.form.get('statusCliente')
                if form_status:
                    client_data['statusCliente'] = form_status
                    print(f"üîç EDI√á√ÉO - Status do formul√°rio usado: '{form_status}'")
                else:
                    client_data['statusCliente'] = current_status
                    print(f"üîç EDI√á√ÉO - Status atual preservado: '{current_status}'")
                    
            except Exception as e:
                print(f"‚ùå Erro ao buscar status atual: {e}")
                client_data['statusCliente'] = request.form.get('statusCliente', 'ativo')
        else:
            # Cliente novo - padr√£o ativo
            client_data['statusCliente'] = request.form.get('statusCliente', 'ativo')
            print(f"üîç NOVO CLIENTE - Status padr√£o: {client_data['statusCliente']}")
        
        # Finalizar dados b√°sicos
        data_inicio_value = request.form.get('dataInicioServicos', '')
        
        # CORRE√á√ÉO 05: Validar e normalizar formato MM/AAAA
        if data_inicio_value:
            import re
            # Se cont√©m apenas d√≠gitos, aplicar formato MM/AAAA
            digits_only = ''.join(filter(str.isdigit, data_inicio_value))
            if len(digits_only) == 6:  # MMAAAA
                month = digits_only[:2]
                year = digits_only[2:]
                if 1 <= int(month) <= 12:
                    data_inicio_value = f"{month}/{year}"
                    print(f"üîç [CORRE√á√ÉO 05] Formato normalizado: '{data_inicio_value}'")
            elif re.match(r'^(0[1-9]|1[0-2])\/\d{4}$', data_inicio_value):
                print(f"üîç [CORRE√á√ÉO 05] Formato j√° correto: '{data_inicio_value}'")
            else:
                print(f"‚ö†Ô∏è [CORRE√á√ÉO 05] Formato inv√°lido: '{data_inicio_value}'")
        
        print(f"üîç [CORRE√á√ÉO 05] dataInicioServicos final: '{data_inicio_value}'")
        
        client_data.update({
            'ultimaAtualizacao': datetime.now().isoformat(),
            
            # Campos de compatibilidade (manter existentes)
            'dataInicioServicos': data_inicio_value,
            'mesAnoInicio': data_inicio_value,
        })
        
        # Regras complementares
        # Sincronizar statusCliente com ativo para compatibilidade (autom√°tico)
        status_cliente = client_data.get('statusCliente', 'ativo')
        client_data['ativo'] = status_cliente == 'ativo'
        
        # Aplicar regra Dom√©stica no backend (seguran√ßa): s√≥ permitido quando CPF completo (11 d√≠gitos)
        import re
        digits = re.sub(r'\D', '', client_data.get('cpfCnpj', ''))
        if len(digits) != 11:
            client_data['domestica'] = 'N√ÉO'
            print(f"üîç Dom√©stica for√ßada para N√ÉO - documento tem {len(digits)} d√≠gitos (‚â†11)")
        else:
            print(f"üîç Dom√©stica permitida - CPF v√°lido com {len(digits)} d√≠gitos")
        
        # CORRE√á√ÉO DUPLICA√á√ÉO: Melhor controle de cria√ß√£o vs edi√ß√£o
        # Usar client_id do formul√°rio para determinar opera√ß√£o, n√£o o ID gerado automaticamente
        if not client_id or client_id == '':
            print("üîç NOVO CLIENTE: N√£o incluir ID nos dados para for√ßar cria√ß√£o")
            client_data['criadoEm'] = datetime.now().isoformat()
            # IMPORTANTE: N√ÉO incluir ID nos dados para novo cliente - deixar o servi√ßo gerar
            if 'id' in client_data:
                del client_data['id']
        else:
            print(f"üîç EDITANDO CLIENTE: ID = {client_id}")
            client_data['id'] = client_id  # Usar o ID do formul√°rio
            # Para edi√ß√£o, sempre manter o ultimaAtualizacao
            client_data['ultimaAtualizacao'] = datetime.now().isoformat()
        
        print(f"üîç Cliente preparado: {client_data.get('nomeEmpresa')}")
        print(f"üîç ID final do cliente: {client_data.get('id')}")
        print(f"üîç Tipo de opera√ß√£o: {'EDI√á√ÉO' if client_data.get('id') else 'CRIA√á√ÉO'}")
        print("üîç Verificando conex√£o com storage_service...")
        
        # CORRE√á√ÉO: Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        if not storage:
            print("‚ùå storage_service n√£o est√° dispon√≠vel!")
            return return_to_form_with_error('Erro: Servi√ßo de armazenamento n√£o dispon√≠vel')
        
        print("üîç Chamando storage_service.save_client...")
        print(f"üîç client_data['id']: '{client_data.get('id')}'")
        print(f"üîç client_data['nomeEmpresa']: '{client_data.get('nomeEmpresa')}'")
        print(f"üîç Dados essenciais: ID={client_data.get('id')}, Nome={client_data.get('nomeEmpresa')}")
        
        success = storage.save_client(client_data)
        
        print(f"üîç Resultado do salvamento: {success}")
        
        if success:
            if client_data.get('id'):
                flash('Cliente atualizado com sucesso!', 'success')
                print("‚úÖ Flash message de atualiza√ß√£o adicionada")
                # Redirecionar para a p√°gina de visualiza√ß√£o do cliente para mostrar os dados atualizados
                return redirect(url_for('view_client', client_id=client_data.get('id')))
            else:
                flash('Cliente criado com sucesso!', 'success')
                print("‚úÖ Flash message de cria√ß√£o adicionada")
                # Para novo cliente, ir para p√°gina inicial j√° est√° bom
                return redirect(url_for('index'))
        else:
            # Em caso de erro no salvamento, retornar ao formul√°rio com dados preservados
            return return_to_form_with_error('Erro ao salvar cliente')
            
    except Exception as e:
        print(f"‚ùå EXCE√á√ÉO na fun√ß√£o save_client: {str(e)}")
        print(f"‚ùå Tipo da exce√ß√£o: {type(e).__name__}")
        import traceback
        print(f"‚ùå Traceback completo: {traceback.format_exc()}")
        
        # Em caso de exce√ß√£o, retornar ao formul√°rio com dados preservados
        return return_to_form_with_error(f'Erro ao salvar cliente: {str(e)}')

@app.route('/client/<client_id>/delete', methods=['POST'])
@login_required
def delete_client(client_id):
    try:
        # Verificar se o usu√°rio √© administrador
        if not session.get('user_perfil') or session.get('user_perfil').lower() != 'administrador':
            flash('Acesso negado. Apenas administradores podem excluir clientes.', 'danger')
            return redirect(url_for('view_client', client_id=client_id))
        
        # CORRE√á√ÉO: Usar get_storage_service() para lazy loading
        storage = get_storage_service()
        # Suportar dele√ß√£o direta por linha quando dispon√≠vel
        row_number = request.form.get('row_number')
        if row_number and hasattr(storage, 'delete_client_by_row'):
            try:
                row_number_int = int(row_number)
            except ValueError:
                row_number_int = None
            if row_number_int and row_number_int > 1:
                success = storage.delete_client_by_row(row_number_int)
            else:
                success = storage.delete_client(client_id)
        else:
            success = storage.delete_client(client_id)
        if success:
            flash('Cliente exclu√≠do com sucesso!', 'success')
        else:
            flash('Erro ao excluir cliente', 'error')
    except Exception as e:
        flash(f'Erro ao excluir cliente: {str(e)}', 'error')
    
    return redirect(url_for('index'))

@app.route('/client/<client_id>/meeting')
@login_required
def register_meeting(client_id):
    """P√°gina para registrar ata de reuni√£o com cliente"""
    try:
        client = storage_service.get_client(client_id)
        if client:
            return render_template('meeting_form.html', client=client)
        else:
            flash('Cliente n√£o encontrado', 'error')
            return redirect(url_for('index'))
    except Exception as e:
        flash(f'Erro ao carregar cliente: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/client/<client_id>/meeting', methods=['POST'])
@login_required
def save_meeting(client_id):
    """Salvar ata de reuni√£o"""
    try:
        # Busca o nome do cliente
        client = storage_service.get_client(client_id)
        client_name = client.get('nomeFantasiaReceita') or client.get('nomeEmpresa') if client else 'Cliente'
        
        meeting_data = {
            'client_id': client_id,
            'client_name': client_name,
            'date': request.form.get('meeting_date'),
            'time': request.form.get('meeting_time'),
            'participants': request.form.get('participants'),
            'topics': request.form.get('topics'),
            'decisions': request.form.get('decisions'),
            'next_steps': request.form.get('next_steps')
        }
        
        # Salva usando o servi√ßo de atas
        if meeting_service:
            meeting_id = meeting_service.save_meeting(meeting_data)
            if meeting_id:
                flash(f'‚úÖ Ata de reuni√£o {meeting_id} registrada com sucesso para {client_name}!', 'success')
            else:
                flash('‚ùå Erro ao salvar ata de reuni√£o', 'error')
        else:
            # Fallback - salva localmente (simula√ß√£o)
            flash(f'‚ö†Ô∏è Ata de reuni√£o registrada localmente para {client_name} (funcionalidade limitada)', 'warning')
        
    except Exception as e:
        flash(f'‚ùå Erro ao salvar ata de reuni√£o: {str(e)}', 'error')
        print(f"‚ùå Erro detalhado: {e}")
    
    return redirect(url_for('index'))

@app.route('/client/<client_id>/meetings')
@login_required
def view_client_meetings(client_id):
    """Visualizar todas as atas de um cliente"""
    try:
        client = storage_service.get_client(client_id)
        if not client:
            flash('Cliente n√£o encontrado', 'error')
            return redirect(url_for('index'))
        
        meetings = []
        if meeting_service:
            meetings = meeting_service.get_client_meetings(client_id)
        
        return render_template('client_meetings.html', client=client, meetings=meetings)
        
    except Exception as e:
        flash(f'Erro ao carregar atas do cliente: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/meetings')
@login_required
def all_meetings():
    """Visualizar todas as atas de reuni√£o"""
    try:
        meetings = []
        if meeting_service:
            meetings = meeting_service.get_all_meetings()
        
        return render_template('all_meetings.html', meetings=meetings)
        
    except Exception as e:
        flash(f'Erro ao carregar atas: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/debug-render')
def debug_render():
    """Rota de debug para verificar configura√ß√µes no Render"""
    try:
        import json
        import sys
        
        debug_info = {
            'timestamp': datetime.now().isoformat(),
            'python_version': sys.version,
            'environment': {}
        }
        
        # Verificar vari√°veis de ambiente
        env_vars = ['GOOGLE_SERVICE_ACCOUNT_JSON', 'GOOGLE_SHEETS_ID', 'FLASK_ENV']
        for var in env_vars:
            value = os.environ.get(var)
            if var == 'GOOGLE_SERVICE_ACCOUNT_JSON' and value:
                # N√£o expor credenciais completas
                debug_info['environment'][var] = f"Presente ({len(value)} chars)"
                try:
                    creds_info = json.loads(value)
                    debug_info['environment'][f'{var}_parsed'] = {
                        'project_id': creds_info.get('project_id', 'N/A'),
                        'client_email': creds_info.get('client_email', 'N/A'),
                        'keys_available': list(creds_info.keys())
                    }
                except:
                    debug_info['environment'][f'{var}_parsed'] = "Erro ao parsear JSON"
            else:
                debug_info['environment'][var] = value or "N√£o encontrada"
        
        # Testar importa√ß√µes
        debug_info['imports'] = {}
        try:
            from google.oauth2.service_account import Credentials
            debug_info['imports']['google_oauth2'] = "OK"
        except ImportError as e:
            debug_info['imports']['google_oauth2'] = f"ERRO: {e}"
        
        try:
            from googleapiclient.discovery import build
            debug_info['imports']['googleapiclient'] = "OK"
        except ImportError as e:
            debug_info['imports']['googleapiclient'] = f"ERRO: {e}"
        
        # Testar servi√ßo
        debug_info['service_test'] = {}
        try:
            if USE_GOOGLE_SHEETS and storage_service:
                debug_info['service_test']['storage_type'] = "Google Sheets"
                debug_info['service_test']['service_initialized'] = bool(storage_service.service)
                debug_info['service_test']['spreadsheet_id'] = storage_service.spreadsheet_id
                
                # Testar busca de clientes
                clients = storage_service.get_clients()
                debug_info['service_test']['clients_count'] = len(clients)
                
                if clients:
                    first_client = clients[0]
                    debug_info['service_test']['first_client'] = {
                        'name': first_client.get('nomeEmpresa', 'N/A'),
                        'id': first_client.get('id', 'N/A'),
                        'keys_count': len(first_client.keys())
                    }
            else:
                debug_info['service_test']['storage_type'] = "Local"
                
        except Exception as e:
            debug_info['service_test']['error'] = str(e)
        
        return jsonify(debug_info)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        })

@app.route('/debug-client/<client_id>')
def debug_client_search(client_id):
    """Rota espec√≠fica para debug de busca de cliente"""
    try:
        debug_info = {
            'timestamp': datetime.now().isoformat(),
            'client_id_received': client_id,
            'client_id_type': str(type(client_id)),
            'client_id_length': len(str(client_id)),
            'storage_type': 'Google Sheets' if USE_GOOGLE_SHEETS else 'Local'
        }
        
        # Teste 1: Buscar cliente espec√≠fico
        print(f"üîç [DEBUG_CLIENT] Buscando cliente: {client_id}")
        client = storage_service.get_client(client_id)
        debug_info['client_found'] = client is not None
        
        if client:
            debug_info['client_data'] = {
                'nome': client.get('nomeEmpresa', 'N/A'),
                'id': client.get('id', 'N/A'),
                'id_type': str(type(client.get('id'))),
                'fields_count': len(client.keys()),
                'has_cnpj': bool(client.get('cnpj')),
                'has_razao_social': bool(client.get('razaoSocialReceita'))
            }
        else:
            debug_info['client_data'] = None
            
            # Teste 2: Listar todos os clientes para comparar IDs
            all_clients = storage_service.get_clients()
            debug_info['total_clients'] = len(all_clients)
            debug_info['sample_client_ids'] = []
            
            for i, c in enumerate(all_clients[:10]):  # Primeiros 10
                debug_info['sample_client_ids'].append({
                    'index': i,
                    'name': c.get('nomeEmpresa', 'N/A'),
                    'id': c.get('id', 'N/A'),
                    'id_matches': str(c.get('id', '')).strip() == str(client_id).strip()
                })
        
        return jsonify(debug_info)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat(),
            'client_id': client_id
        })

if __name__ == '__main__':
    print("üöÄ Iniciando aplica√ß√£o Flask...")
    print(f"üìä Armazenamento: {'Google Sheets' if USE_GOOGLE_SHEETS else 'Local'}")
    app.run(debug=True, host='0.0.0.0', port=5000)


