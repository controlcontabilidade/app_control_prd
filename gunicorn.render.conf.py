# Configura√ß√£o Gunicorn ULTRA-OTIMIZADA para Render 512MB
# gunicorn.conf.py

import os
import multiprocessing

# Configura√ß√µes de worker ULTRA-conservadoras
workers = 1  # Apenas 1 worker para economizar mem√≥ria
worker_class = "sync"  # Sync √© mais eficiente em mem√≥ria
worker_connections = 25  # Reduzido drasticamente
max_requests = 50  # Reiniciar worker frequentemente
max_requests_jitter = 10  # Varia√ß√£o para evitar restart simult√¢neo

# Configura√ß√µes de timeout agressivas
timeout = 20  # Timeout baixo
keepalive = 1  # Keepalive m√≠nimo
graceful_timeout = 15  # Graceful timeout baixo

# Configura√ß√µes de mem√≥ria
preload_app = True  # Preload para economizar mem√≥ria
worker_tmp_dir = "/dev/shm"  # Usar RAM para tempor√°rios (se dispon√≠vel)

# Configura√ß√µes de bind
bind = f"0.0.0.0:{os.environ.get('PORT', 5000)}"
backlog = 64  # Backlog reduzido

# Configura√ß√µes de log otimizadas
loglevel = "warning"  # Apenas warnings e erros
access_log_format = "%(h)s %(l)s %(t)s %(r)s %(s)s %(b)s"
errorlog = "-"
accesslog = "-"

# Configura√ß√µes de processo
daemon = False
pidfile = None
tmp_upload_dir = None

# Limites de mem√≥ria
limit_request_line = 2048  # Reduzido
limit_request_fields = 50  # Reduzido
limit_request_field_size = 4096  # Reduzido

# Hooks para otimiza√ß√£o de mem√≥ria
def when_ready(server):
    """Hook executado quando o servidor est√° pronto"""
    print("üöÄ Gunicorn iniciado com configura√ß√£o otimizada para 512MB")

def worker_int(worker):
    """Hook executado quando worker recebe SIGINT"""
    print(f"üîÑ Worker {worker.pid} reiniciando para limpeza de mem√≥ria")

def pre_fork(server, worker):
    """Hook executado antes de fazer fork do worker"""
    # Limpeza de mem√≥ria antes do fork
    import gc
    gc.collect()

def post_fork(server, worker):
    """Hook executado ap√≥s fork do worker"""
    # Configura√ß√µes espec√≠ficas do worker
    import gc
    gc.set_threshold(100, 2, 2)  # GC agressivo
    print(f"‚ö° Worker {worker.pid} iniciado com GC otimizado")

def worker_abort(worker):
    """Hook executado quando worker aborta"""
    print(f"‚ùå Worker {worker.pid} abortado - liberando mem√≥ria")
    import gc
    gc.collect()

# Configura√ß√µes espec√≠ficas para produ√ß√£o
if os.environ.get('FLASK_ENV') == 'production':
    # Configura√ß√µes ainda mais agressivas para produ√ß√£o
    max_requests = 25  # Ainda menor em produ√ß√£o
    worker_connections = 15  # Ainda menor
    timeout = 15  # Timeout ainda menor
