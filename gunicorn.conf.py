# Configura√ß√£o Gunicorn Otimizada para Render (Baixa Mem√≥ria)
# Este arquivo √© usado quando o Render n√£o consegue usar o Procfile

import os
import multiprocessing

# Configura√ß√µes b√°sicas
# Configura√ß√£o Gunicorn otimizada para Render 512MB
import os
import multiprocessing

# Configura√ß√µes b√°sicas
bind = f"0.0.0.0:{os.environ.get('PORT', 5000)}"
workers = 1  # APENAS 1 worker para economizar mem√≥ria (era 2)
worker_class = "sync"  # Sync √© mais eficiente em mem√≥ria que async
worker_connections = 50  # Reduzido de 1000 para 50

# Otimiza√ß√µes de mem√≥ria cr√≠ticas para Render 512MB
max_requests = 100  # Reciclar worker ap√≥s 100 requests
max_requests_jitter = 10  # Adicionar varia√ß√£o
worker_memory_limit = 400 * 1024 * 1024  # 400MB limite por worker
preload_app = False  # N√ÉO precarregar app (economia de mem√≥ria)

# Timeouts otimizados
timeout = 60  # Reduzido de 120 para 60 segundos
keepalive = 2
graceful_timeout = 30

# Configura√ß√µes de logging minimalistas
accesslog = "-"
errorlog = "-"
loglevel = "warning"  # Menos logs = menos mem√≥ria
access_log_format = '%(h)s "%(r)s" %(s)s %(b)s %(D)s'  # Formato m√≠nimo

# Configura√ß√µes espec√≠ficas para produ√ß√£o
if os.environ.get('FLASK_ENV') == 'production':
    # Ainda mais conservador em produ√ß√£o
    workers = 1
    worker_connections = 25
    max_requests = 50
    loglevel = "error"  # Apenas erros
    
    print("üß† Gunicorn configurado para m√°xima economia de mem√≥ria (Render 512MB)")
else:
    print("üîß Gunicorn configurado para desenvolvimento")

# Fun√ß√µes de hook para monitoramento de mem√≥ria
def when_ready(server):
    """Executado quando o servidor est√° pronto"""
    print(f"üöÄ Gunicorn iniciado com {workers} worker(s)")
    print(f"üíæ Configurado para Render 512MB - workers limitados")

def worker_exit(server, worker):
    """Executado quando um worker sai"""
    try:
        import gc
        gc.collect()
        print(f"üßπ Worker {worker.pid} finalizado - memoria limpa")
    except:
        pass

def on_starting(server):
    """Executado ao iniciar"""
    print("‚öôÔ∏è Iniciando Gunicorn com configura√ß√µes otimizadas para mem√≥ria")
    
def pre_fork(server, worker):
    """Executado antes de fazer fork do worker"""
    try:
        import gc
        gc.collect()
    except:
        pass
wsgi_module = "wsgi:application"

# OTIMIZA√á√ïES CR√çTICAS PARA MEM√ìRIA NO RENDER
workers = 1  # CRITICAL: Apenas 1 worker para economizar RAM
worker_class = "gthread"  # Threads ao inv√©s de processos
threads = 2  # M√°ximo 2 threads por worker
worker_connections = 100  # Reduzido para economizar mem√≥ria

# Limites de requisi√ß√µes (ajuda com vazamentos de mem√≥ria)
max_requests = 1000
max_requests_jitter = 100

# Timeouts otimizados
timeout = 30
keepalive = 2
graceful_timeout = 30

# Configura√ß√µes de mem√≥ria
preload_app = False  # CRITICAL: N√£o precarregar para economizar RAM
max_worker_connections = 100

# Logs para produ√ß√£o
accesslog = "-"
errorlog = "-"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Configura√ß√µes do processo
daemon = False
pidfile = None
tmp_upload_dir = None

# Security
forwarded_allow_ips = "*"
secure_scheme_headers = {
    'X-FORWARDED-PROTOCOL': 'ssl',
    'X-FORWARDED-PROTO': 'https',
    'X-FORWARDED-SSL': 'on'
}

# Callbacks para otimiza√ß√£o de mem√≥ria
def when_ready(server):
    server.log.info("üöÄ Servidor Gunicorn iniciado (modo otimizado)")
    server.log.info(f"üß† Workers: {workers} | Threads: {threads}")

def worker_int(worker):
    worker.log.info("üîÑ Worker interrompido, limpando mem√≥ria")
    import gc
    gc.collect()

def on_exit(server):
    server.log.info("üõë Servidor Gunicorn finalizado")

# Configura√ß√µes espec√≠ficas para Render
if os.environ.get('RENDER'):
    # Configura√ß√µes espec√≠ficas para Render
    bind = f"0.0.0.0:{os.environ.get('PORT', '10000')}"
    workers = 1  # Render free tier tem pouca RAM
    timeout = 30
    keepalive = 2
