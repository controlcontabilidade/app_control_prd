# Configura√ß√£o Gunicorn Otimizada para Render (Baixa Mem√≥ria)
# Este arquivo √© usado quando o Render n√£o consegue usar o Procfile

import os
import multiprocessing

# Configura√ß√µes b√°sicas
bind = f"0.0.0.0:{os.environ.get('PORT', '5000')}"
wsgi_module = "wsgi:application"

# OTIMIZA√á√ïES CR√çTICAS PARA MEM√ìRIA NO RENDER
workers = 1  # CRITICAL: Apenas 1 worker para economizar RAM
worker_class = "gthread"  # Threads ao inv√©s de processos
threads = 2  # M√°ximo 2 threads por worker
worker_connections = 100  # Reduzido para economizar mem√≥ria

# Limites de requisi√ß√µes (ajuda com vazamentos de mem√≥ria)
max_requests = 1000
max_requests_jitter = 100

# Timeouts otimizados
timeout = 30
keepalive = 2
graceful_timeout = 30

# Configura√ß√µes de mem√≥ria
preload_app = False  # CRITICAL: N√£o precarregar para economizar RAM
max_worker_connections = 100

# Logs para produ√ß√£o
accesslog = "-"
errorlog = "-"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Configura√ß√µes do processo
daemon = False
pidfile = None
tmp_upload_dir = None

# Security
forwarded_allow_ips = "*"
secure_scheme_headers = {
    'X-FORWARDED-PROTOCOL': 'ssl',
    'X-FORWARDED-PROTO': 'https',
    'X-FORWARDED-SSL': 'on'
}

# Callbacks para otimiza√ß√£o de mem√≥ria
def when_ready(server):
    server.log.info("üöÄ Servidor Gunicorn iniciado (modo otimizado)")
    server.log.info(f"üß† Workers: {workers} | Threads: {threads}")

def worker_int(worker):
    worker.log.info("üîÑ Worker interrompido, limpando mem√≥ria")
    import gc
    gc.collect()

def on_exit(server):
    server.log.info("üõë Servidor Gunicorn finalizado")

# Configura√ß√µes espec√≠ficas para Render
if os.environ.get('RENDER'):
    # Configura√ß√µes espec√≠ficas para Render
    bind = f"0.0.0.0:{os.environ.get('PORT', '10000')}"
    workers = 1  # Render free tier tem pouca RAM
    timeout = 30
    keepalive = 2
