#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para corrigir IDs num√©ricos na coluna ID dos clientes
Converte IDs num√©ricos (formato antigo) para timestamps v√°lidos
"""

import sys
import os
from datetime import datetime
sys.path.append('.')

from services.google_sheets_service_account import GoogleSheetsServiceAccountService

def corrigir_ids_numericos():
    print("üîß Corrigindo IDs num√©ricos na coluna ID dos clientes...")
    
    # Inicializar servi√ßo
    SPREADSHEET_ID = "1jEmEPlxhGsrB_VhP3Pa-69xGRXRSwSAKd1Ypx241M4s"
    service = GoogleSheetsServiceAccountService(SPREADSHEET_ID)
    print(f"üîß Service Account Service inicializado para planilha: {service.spreadsheet_id}")
    
    try:
        # Buscar todos os clientes
        print("üìä Buscando todos os clientes...")
        clients = service.get_clients()
        
        if not clients:
            print("‚ùå Nenhum cliente encontrado!")
            return False
            
        print(f"üìä Total de clientes encontrados: {len(clients)}")
        
        # Identificar clientes com IDs num√©ricos
        clientes_com_problema = []
        
        for i, client in enumerate(clients, 1):
            client_id = client.get('id', '')
            nome = client.get('nomeEmpresa', 'SEM NOME')
            
            # Verificar se √© ID num√©rico (formato antigo)
            if client_id and client_id.isdigit():
                clientes_com_problema.append({
                    'cliente': client,
                    'linha': i + 1,  # +1 porque linha 1 √© cabe√ßalho
                    'nome': nome,
                    'id_antigo': client_id,
                    'indice': i - 1  # √≠ndice na lista de clientes
                })
        
        if not clientes_com_problema:
            print("‚úÖ Nenhum cliente com ID num√©rico encontrado!")
            return True
            
        print(f"üîß Encontrados {len(clientes_com_problema)} clientes com IDs num√©ricos para corrigir")
        
        # Corrigir cada cliente
        corre√ß√µes_realizadas = 0
        
        for i, problema in enumerate(clientes_com_problema, 1):
            cliente = problema['cliente']
            nome = problema['nome']
            id_antigo = problema['id_antigo']
            
            print(f"üîß Cliente {i}/{len(clientes_com_problema)}: '{nome}' - ID antigo: {id_antigo}")
            
            try:
                # Gerar novo timestamp ISO
                novo_timestamp = datetime.now().isoformat()
                
                # Atualizar o ID do cliente
                cliente['id'] = novo_timestamp
                
                # Salvar cliente com novo ID
                print(f"   üîÑ Atualizando ID para: {novo_timestamp}")
                resultado = service.save_client(cliente)
                
                if resultado:
                    print(f"   ‚úÖ Cliente atualizado com sucesso!")
                    corre√ß√µes_realizadas += 1
                else:
                    print(f"   ‚ùå Erro ao atualizar cliente: {resultado}")
                    
            except Exception as e:
                print(f"   ‚ùå Exce√ß√£o ao corrigir cliente '{nome}': {e}")
                continue
        
        print(f"\nüìä ===== RESUMO FINAL =====")
        print(f"üìä Clientes com problema encontrados: {len(clientes_com_problema)}")
        print(f"üìä Corre√ß√µes realizadas: {corre√ß√µes_realizadas}")
        print(f"üìä Taxa de sucesso: {(corre√ß√µes_realizadas/len(clientes_com_problema)*100):.1f}%")
        
        return corre√ß√µes_realizadas == len(clientes_com_problema)
        
    except Exception as e:
        print(f"‚ùå Erro durante a corre√ß√£o: {e}")
        import traceback
        print(f"‚ùå Tipo do erro: {type(e).__name__}")
        print(f"‚ùå Traceback completo: {traceback.format_exc()}")
        return False

def verificar_correcoes():
    """Verificar se as corre√ß√µes foram aplicadas com sucesso"""
    print("\nüîç ===== VERIFICA√á√ÉO FINAL =====")
    print("üîç Recarregando dados para verificar corre√ß√µes...")
    
    try:
        SPREADSHEET_ID = "1jEmEPlxhGsrB_VhP3Pa-69xGRXRSwSAKd1Ypx241M4s"
        service = GoogleSheetsServiceAccountService(SPREADSHEET_ID)
        clients = service.get_clients()
        
        if not clients:
            print("‚ùå Erro ao recarregar dados para verifica√ß√£o!")
            return False
        
        # Contar IDs num√©ricos restantes
        ids_numericos_restantes = 0
        
        for client in clients:
            client_id = client.get('id', '')
            if client_id and client_id.isdigit():
                ids_numericos_restantes += 1
        
        print(f"üìä IDs num√©ricos restantes: {ids_numericos_restantes}")
        
        if ids_numericos_restantes == 0:
            print("üéâ Todos os IDs foram corrigidos com sucesso!")
            return True
        else:
            print(f"‚ö†Ô∏è Ainda restam {ids_numericos_restantes} IDs num√©ricos para corrigir")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao recarregar dados para verifica√ß√£o: {e}")
        return False

if __name__ == "__main__":
    try:
        sucesso = corrigir_ids_numericos()
        
        if sucesso:
            print("\n‚úÖ Todas as corre√ß√µes foram aplicadas com sucesso!")
        else:
            print("\n‚ö†Ô∏è Algumas corre√ß√µes falharam. Execute novamente se necess√°rio.")
            
        # Verificar resultado final
        verificar_correcoes()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")